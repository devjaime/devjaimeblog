---
// Widget de chat minimalista que envía mensajes a /api/chat (proxy a Ollama local)
// Uso: <ChatWidget />
---

<div class="chat-widget ai-glow">
  <div class="chat-header">
    <span class="title">Asistente de devjaime</span>
    <span class="status" id="chat-status">offline</span>
  </div>
  <div class="chat-messages" id="chat-messages"></div>
  <form class="chat-input" id="chat-form">
    <input type="text" id="chat-text" placeholder="Escribe tu mensaje..." autocomplete="off" />
    <button type="submit" class="send">Enviar</button>
  </form>
  <div class="hint">Tu mensaje se procesa en tu equipo si Ollama está corriendo.</div>
  <noscript>Activa JavaScript para usar el chat.</noscript>
  <style>
    .chat-widget {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      width: min(360px, 90vw);
      background: rgba(15,23,42,0.96);
      border: 1px solid rgba(34,197,94,0.25);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 10px 30px rgba(0,0,0,0.35);
      z-index: 60;
      color: #e5e7eb;
      backdrop-filter: blur(10px);
    }
    .chat-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 0.75rem;
      background: rgba(34,197,94,0.10);
      border-bottom: 1px solid rgba(34,197,94,0.25);
    }
    .title { color: #22c55e; font-weight: 600; font-size: 0.95rem; }
    .status { font-size: 0.75rem; color: #9ca3af; }
    .chat-messages {
      height: 300px;
      overflow-y: auto;
      padding: 0.75rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }
    .msg { padding: 0.5rem 0.6rem; border-radius: 8px; max-width: 90%; white-space: pre-wrap; }
    .user { align-self: flex-end; background: rgba(34,197,94,0.15); border: 1px solid rgba(34,197,94,0.25); }
    .ai { align-self: flex-start; background: rgba(148,163,184,0.1); border: 1px solid rgba(148,163,184,0.25); }
    .chat-input { display: flex; gap: 0.5rem; padding: 0.5rem; border-top: 1px solid rgba(34,197,94,0.25); }
    .chat-input input { flex: 1; background: rgba(2,6,23,0.7); color: #e5e7eb; border: 1px solid rgba(148,163,184,0.2); border-radius: 8px; padding: 0.45rem 0.6rem; }
    .chat-input .send { background: #10b981; color: white; border: none; border-radius: 8px; padding: 0.45rem 0.7rem; cursor: pointer; }
    .chat-input .send:disabled { opacity: 0.6; cursor: not-allowed; }
    .hint { padding: 0.35rem 0.6rem; font-size: 0.70rem; color: #94a3b8; border-top: 1px dashed rgba(148,163,184,0.25); }
  </style>
  <script>
    const statusEl = document.getElementById('chat-status');
    const messagesEl = document.getElementById('chat-messages');
    const formEl = document.getElementById('chat-form');
    const inputEl = document.getElementById('chat-text') as HTMLInputElement;

    const chatHistory: { role: 'system' | 'user' | 'assistant'; content: string }[] = [];

    function appendMessage(role: 'user'|'assistant', content: string) {
      const div = document.createElement('div');
      div.className = `msg ${role === 'user' ? 'user' : 'ai'}`;
      div.textContent = content;
      messagesEl?.appendChild(div);
      messagesEl?.scrollTo({ top: messagesEl.scrollHeight, behavior: 'smooth' });
    }

    async function checkHealth() {
      // Intento rápido: si el endpoint responde 200, mostramos online
      try {
        const res = await fetch('/api/chat', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ messages: [{ role: 'user', content: 'ping' }], model: undefined }) });
        if (res.ok) {
          statusEl!.textContent = 'online';
          statusEl!.style.color = '#22c55e';
        } else {
          statusEl!.textContent = 'offline';
          statusEl!.style.color = '#f97316';
        }
      } catch {
        statusEl!.textContent = 'offline';
        statusEl!.style.color = '#f97316';
      }
    }

    async function sendMessage(text: string) {
      appendMessage('user', text);
      chatHistory.push({ role: 'user', content: text });
      inputEl.disabled = true;
      (formEl!.querySelector('.send') as HTMLButtonElement).disabled = true;

      try {
        const res = await fetch('/api/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ messages: chatHistory, model: undefined }),
        });
        const data = await res.json();
        const aiText = data?.content || 'Error: sin respuesta';
        chatHistory.push({ role: 'assistant', content: aiText });
        appendMessage('assistant', aiText);
      } catch (e) {
        appendMessage('assistant', 'No pude conectar con Ollama. ¿Está corriendo en tu equipo?');
      } finally {
        inputEl.disabled = false;
        (formEl!.querySelector('.send') as HTMLButtonElement).disabled = false;
        inputEl.focus();
      }
    }

    formEl?.addEventListener('submit', (ev) => {
      ev.preventDefault();
      const text = inputEl.value.trim();
      if (!text) return;
      inputEl.value = '';
      sendMessage(text);
    });

    // Inicializa estado
    checkHealth();
  </script>
</div>


