---
interface Props {
  currentLanguage?: string;
}

const { currentLanguage = "es" } = Astro.props;
---

<div class="language-toggle relative inline-block">
  <button
    id="language-toggle"
    class="flex items-center gap-2 px-3 py-2 text-sm font-mono bg-zag-dark/10 dark:bg-zag-light/10 rounded-lg hover:bg-zag-dark/20 dark:hover:bg-zag-light/20 transition-all duration-200 border border-zag-dark/20 dark:border-zag-light/20"
    aria-label="Cambiar idioma"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="zag-fill">
      <path d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.01-4.65.83-6.99l2.16-2.16c.56-.56.14-1.51-.71-1.51H3.17c-.85 0-1.26.95-.71 1.51l2.16 2.16c-1.18 2.34-.91 5.05.83 6.99l.03.03-2.54 2.51c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0L8.3 13.38c1.32.71 2.85.89 4.33.89s3.01-.18 4.33-.89l2.12 2.12c.39.39 1.02.39 1.41 0 .39-.39.39-1.02 0-1.41z"/>
    </svg>
    <span class="current-lang">{currentLanguage === "es" ? "ES" : "EN"}</span>
    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="currentColor" class="zag-fill transition-transform duration-200">
      <path d="M7 10l5 5 5-5z"/>
    </svg>
  </button>
  
  <div
    id="language-dropdown"
    class="absolute right-0 mt-2 w-32 bg-zag-light dark:bg-zag-dark rounded-lg shadow-lg border border-zag-dark/20 dark:border-zag-light/20 opacity-0 invisible transform scale-95 transition-all duration-200 z-50"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-toggle"
  >
    <button
      class="language-option w-full text-left px-4 py-2 text-sm hover:bg-emerald-600 hover:text-white transition-colors duration-150 rounded-t-lg"
      data-lang="es"
      role="menuitem"
    >
      ðŸ‡ªðŸ‡¸ EspaÃ±ol
    </button>
    <button
      class="language-option w-full text-left px-4 py-2 text-sm hover:bg-emerald-600 hover:text-white transition-colors duration-150 rounded-b-lg"
      data-lang="en"
      role="menuitem"
    >
      ðŸ‡ºðŸ‡¸ English
    </button>
  </div>
</div>

<script>
  class LanguageToggle {
    constructor() {
      this.toggle = document.getElementById('language-toggle');
      this.dropdown = document.getElementById('language-dropdown');
      this.currentLang = document.querySelector('.current-lang');
      this.options = document.querySelectorAll('.language-option');
      this.isOpen = false;
      
      this.init();
    }
    
    init() {
      this.toggle?.addEventListener('click', () => this.toggleDropdown());
      this.options.forEach(option => {
        option.addEventListener('click', (e) => this.selectLanguage(e));
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.toggle?.contains(e.target as Node) && !this.dropdown?.contains(e.target as Node)) {
          this.closeDropdown();
        }
      });
      
      // Close dropdown on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.closeDropdown();
        }
      });
    }
    
    toggleDropdown() {
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }
    
    openDropdown() {
      this.isOpen = true;
      this.dropdown?.classList.remove('opacity-0', 'invisible', 'scale-95');
      this.dropdown?.classList.add('opacity-100', 'visible', 'scale-100');
      this.toggle?.setAttribute('aria-expanded', 'true');
      this.toggle?.querySelector('svg:last-child')?.classList.add('rotate-180');
    }
    
    closeDropdown() {
      this.isOpen = false;
      this.dropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
      this.dropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
      this.toggle?.setAttribute('aria-expanded', 'false');
      this.toggle?.querySelector('svg:last-child')?.classList.remove('rotate-180');
    }
    
    selectLanguage(e: Event) {
      const target = e.target as HTMLElement;
      const lang = target.getAttribute('data-lang');
      
      if (lang) {
        this.updateLanguage(lang);
        this.closeDropdown();
      }
    }
    
    updateLanguage(lang: string) {
      // Store language preference
      localStorage.setItem('preferred-language', lang);
      
      // Update current language display
      this.currentLang!.textContent = lang.toUpperCase();
      
      // Update page content
      this.updatePageContent(lang);
    }
    
    updatePageContent(lang: string) {
      // This will be implemented to update the page content
      // For now, we'll just reload the page with the new language
      const url = new URL(window.location.href);
      url.searchParams.set('lang', lang);
      window.location.href = url.toString();
    }
  }
  
  // Initialize language toggle
  new LanguageToggle();
</script> 