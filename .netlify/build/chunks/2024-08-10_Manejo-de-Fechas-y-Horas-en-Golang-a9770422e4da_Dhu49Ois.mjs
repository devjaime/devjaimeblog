/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"manejo-de-fechas-y-horas-en-golang\">Manejo de Fechas y Horas en Golang</h1>\n<p>En el desarrollo de software, el manejo adecuado de fechas y horas es crucial, especialmente cuando trabajas con aplicaciones que operan en…</p>\n<hr>\n<h3 id=\"manejo-de-fechas-y-horas-engolang\">Manejo de Fechas y Horas en Golang</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*32WeyT_gCjU1Xnrkme-tMg.png\" alt=\"\"></p>\n<p>En el desarrollo de software, el manejo adecuado de fechas y horas es crucial, especialmente cuando trabajas con aplicaciones que operan en diferentes zonas horarias. Golang ofrece un paquete robusto para manejar fechas y horas, conocido como <code>time</code>. En este blog, exploraremos cómo agregar zonas horarias a las fechas en Golang y cómo definir formatos personalizados utilizando layouts. Utilizaremos ejemplos prácticos para ilustrar estos conceptos, basados en la <a href=\"https://gosamples.dev/date-time-format-cheatsheet/\">guía de formatos de fecha y hora</a> de GoSamples.</p>\n<h4 id=\"1-paquete-time-engolang\">1. Paquete <code>time</code> en Golang</h4>\n<p>El paquete <code>time</code> es la herramienta principal para manejar fechas y horas en Golang. Permite realizar una variedad de operaciones, como obtener la fecha y hora actual, agregar y restar intervalos de tiempo, comparar fechas, y mucho más.</p>\n<h4 id=\"2-obtener-la-fecha-y-horaactual\">2. Obtener la Fecha y Hora Actual</h4>\n<p>Para obtener la fecha y hora actual en Golang, se utiliza la función <code>time.Now()</code>:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ncurrentTime := time.Now()<br>\nfmt.Println(“Fecha y hora actual:”, currentTime)<br>\n}</p>\n<p>Este código imprimirá la fecha y hora actual en el formato predeterminado.</p>\n<h4 id=\"3-agregar-zonahoraria\">3. Agregar Zona Horaria</h4>\n<p>Golang permite ajustar la zona horaria de una fecha y hora utilizando la función <code>time.LoadLocation</code>. A continuación, un ejemplo de cómo se puede cambiar la zona horaria a la de Santiago, Chile:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\nloc, err := time.LoadLocation(“America/Santiago”)<br>\nif err != nil {<br>\nfmt.Println(“Error al cargar la ubicación:”, err)<br>\nreturn<br>\n}</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>currentTime := time.Now().In(loc)  </span></span>\n<span class=\"line\"><span>fmt.Println(\"Fecha y hora actual en Santiago:\", currentTime)  </span></span></code></pre>\n<p>}</p>\n<p>En este ejemplo, se carga la zona horaria de “America/Santiago” y se ajusta la hora actual a esta zona.</p>\n<h4 id=\"4-formatear-fechas-y-horas-engolang\">4. Formatear Fechas y Horas en Golang</h4>\n<p>Golang utiliza layouts para formatear fechas y horas. Un layout es una cadena de texto que define el formato de salida, basado en la fecha específica “Mon Jan 2 15:04:05 MST 2006” (que representa “Monday, January 2, 3:04:05 PM MST 2006”).</p>\n<p>Por ejemplo, para obtener una fecha en el formato <code>dd-mm-yyyy hh:mm:ss</code>, se puede definir el layout como sigue:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ncurrentTime := time.Now()<br>\nlayout := “02-01-2006 15:04:05”<br>\nformattedTime := currentTime.Format(layout)<br>\nfmt.Println(“Fecha y hora formateada:”, formattedTime)<br>\n}</p>\n<h4 id=\"5-ejemplos-de-layoutscomunes\">5. Ejemplos de Layouts Comunes</h4>\n<p>Aquí algunos ejemplos de layouts comunes que puedes utilizar:</p>\n<ul>\n<li><strong>Fecha corta (dd-mm-yyyy):</strong> <code>\"02-01-2006\"</code></li>\n<li><strong>Fecha larga (dd Month yyyy):</strong> <code>\"02 January 2006\"</code></li>\n<li><strong>Hora (hh:mm):</strong> <code>\"15:04:05\"</code></li>\n</ul>\n<h4 id=\"6-conversión-entre-diferentes-zonashorarias\">6. Conversión entre Diferentes Zonas Horarias</h4>\n<p>Puedes convertir una fecha de una zona horaria a otra utilizando el método <code>In</code>:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\nlocNY, _ := time.LoadLocation(“America/New_York”)<br>\nlocTokyo, _ := time.LoadLocation(“Asia/Tokyo”)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>nyTime := time.Now().In(locNY)  </span></span>\n<span class=\"line\"><span>tokyoTime := nyTime.In(locTokyo)  </span></span>\n<span class=\"line\"><span>  </span></span>\n<span class=\"line\"><span>fmt.Println(\"Hora en Nueva York:\", nyTime)  </span></span>\n<span class=\"line\"><span>fmt.Println(\"Hora en Tokio:\", tokyoTime)  </span></span></code></pre>\n<p>}</p>\n<h3 id=\"comparaciones-restas-y-más-ejemplos-prácticos\">Comparaciones, Restas y Más Ejemplos Prácticos</h3>\n<p>En la primera parte de este blog, cubrimos los conceptos básicos sobre cómo manejar fechas en Golang, incluyendo cómo agregar zonas horarias y formatear fechas utilizando layouts. Ahora, profundizaremos en operaciones más avanzadas, como la comparación de fechas, la resta de meses y días, y cómo obtener el último día del mes anterior.</p>\n<h4 id=\"1-comparación-defechas\">1. Comparación de Fechas</h4>\n<p>Comparar fechas en Golang es bastante sencillo gracias a los métodos integrados del tipo <code>time.Time</code>. Puedes usar operadores lógicos como <code>Before</code>, <code>After</code>, y <code>Equal</code> para comparar dos instancias de tiempo.</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ndate1 := time.Date(2023, 8, 10, 0, 0, 0, 0, time.UTC)<br>\ndate2 := time.Date(2024, 8, 10, 0, 0, 0, 0, time.UTC)<br>\nfmt.Println(“Fecha 1 es antes de Fecha 2:”, date1.Before(date2))<br>\nfmt.Println(“Fecha 1 es después de Fecha 2:”, date1.After(date2))<br>\nfmt.Println(“Fecha 1 es igual a Fecha 2:”, date1.Equal(date2))<br>\n}</p>\n<p>En este ejemplo, se comparan dos fechas distintas utilizando los métodos <code>Before</code>, <code>After</code> y <code>Equal</code>.</p>\n<h4 id=\"2-resta-de-meses-ydías\">2. Resta de Meses y Días</h4>\n<p>A veces es necesario restar un número específico de meses o días a una fecha determinada. Golang permite realizar estas operaciones fácilmente.</p>\n<p>Resta de Días:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ncurrentTime := time.Now()<br>\ndaysAgo := currentTime.AddDate(0, 0, -10) // Resta 10 días<br>\nfmt.Println(“Hace 10 días:”, daysAgo)<br>\n}</p>\n<p>Resta de Meses:</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ncurrentTime := time.Now()<br>\nmonthsAgo := currentTime.AddDate(0, -2, 0) // Resta 2 meses<br>\nfmt.Println(“Hace 2 meses:”, monthsAgo)<br>\n}</p>\n<p>En estos ejemplos, la función <code>AddDate</code> permite restar días o meses especificando los parámetros correspondientes (año, mes, día).</p>\n<h4 id=\"3-obtener-el-último-día-del-mesanterior\">3. Obtener el Último Día del Mes Anterior</h4>\n<p>Golang facilita el cálculo del último día del mes anterior utilizando el método <code>AddDate</code> y estableciendo el día como cero.</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ncurrentTime := time.Now()<br>\nfirstDayOfMonth := time.Date(currentTime.Year(), currentTime.Month(), 1, 0, 0, 0, 0, currentTime.Location())<br>\nlastDayOfLastMonth := firstDayOfMonth.AddDate(0, 0, -1)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>fmt.Println(\"Último día del mes anterior:\", lastDayOfLastMonth)  </span></span></code></pre>\n<p>}</p>\n<p>Este código calcula el último día del mes anterior al crear la fecha del primer día del mes actual y luego restar un día.</p>\n<h4 id=\"4-comparaciones-adicionales-rango-defechas\">4. Comparaciones Adicionales: Rango de Fechas</h4>\n<p>Para verificar si una fecha se encuentra dentro de un rango de fechas, puedes usar una combinación de las comparaciones <code>Before</code> y <code>After</code>.</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\nstartDate := time.Date(2024, 7, 1, 0, 0, 0, 0, time.UTC)<br>\nendDate := time.Date(2024, 7, 31, 23, 59, 59, 0, time.UTC)<br>\ndateToCheck := time.Date(2024, 7, 15, 0, 0, 0, 0, time.UTC)<br>\nif dateToCheck.After(startDate) &#x26;&#x26; dateToCheck.Before(endDate) {<br>\nfmt.Println(“La fecha está dentro del rango.”)<br>\n} else {<br>\nfmt.Println(“La fecha no está dentro del rango.”)<br>\n}<br>\n}</p>\n<p>Este ejemplo comprueba si una fecha dada se encuentra dentro de un rango específico.</p>\n<h4 id=\"5-duración-entre-dosfechas\">5. Duración Entre Dos Fechas</h4>\n<p>La diferencia de tiempo entre dos fechas se puede calcular con el método <code>Sub</code>, que devuelve un valor de tipo <code>time.Duration</code>.</p>\n<p>package main<br>\nimport (<br>\n“fmt\"<br>\n\"time”<br>\n)<br>\nfunc main() {<br>\ndate1 := time.Date(2024, 8, 1, 0, 0, 0, 0, time.UTC)<br>\ndate2 := time.Date(2024, 8, 10, 0, 0, 0, 0, time.UTC)<br>\nduration := date2.Sub(date1)<br>\nfmt.Println(“Duración entre fechas:”, duration)<br>\nfmt.Println(“En días:”, duration.Hours()/24)<br>\n}</p>\n<p>En este ejemplo, se calcula la duración entre dos fechas en días.</p>\n<h3 id=\"conclusión\">Conclusión</h3>\n<p>Golang proporciona herramientas poderosas y flexibles para manejar fechas y horas. Ya sea que necesites agregar zonas horarias, definir formatos personalizados o convertir entre diferentes zonas horarias, el paquete <code>time</code> te ofrece todo lo necesario. Estos conceptos y ejemplos te permitirán manejar fechas y horas de manera efectiva en tus proyectos en Golang.</p>\n<p>Manejar fechas en Golang puede ser sencillo o complejo dependiendo de las necesidades de tu proyecto. Desde simples comparaciones hasta cálculos más avanzados como la obtención del último día del mes anterior o la duración entre dos fechas, Golang ofrece una variedad de herramientas a través del paquete <code>time</code>. Estos ejemplos prácticos te ayudarán a aplicar estos conceptos de manera efectiva en tus aplicaciones, asegurando que tus datos de tiempo sean precisos y estén correctamente ajustados a las necesidades de tu proyecto.</p>\n<p>.</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/a9770422e4da\">August 10, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/manejo-de-fechas-y-horas-en-golang-a9770422e4da\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Manejo de Fechas y Horas en Golang","description":"","tags":["code","Golang"],"time":4,"featured":true,"timestamp":"2024-08-10T12:20:32-0300","filename":"2024-08-10_Manejo-de-Fechas-y-Horas-en-Golang-a9770422e4da"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-08-10_Manejo-de-Fechas-y-Horas-en-Golang-a9770422e4da.md";
				const url = "/blog/2024-08-10_Manejo-de-Fechas-y-Horas-en-Golang-a9770422e4da";
				function rawContent() {
					return "   \n                                        \n                                           \n               \n                        \n       \n              \n                                     \n                                                                      \n   \n\nManejo de Fechas y Horas en Golang\n==================================\n\nEn el desarrollo de software, el manejo adecuado de fechas y horas es crucial, especialmente cuando trabajas con aplicaciones que operan en…\n\n* * *\n\n### Manejo de Fechas y Horas en Golang\n\n![](https://cdn-images-1.medium.com/max/800/1*32WeyT_gCjU1Xnrkme-tMg.png)\n\nEn el desarrollo de software, el manejo adecuado de fechas y horas es crucial, especialmente cuando trabajas con aplicaciones que operan en diferentes zonas horarias. Golang ofrece un paquete robusto para manejar fechas y horas, conocido como `time`. En este blog, exploraremos cómo agregar zonas horarias a las fechas en Golang y cómo definir formatos personalizados utilizando layouts. Utilizaremos ejemplos prácticos para ilustrar estos conceptos, basados en la [guía de formatos de fecha y hora](https://gosamples.dev/date-time-format-cheatsheet/) de GoSamples.\n\n#### 1\\. Paquete `time` en Golang\n\nEl paquete `time` es la herramienta principal para manejar fechas y horas en Golang. Permite realizar una variedad de operaciones, como obtener la fecha y hora actual, agregar y restar intervalos de tiempo, comparar fechas, y mucho más.\n\n#### 2\\. Obtener la Fecha y Hora Actual\n\nPara obtener la fecha y hora actual en Golang, se utiliza la función `time.Now()`:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    currentTime := time.Now()  \n    fmt.Println(\"Fecha y hora actual:\", currentTime)  \n}\n\nEste código imprimirá la fecha y hora actual en el formato predeterminado.\n\n#### 3\\. Agregar Zona Horaria\n\nGolang permite ajustar la zona horaria de una fecha y hora utilizando la función `time.LoadLocation`. A continuación, un ejemplo de cómo se puede cambiar la zona horaria a la de Santiago, Chile:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    loc, err := time.LoadLocation(\"America/Santiago\")  \n    if err != nil {  \n        fmt.Println(\"Error al cargar la ubicación:\", err)  \n        return  \n    }  \n      \n    currentTime := time.Now().In(loc)  \n    fmt.Println(\"Fecha y hora actual en Santiago:\", currentTime)  \n}\n\nEn este ejemplo, se carga la zona horaria de “America/Santiago” y se ajusta la hora actual a esta zona.\n\n#### 4\\. Formatear Fechas y Horas en Golang\n\nGolang utiliza layouts para formatear fechas y horas. Un layout es una cadena de texto que define el formato de salida, basado en la fecha específica “Mon Jan 2 15:04:05 MST 2006” (que representa “Monday, January 2, 3:04:05 PM MST 2006”).\n\nPor ejemplo, para obtener una fecha en el formato `dd-mm-yyyy hh:mm:ss`, se puede definir el layout como sigue:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    currentTime := time.Now()  \n    layout := \"02-01-2006 15:04:05\"  \n    formattedTime := currentTime.Format(layout)  \n    fmt.Println(\"Fecha y hora formateada:\", formattedTime)  \n}\n\n#### 5\\. Ejemplos de Layouts Comunes\n\nAquí algunos ejemplos de layouts comunes que puedes utilizar:\n\n*   **Fecha corta (dd-mm-yyyy):** `\"02-01-2006\"`\n*   **Fecha larga (dd Month yyyy):** `\"02 January 2006\"`\n*   **Hora (hh:mm):** `\"15:04:05\"`\n\n#### 6\\. Conversión entre Diferentes Zonas Horarias\n\nPuedes convertir una fecha de una zona horaria a otra utilizando el método `In`:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    locNY, \\_ := time.LoadLocation(\"America/New\\_York\")  \n    locTokyo, \\_ := time.LoadLocation(\"Asia/Tokyo\")  \n      \n    nyTime := time.Now().In(locNY)  \n    tokyoTime := nyTime.In(locTokyo)  \n      \n    fmt.Println(\"Hora en Nueva York:\", nyTime)  \n    fmt.Println(\"Hora en Tokio:\", tokyoTime)  \n}\n\n### Comparaciones, Restas y Más Ejemplos Prácticos\n\nEn la primera parte de este blog, cubrimos los conceptos básicos sobre cómo manejar fechas en Golang, incluyendo cómo agregar zonas horarias y formatear fechas utilizando layouts. Ahora, profundizaremos en operaciones más avanzadas, como la comparación de fechas, la resta de meses y días, y cómo obtener el último día del mes anterior.\n\n#### 1\\. Comparación de Fechas\n\nComparar fechas en Golang es bastante sencillo gracias a los métodos integrados del tipo `time.Time`. Puedes usar operadores lógicos como `Before`, `After`, y `Equal` para comparar dos instancias de tiempo.\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    date1 := time.Date(2023, 8, 10, 0, 0, 0, 0, time.UTC)  \n    date2 := time.Date(2024, 8, 10, 0, 0, 0, 0, time.UTC)  \n    fmt.Println(\"Fecha 1 es antes de Fecha 2:\", date1.Before(date2))  \n    fmt.Println(\"Fecha 1 es después de Fecha 2:\", date1.After(date2))  \n    fmt.Println(\"Fecha 1 es igual a Fecha 2:\", date1.Equal(date2))  \n}\n\nEn este ejemplo, se comparan dos fechas distintas utilizando los métodos `Before`, `After` y `Equal`.\n\n#### 2\\. Resta de Meses y Días\n\nA veces es necesario restar un número específico de meses o días a una fecha determinada. Golang permite realizar estas operaciones fácilmente.\n\nResta de Días:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    currentTime := time.Now()  \n    daysAgo := currentTime.AddDate(0, 0, \\-10) // Resta 10 días  \n    fmt.Println(\"Hace 10 días:\", daysAgo)  \n}\n\nResta de Meses:\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    currentTime := time.Now()  \n    monthsAgo := currentTime.AddDate(0, \\-2, 0) // Resta 2 meses  \n    fmt.Println(\"Hace 2 meses:\", monthsAgo)  \n}\n\nEn estos ejemplos, la función `AddDate` permite restar días o meses especificando los parámetros correspondientes (año, mes, día).\n\n#### 3\\. Obtener el Último Día del Mes Anterior\n\nGolang facilita el cálculo del último día del mes anterior utilizando el método `AddDate` y estableciendo el día como cero.\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    currentTime := time.Now()  \n    firstDayOfMonth := time.Date(currentTime.Year(), currentTime.Month(), 1, 0, 0, 0, 0, currentTime.Location())  \n    lastDayOfLastMonth := firstDayOfMonth.AddDate(0, 0, -1)  \n      \n    fmt.Println(\"Último día del mes anterior:\", lastDayOfLastMonth)  \n}\n\nEste código calcula el último día del mes anterior al crear la fecha del primer día del mes actual y luego restar un día.\n\n#### 4\\. Comparaciones Adicionales: Rango de Fechas\n\nPara verificar si una fecha se encuentra dentro de un rango de fechas, puedes usar una combinación de las comparaciones `Before` y `After`.\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    startDate := time.Date(2024, 7, 1, 0, 0, 0, 0, time.UTC)  \n    endDate := time.Date(2024, 7, 31, 23, 59, 59, 0, time.UTC)  \n    dateToCheck := time.Date(2024, 7, 15, 0, 0, 0, 0, time.UTC)  \n    if dateToCheck.After(startDate) && dateToCheck.Before(endDate) {  \n        fmt.Println(\"La fecha está dentro del rango.\")  \n    } else {  \n        fmt.Println(\"La fecha no está dentro del rango.\")  \n    }  \n}\n\nEste ejemplo comprueba si una fecha dada se encuentra dentro de un rango específico.\n\n#### 5\\. Duración Entre Dos Fechas\n\nLa diferencia de tiempo entre dos fechas se puede calcular con el método `Sub`, que devuelve un valor de tipo `time.Duration`.\n\npackage main  \nimport (  \n    \"fmt\"  \n    \"time\"  \n)  \nfunc main() {  \n    date1 := time.Date(2024, 8, 1, 0, 0, 0, 0, time.UTC)  \n    date2 := time.Date(2024, 8, 10, 0, 0, 0, 0, time.UTC)  \n    duration := date2.Sub(date1)  \n    fmt.Println(\"Duración entre fechas:\", duration)  \n    fmt.Println(\"En días:\", duration.Hours()/24)  \n}\n\nEn este ejemplo, se calcula la duración entre dos fechas en días.\n\n### Conclusión\n\nGolang proporciona herramientas poderosas y flexibles para manejar fechas y horas. Ya sea que necesites agregar zonas horarias, definir formatos personalizados o convertir entre diferentes zonas horarias, el paquete `time` te ofrece todo lo necesario. Estos conceptos y ejemplos te permitirán manejar fechas y horas de manera efectiva en tus proyectos en Golang.\n\nManejar fechas en Golang puede ser sencillo o complejo dependiendo de las necesidades de tu proyecto. Desde simples comparaciones hasta cálculos más avanzados como la obtención del último día del mes anterior o la duración entre dos fechas, Golang ofrece una variedad de herramientas a través del paquete `time`. Estos ejemplos prácticos te ayudarán a aplicar estos conceptos de manera efectiva en tus aplicaciones, asegurando que tus datos de tiempo sean precisos y estén correctamente ajustados a las necesidades de tu proyecto.\n\n.\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [August 10, 2024](https://medium.com/p/a9770422e4da).\n\n[Canonical link](https://medium.com/@devjaime/manejo-de-fechas-y-horas-en-golang-a9770422e4da)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"manejo-de-fechas-y-horas-en-golang","text":"Manejo de Fechas y Horas en Golang"},{"depth":3,"slug":"manejo-de-fechas-y-horas-engolang","text":"Manejo de Fechas y Horas en Golang"},{"depth":4,"slug":"1-paquete-time-engolang","text":"1. Paquete time en Golang"},{"depth":4,"slug":"2-obtener-la-fecha-y-horaactual","text":"2. Obtener la Fecha y Hora Actual"},{"depth":4,"slug":"3-agregar-zonahoraria","text":"3. Agregar Zona Horaria"},{"depth":4,"slug":"4-formatear-fechas-y-horas-engolang","text":"4. Formatear Fechas y Horas en Golang"},{"depth":4,"slug":"5-ejemplos-de-layoutscomunes","text":"5. Ejemplos de Layouts Comunes"},{"depth":4,"slug":"6-conversión-entre-diferentes-zonashorarias","text":"6. Conversión entre Diferentes Zonas Horarias"},{"depth":3,"slug":"comparaciones-restas-y-más-ejemplos-prácticos","text":"Comparaciones, Restas y Más Ejemplos Prácticos"},{"depth":4,"slug":"1-comparación-defechas","text":"1. Comparación de Fechas"},{"depth":4,"slug":"2-resta-de-meses-ydías","text":"2. Resta de Meses y Días"},{"depth":4,"slug":"3-obtener-el-último-día-del-mesanterior","text":"3. Obtener el Último Día del Mes Anterior"},{"depth":4,"slug":"4-comparaciones-adicionales-rango-defechas","text":"4. Comparaciones Adicionales: Rango de Fechas"},{"depth":4,"slug":"5-duración-entre-dosfechas","text":"5. Duración Entre Dos Fechas"},{"depth":3,"slug":"conclusión","text":"Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
