/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"what-is-kafka-and-how-to-implement-it-in-nestjs\">What is Kafka and How to Implement it in NestJS</h1>\n<p>Apache Kafka is a distributed and scalable data processing platform used for real-time data streaming. It serves as a messaging and event…</p>\n<hr>\n<h3 id=\"what-is-kafka-and-how-to-implement-it-innestjs\">What is Kafka and How to Implement it in NestJS</h3>\n<p>Apache Kafka is a distributed and scalable data processing platform used for real-time data streaming. It serves as a messaging and event streaming platform, facilitating the secure, reliable, and real-time transfer of data between applications and distributed systems.</p>\n<p>Kafka operates on a publish-subscribe model, where data producers publish messages to a topic, and consumers subscribe to that topic to receive messages. Kafka can handle large volumes of real-time data and distribute them to multiple consumers in parallel.</p>\n<p>Commonly, Kafka finds applications in enterprise solutions, especially those requiring high-speed, high-availability communication between distributed systems. Additionally, Kafka is a flexible platform that can be integrated with various programming languages and tools, boasting an active developer community contributing to its improvement and expansion.</p>\n<p>Key features of Kafka include horizontal scalability, fault tolerance, data replication, storage capacity, and integration with data processing tools like Apache Spark, Apache Flink, and Apache Storm.</p>\n<h3 id=\"implementing-kafka-innestjs\">Implementing Kafka in NestJS</h3>\n<p>To implement Kafka in NestJS, follow these steps:</p>\n<p>1. Install the <code>@nestjs/microservices</code> and <code>kafkajs</code> packages using npm:</p>\n<p>npm install @nestjs/microservices kafkajs</p>\n<p>2. Create a Kafka module in NestJS using the NestJS generator:</p>\n<p>nest generate module kafka</p>\n<p>3. Import the KafkaModule in your main application:</p>\n<p>import { KafkaModule } from ’./kafka/kafka.module’;<br>\n@Module({<br>\nimports: [KafkaModule],<br>\ncontrollers: [AppController],<br>\nproviders: [AppService],<br>\n})<br>\nexport class AppModule {}</p>\n<p>4. Create a Kafka service in the KafkaModule:</p>\n<p>import { Injectable } from ‘@nestjs/common’;<br>\nimport { Kafka } from ‘kafkajs’;<br>\n@Injectable()<br>\nexport class KafkaService {<br>\nprivate kafka;<br>\nconstructor() {<br>\nthis.kafka = new Kafka({<br>\nclientId: ‘your-client-id’,<br>\nbrokers: [‘kafka-broker1’, ‘kafka-broker2’],<br>\n});<br>\n}<br>\nasync sendMessage(topic: string, message: string) {<br>\nconst producer = this.kafka.producer();<br>\nawait producer.connect();<br>\nawait producer.send({<br>\ntopic,<br>\nmessages: [{ value: message }],<br>\n});<br>\nawait producer.disconnect();<br>\n}<br>\nasync consumeMessages(topic: string) {<br>\nconst consumer = this.kafka.consumer({ groupId: ‘group-id’ });<br>\nawait consumer.connect();<br>\nawait consumer.subscribe({ topic, fromBeginning: true });<br>\nawait consumer.run({<br>\neachMessage: async ({ topic, partition, message }) => {<br>\n// Handle the received message<br>\nconsole.log({<br>\ntopic,<br>\npartition,<br>\nvalue: message.value.toString(),<br>\n});<br>\n},<br>\n});<br>\n}<br>\n}</p>\n<p>5. Add a controller in the KafkaModule to handle HTTP requests:</p>\n<p>import { Controller, Get, Post, Body, Param } from ‘@nestjs/common’;<br>\nimport { KafkaService } from ’./kafka.service’;<br>\n@Controller(‘kafka’)<br>\nexport class KafkaController {<br>\nconstructor(private readonly kafkaService: KafkaService) {}<br>\n@Post(‘send/:topic’)<br>\nasync sendKafkaMessage(@Param(‘topic’) topic: string, @Body() message: { value: string }) {<br>\nawait this.kafkaService.sendMessage(topic, message.value);<br>\n}<br>\n@Get(‘consume/:topic’)<br>\nasync consumeKafkaMessages(@Param(‘topic’) topic: string) {<br>\nawait this.kafkaService.consumeMessages(topic);<br>\n}<br>\n}</p>\n<p>6. Add the controller to the KafkaModule:</p>\n<p>@Module({<br>\ncontrollers: [KafkaController],<br>\nproviders: [KafkaService],<br>\n})<br>\nexport class KafkaModule {}</p>\n<p>7. Start your application.</p>\n<p>These are the basic steps to implement Kafka in NestJS. Of course, there are many other configurations and options to consider, depending on your specific use case.</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/8036b06701d0\">November 5, 2023</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/what-is-kafka-and-how-to-implement-it-in-nestjs-8036b06701d0\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"What is Kafka and How to Implement it in NestJS","description":"","tags":["code","Nestjs","Kafka"],"time":4,"featured":true,"timestamp":"2023-11-05T12:20:32-0300","filename":"2023-11-05_What-is-Kafka-and-How-to-Implement-it-in-NestJS-8036b06701d0"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2023-11-05_What-is-Kafka-and-How-to-Implement-it-in-NestJS-8036b06701d0.md";
				const url = "/blog/2023-11-05_What-is-Kafka-and-How-to-Implement-it-in-NestJS-8036b06701d0";
				function rawContent() {
					return "   \n                                        \n                                                        \n               \n                                 \n       \n              \n                                     \n                                                                                   \n   \n\nWhat is Kafka and How to Implement it in NestJS\n===============================================\n\nApache Kafka is a distributed and scalable data processing platform used for real-time data streaming. It serves as a messaging and event…\n\n* * *\n\n### What is Kafka and How to Implement it in NestJS\n\nApache Kafka is a distributed and scalable data processing platform used for real-time data streaming. It serves as a messaging and event streaming platform, facilitating the secure, reliable, and real-time transfer of data between applications and distributed systems.\n\nKafka operates on a publish-subscribe model, where data producers publish messages to a topic, and consumers subscribe to that topic to receive messages. Kafka can handle large volumes of real-time data and distribute them to multiple consumers in parallel.\n\nCommonly, Kafka finds applications in enterprise solutions, especially those requiring high-speed, high-availability communication between distributed systems. Additionally, Kafka is a flexible platform that can be integrated with various programming languages and tools, boasting an active developer community contributing to its improvement and expansion.\n\nKey features of Kafka include horizontal scalability, fault tolerance, data replication, storage capacity, and integration with data processing tools like Apache Spark, Apache Flink, and Apache Storm.\n\n### Implementing Kafka in NestJS\n\nTo implement Kafka in NestJS, follow these steps:\n\n1\\. Install the `@nestjs/microservices` and `kafkajs` packages using npm:\n\nnpm install @nestjs/microservices kafkajs\n\n2\\. Create a Kafka module in NestJS using the NestJS generator:\n\nnest generate module kafka\n\n3\\. Import the KafkaModule in your main application:\n\nimport { KafkaModule } from './kafka/kafka.module';  \n@Module({  \n  imports: \\[KafkaModule\\],  \n  controllers: \\[AppController\\],  \n  providers: \\[AppService\\],  \n})  \nexport class AppModule {}\n\n4\\. Create a Kafka service in the KafkaModule:\n\nimport { Injectable } from '@nestjs/common';  \nimport { Kafka } from 'kafkajs';  \n@Injectable()  \nexport class KafkaService {  \n  private kafka;  \n  constructor() {  \n    this.kafka = new Kafka({  \n      clientId: 'your-client-id',  \n      brokers: \\['kafka-broker1', 'kafka-broker2'\\],  \n    });  \n  }  \n  async sendMessage(topic: string, message: string) {  \n    const producer = this.kafka.producer();  \n    await producer.connect();  \n    await producer.send({  \n      topic,  \n      messages: \\[{ value: message }\\],  \n    });  \n    await producer.disconnect();  \n  }  \n  async consumeMessages(topic: string) {  \n    const consumer = this.kafka.consumer({ groupId: 'group-id' });  \n    await consumer.connect();  \n    await consumer.subscribe({ topic, fromBeginning: true });  \n    await consumer.run({  \n      eachMessage: async ({ topic, partition, message }) => {  \n        // Handle the received message  \n        console.log({  \n          topic,  \n          partition,  \n          value: message.value.toString(),  \n        });  \n      },  \n    });  \n  }  \n}\n\n5\\. Add a controller in the KafkaModule to handle HTTP requests:\n\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';  \nimport { KafkaService } from './kafka.service';  \n@Controller('kafka')  \nexport class KafkaController {  \n  constructor(private readonly kafkaService: KafkaService) {}  \n  @Post('send/:topic')  \n  async sendKafkaMessage(@Param('topic') topic: string, @Body() message: { value: string }) {  \n    await this.kafkaService.sendMessage(topic, message.value);  \n  }  \n  @Get('consume/:topic')  \n  async consumeKafkaMessages(@Param('topic') topic: string) {  \n    await this.kafkaService.consumeMessages(topic);  \n  }  \n}\n\n6\\. Add the controller to the KafkaModule:\n\n@Module({  \n  controllers: \\[KafkaController\\],  \n  providers: \\[KafkaService\\],  \n})  \nexport class KafkaModule {}\n\n7\\. Start your application.\n\nThese are the basic steps to implement Kafka in NestJS. Of course, there are many other configurations and options to consider, depending on your specific use case.\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [November 5, 2023](https://medium.com/p/8036b06701d0).\n\n[Canonical link](https://medium.com/@devjaime/what-is-kafka-and-how-to-implement-it-in-nestjs-8036b06701d0)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"what-is-kafka-and-how-to-implement-it-in-nestjs","text":"What is Kafka and How to Implement it in NestJS"},{"depth":3,"slug":"what-is-kafka-and-how-to-implement-it-innestjs","text":"What is Kafka and How to Implement it in NestJS"},{"depth":3,"slug":"implementing-kafka-innestjs","text":"Implementing Kafka in NestJS"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
