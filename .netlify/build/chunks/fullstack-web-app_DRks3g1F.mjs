/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$ProjectLayout } from './ProjectLayout_DBW4xXT4.mjs';

const html = () => "<h2 id=\"the-details\">The Details</h2>\n<p>Una aplicación web full-stack completa que demuestra las mejores prácticas en desarrollo moderno. El proyecto incluye frontend interactivo, backend robusto, base de datos escalable y funcionalidades en tiempo real.</p>\n<h2 id=\"core-technologies\">Core Technologies</h2>\n<h3 id=\"frontend\">Frontend</h3>\n<ul>\n<li>⚛️ <strong>React 18</strong> → Biblioteca principal para UI</li>\n<li>🎨 <strong>TypeScript</strong> → Tipado estático para JavaScript</li>\n<li>🎭 <strong>Tailwind CSS</strong> → Framework de estilos utility-first</li>\n<li>🔄 <strong>React Query</strong> → Gestión de estado del servidor</li>\n<li>🛣️ <strong>React Router</strong> → Navegación y enrutado</li>\n</ul>\n<h3 id=\"backend\">Backend</h3>\n<ul>\n<li>🚀 <strong>Node.js</strong> → Runtime de JavaScript</li>\n<li>🌐 <strong>Express.js</strong> → Framework web minimalista</li>\n<li>🔐 <strong>JWT</strong> → Autenticación y autorización</li>\n<li>📡 <strong>Socket.io</strong> → Comunicación en tiempo real</li>\n<li>🗃️ <strong>MongoDB</strong> → Base de datos NoSQL</li>\n</ul>\n<h3 id=\"devops--tools\">DevOps &#x26; Tools</h3>\n<ul>\n<li>🐳 <strong>Docker</strong> → Containerización</li>\n<li>☁️ <strong>AWS</strong> → Despliegue en la nube</li>\n<li>🔧 <strong>GitHub Actions</strong> → CI/CD pipeline</li>\n<li>📊 <strong>Monitoring</strong> → Logs y métricas</li>\n</ul>\n<h2 id=\"the-features\">The Features</h2>\n<ul>\n<li>🔐 <strong>Authentication System</strong> → Registro, login y gestión de usuarios</li>\n<li>💬 <strong>Real-time Chat</strong> → Mensajería instantánea con WebSockets</li>\n<li>📱 <strong>Responsive Design</strong> → Optimizado para todos los dispositivos</li>\n<li>🔍 <strong>Search &#x26; Filtering</strong> → Búsqueda avanzada con filtros</li>\n<li>📊 <strong>Dashboard Analytics</strong> → Visualización de datos en tiempo real</li>\n<li>🔄 <strong>CRUD Operations</strong> → Operaciones completas de datos</li>\n<li>🌐 <strong>API RESTful</strong> → Endpoints bien documentados</li>\n<li>🛡️ <strong>Security</strong> → Validación, sanitización y protección</li>\n</ul>\n<h2 id=\"architecture-overview\">Architecture Overview</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Frontend (React) ←→ API Gateway ←→ Backend (Node.js) ←→ Database (MongoDB)</span></span>\n<span class=\"line\"><span>        ↓                                    ↓</span></span>\n<span class=\"line\"><span>   Static Assets                        WebSocket Server</span></span>\n<span class=\"line\"><span>        ↓                                    ↓</span></span>\n<span class=\"line\"><span>    CDN (AWS)                         Real-time Features</span></span></code></pre>\n<h2 id=\"key-performance-metrics\">Key Performance Metrics</h2>\n<ul>\n<li>⚡ <strong>Load Time</strong>: &#x3C; 2 segundos first contentful paint</li>\n<li>🔄 <strong>Real-time</strong>: &#x3C; 50ms latency en mensajería</li>\n<li>📈 <strong>Scalability</strong>: Soporta 1000+ usuarios concurrentes</li>\n<li>🛡️ <strong>Security</strong>: Implementa OWASP top 10 protections</li>\n<li>📱 <strong>Mobile</strong>: 98+ score en Lighthouse mobile</li>\n</ul>\n<h2 id=\"the-future\">The Future</h2>\n<ul>\n<li>🔍 <strong>Advanced Search</strong> → Implementación de Elasticsearch</li>\n<li>📊 <strong>AI Integration</strong> → Recomendaciones inteligentes</li>\n<li>🌍 <strong>Internationalization</strong> → Soporte multi-idioma</li>\n<li>📱 <strong>Mobile App</strong> → Aplicación nativa con React Native</li>\n<li>🚀 <strong>Microservices</strong> → Migración a arquitectura distribuida</li>\n</ul>\n<h2 id=\"-video-walkthrough\">🎥 Video Walkthrough</h2>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oVpF1bNhj1s\" frameborder=\"0\" allowfullscreen></iframe>\n<h3 id=\"-full-stack-development-en-práctica\">🌟 Full Stack Development en Práctica</h3>\n<p>En este video, muestro el proceso completo de desarrollo, desde la planificación hasta el despliegue:</p>\n<p>✅ <strong>Arquitectura</strong> → Decisiones técnicas y diseño del sistema\n✅ <strong>Desarrollo</strong> → Implementación paso a paso\n✅ <strong>Testing</strong> → Estrategias de pruebas automatizadas\n✅ <strong>Deployment</strong> → Despliegue en producción\n✅ <strong>Monitoring</strong> → Observabilidad y mantenimiento</p>\n<p>💡 <strong>Descubre</strong> las mejores prácticas para crear aplicaciones web modernas y escalables.</p>\n<h2 id=\"code-snippets\">Code Snippets</h2>\n<h3 id=\"authentication-middleware\">Authentication Middleware</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">const</span><span style=\"color:#B392F0\"> authMiddleware</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">req</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Request</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">res</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> Response</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">next</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> NextFunction</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> token</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> req.headers.authorization?.</span><span style=\"color:#B392F0\">split</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">' '</span><span style=\"color:#E1E4E8\">)[</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">token) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> res.</span><span style=\"color:#B392F0\">status</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">401</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">({ error: </span><span style=\"color:#9ECBFF\">'No token provided'</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  try</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    const</span><span style=\"color:#79B8FF\"> decoded</span><span style=\"color:#F97583\"> =</span><span style=\"color:#E1E4E8\"> jwt.</span><span style=\"color:#B392F0\">verify</span><span style=\"color:#E1E4E8\">(token, process.env.</span><span style=\"color:#79B8FF\">JWT_SECRET</span><span style=\"color:#F97583\">!</span><span style=\"color:#E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    req.user </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> decoded;</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">    next</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  } </span><span style=\"color:#F97583\">catch</span><span style=\"color:#E1E4E8\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    res.</span><span style=\"color:#B392F0\">status</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">401</span><span style=\"color:#E1E4E8\">).</span><span style=\"color:#B392F0\">json</span><span style=\"color:#E1E4E8\">({ error: </span><span style=\"color:#9ECBFF\">'Invalid token'</span><span style=\"color:#E1E4E8\"> });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">};</span></span></code></pre>\n<h3 id=\"real-time-socket-handler\">Real-time Socket Handler</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">io.</span><span style=\"color:#B392F0\">on</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'connection'</span><span style=\"color:#E1E4E8\">, (</span><span style=\"color:#FFAB70\">socket</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  socket.</span><span style=\"color:#B392F0\">on</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'join-room'</span><span style=\"color:#E1E4E8\">, (</span><span style=\"color:#FFAB70\">roomId</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    socket.</span><span style=\"color:#B392F0\">join</span><span style=\"color:#E1E4E8\">(roomId);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    socket.</span><span style=\"color:#B392F0\">to</span><span style=\"color:#E1E4E8\">(roomId).</span><span style=\"color:#B392F0\">emit</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'user-connected'</span><span style=\"color:#E1E4E8\">, socket.id);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  socket.</span><span style=\"color:#B392F0\">on</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'send-message'</span><span style=\"color:#E1E4E8\">, (</span><span style=\"color:#FFAB70\">data</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">=></span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    socket.</span><span style=\"color:#B392F0\">to</span><span style=\"color:#E1E4E8\">(data.room).</span><span style=\"color:#B392F0\">emit</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'receive-message'</span><span style=\"color:#E1E4E8\">, data);</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">});</span></span></code></pre>\n<p>#️⃣ <strong>#FullStack #React #NodeJS #TypeScript #WebDevelopment #RealTime #AWS #MongoDB</strong></p>";

				const frontmatter = {"layout":"../../layouts/ProjectLayout.astro","title":"Full Stack Web Application - Modern Development Stack","description":"Complete full-stack web application built with modern technologies, featuring real-time functionality and scalable architecture.","tags":["Full Stack","React","Node.js","TypeScript","MongoDB","WebSocket","AWS"],"githubUrl":"https://github.com/devjaime/fullstack-web-app","timestamp":"2025-01-20T14:30:00.000Z","featured":true,"filename":"fullstack-web-app"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/projects/fullstack-web-app.md";
				const url = "/projects/fullstack-web-app";
				function rawContent() {
					return "   \n                                         \n                                                            \n                                                                                                                                             \n                                                                                     \n                                                        \n                                    \n              \n                           \n   \n\n## The Details\n\nUna aplicación web full-stack completa que demuestra las mejores prácticas en desarrollo moderno. El proyecto incluye frontend interactivo, backend robusto, base de datos escalable y funcionalidades en tiempo real.\n\n## Core Technologies\n\n### Frontend\n* ⚛️ **React 18** → Biblioteca principal para UI\n* 🎨 **TypeScript** → Tipado estático para JavaScript\n* 🎭 **Tailwind CSS** → Framework de estilos utility-first\n* 🔄 **React Query** → Gestión de estado del servidor\n* 🛣️ **React Router** → Navegación y enrutado\n\n### Backend\n* 🚀 **Node.js** → Runtime de JavaScript\n* 🌐 **Express.js** → Framework web minimalista\n* 🔐 **JWT** → Autenticación y autorización\n* 📡 **Socket.io** → Comunicación en tiempo real\n* 🗃️ **MongoDB** → Base de datos NoSQL\n\n### DevOps & Tools\n* 🐳 **Docker** → Containerización\n* ☁️ **AWS** → Despliegue en la nube\n* 🔧 **GitHub Actions** → CI/CD pipeline\n* 📊 **Monitoring** → Logs y métricas\n\n## The Features\n\n* 🔐 **Authentication System** → Registro, login y gestión de usuarios\n* 💬 **Real-time Chat** → Mensajería instantánea con WebSockets\n* 📱 **Responsive Design** → Optimizado para todos los dispositivos\n* 🔍 **Search & Filtering** → Búsqueda avanzada con filtros\n* 📊 **Dashboard Analytics** → Visualización de datos en tiempo real\n* 🔄 **CRUD Operations** → Operaciones completas de datos\n* 🌐 **API RESTful** → Endpoints bien documentados\n* 🛡️ **Security** → Validación, sanitización y protección\n\n## Architecture Overview\n\n```\nFrontend (React) ←→ API Gateway ←→ Backend (Node.js) ←→ Database (MongoDB)\n        ↓                                    ↓\n   Static Assets                        WebSocket Server\n        ↓                                    ↓\n    CDN (AWS)                         Real-time Features\n```\n\n## Key Performance Metrics\n\n* ⚡ **Load Time**: < 2 segundos first contentful paint\n* 🔄 **Real-time**: < 50ms latency en mensajería\n* 📈 **Scalability**: Soporta 1000+ usuarios concurrentes\n* 🛡️ **Security**: Implementa OWASP top 10 protections\n* 📱 **Mobile**: 98+ score en Lighthouse mobile\n\n## The Future\n\n* 🔍 **Advanced Search** → Implementación de Elasticsearch\n* 📊 **AI Integration** → Recomendaciones inteligentes\n* 🌍 **Internationalization** → Soporte multi-idioma\n* 📱 **Mobile App** → Aplicación nativa con React Native\n* 🚀 **Microservices** → Migración a arquitectura distribuida\n\n## 🎥 Video Walkthrough\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oVpF1bNhj1s\" frameborder=\"0\" allowfullscreen></iframe>\n\n### 🌟 Full Stack Development en Práctica\n\nEn este video, muestro el proceso completo de desarrollo, desde la planificación hasta el despliegue:\n\n✅ **Arquitectura** → Decisiones técnicas y diseño del sistema\n✅ **Desarrollo** → Implementación paso a paso\n✅ **Testing** → Estrategias de pruebas automatizadas\n✅ **Deployment** → Despliegue en producción\n✅ **Monitoring** → Observabilidad y mantenimiento\n\n💡 **Descubre** las mejores prácticas para crear aplicaciones web modernas y escalables.\n\n## Code Snippets\n\n### Authentication Middleware\n```typescript\nconst authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n  const token = req.headers.authorization?.split(' ')[1];\n  if (!token) {\n    return res.status(401).json({ error: 'No token provided' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: 'Invalid token' });\n  }\n};\n```\n\n### Real-time Socket Handler\n```typescript\nio.on('connection', (socket) => {\n  socket.on('join-room', (roomId) => {\n    socket.join(roomId);\n    socket.to(roomId).emit('user-connected', socket.id);\n  });\n  \n  socket.on('send-message', (data) => {\n    socket.to(data.room).emit('receive-message', data);\n  });\n});\n```\n\n#️⃣ **#FullStack #React #NodeJS #TypeScript #WebDevelopment #RealTime #AWS #MongoDB**\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"the-details","text":"The Details"},{"depth":2,"slug":"core-technologies","text":"Core Technologies"},{"depth":3,"slug":"frontend","text":"Frontend"},{"depth":3,"slug":"backend","text":"Backend"},{"depth":3,"slug":"devops--tools","text":"DevOps & Tools"},{"depth":2,"slug":"the-features","text":"The Features"},{"depth":2,"slug":"architecture-overview","text":"Architecture Overview"},{"depth":2,"slug":"key-performance-metrics","text":"Key Performance Metrics"},{"depth":2,"slug":"the-future","text":"The Future"},{"depth":2,"slug":"-video-walkthrough","text":"🎥 Video Walkthrough"},{"depth":3,"slug":"-full-stack-development-en-práctica","text":"🌟 Full Stack Development en Práctica"},{"depth":2,"slug":"code-snippets","text":"Code Snippets"},{"depth":3,"slug":"authentication-middleware","text":"Authentication Middleware"},{"depth":3,"slug":"real-time-socket-handler","text":"Real-time Socket Handler"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$ProjectLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
