/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"bff-con-go-parte-2-tests-concurrencia-y-resiliencia-en-apis-️\">BFF con Go (Parte 2): Tests, Concurrencia y Resiliencia en APIs 🧪⚙️</h1>\n<p>En la <a href=\"../2025-03-28_BFF-Golang-OpenAPI\">primera parte</a>, construimos un BFF minimalista en Go usando OpenAPI, con estructura limpia y endpoints claros. En esta segunda entrega, vamos un paso más allá:</p>\n<ul>\n<li>✅ Añadiremos tests</li>\n<li>🔁 Implementaremos concurrencia con goroutines y channels</li>\n<li>🧱 Incorporaremos resiliencia frente a errores de servicios remotos</li>\n</ul>\n<p>Todo manteniendo buenas prácticas y un diseño que pueda escalar con tu arquitectura hexagonal o basada en dependencias.</p>\n<hr>\n<h2 id=\"-1-agregando-tests-con-httptest\">🧪 1. Agregando Tests con <code>httptest</code></h2>\n<p>Creamos un test para nuestro handler principal:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> TestGetUserById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">t</span><span style=\"color:#F97583\"> *</span><span style=\"color:#B392F0\">testing</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">T</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  r </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> chi.</span><span style=\"color:#B392F0\">NewRouter</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  h </span><span style=\"color:#F97583\">:=</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#B392F0\">handlers</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">UserHandler</span><span style=\"color:#E1E4E8\">{}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  api.</span><span style=\"color:#B392F0\">RegisterHandlers</span><span style=\"color:#E1E4E8\">(r, h)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  req </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> httptest.</span><span style=\"color:#B392F0\">NewRequest</span><span style=\"color:#E1E4E8\">(http.MethodGet, </span><span style=\"color:#9ECBFF\">\"/users/123\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">nil</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  w </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> httptest.</span><span style=\"color:#B392F0\">NewRecorder</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  r.</span><span style=\"color:#B392F0\">ServeHTTP</span><span style=\"color:#E1E4E8\">(w, req)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> w.Code </span><span style=\"color:#F97583\">!=</span><span style=\"color:#E1E4E8\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    t.</span><span style=\"color:#B392F0\">Errorf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"esperado 200, obtenido </span><span style=\"color:#79B8FF\">%d</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">, w.Code)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  var</span><span style=\"color:#E1E4E8\"> user </span><span style=\"color:#B392F0\">api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  json.</span><span style=\"color:#B392F0\">NewDecoder</span><span style=\"color:#E1E4E8\">(w.Body).</span><span style=\"color:#B392F0\">Decode</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">user)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  if</span><span style=\"color:#E1E4E8\"> user.Id </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"123\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    t.</span><span style=\"color:#B392F0\">Errorf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"ID esperado '123', obtenido </span><span style=\"color:#79B8FF\">%s</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">, user.Id)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<hr>\n<h2 id=\"-2-concurrencia-con-goroutines-y-channels\">🔁 2. Concurrencia con Goroutines y Channels</h2>\n<p>Supongamos que el BFF necesita llamar a dos servicios remotos al mismo tiempo:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> RemoteUser</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  Profile </span><span style=\"color:#B392F0\">api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  Score   </span><span style=\"color:#F97583\">int</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> FetchCombinedData</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">ctx</span><span style=\"color:#B392F0\"> context</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Context</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">id</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">) (</span><span style=\"color:#F97583\">*</span><span style=\"color:#B392F0\">RemoteUser</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">error</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  chUser </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> make</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">chan</span><span style=\"color:#B392F0\"> api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  chScore </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> make</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">chan</span><span style=\"color:#F97583\"> int</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  errCh </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> make</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">chan</span><span style=\"color:#F97583\"> error</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  go</span><span style=\"color:#F97583\"> func</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    user, err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> fetchUserService</span><span style=\"color:#E1E4E8\">(id)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> err </span><span style=\"color:#F97583\">!=</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      errCh </span><span style=\"color:#F97583\">&#x3C;-</span><span style=\"color:#E1E4E8\"> err</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    chUser </span><span style=\"color:#F97583\">&#x3C;-</span><span style=\"color:#E1E4E8\"> user</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  go</span><span style=\"color:#F97583\"> func</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    score, err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> fetchScoreService</span><span style=\"color:#E1E4E8\">(id)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> err </span><span style=\"color:#F97583\">!=</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      errCh </span><span style=\"color:#F97583\">&#x3C;-</span><span style=\"color:#E1E4E8\"> err</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    chScore </span><span style=\"color:#F97583\">&#x3C;-</span><span style=\"color:#E1E4E8\"> score</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  var</span><span style=\"color:#E1E4E8\"> user </span><span style=\"color:#B392F0\">api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  var</span><span style=\"color:#E1E4E8\"> score </span><span style=\"color:#F97583\">int</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  for</span><span style=\"color:#E1E4E8\"> i </span><span style=\"color:#F97583\">:=</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">; i </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 2</span><span style=\"color:#E1E4E8\">; i</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    select</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    case</span><span style=\"color:#E1E4E8\"> u </span><span style=\"color:#F97583\">:=</span><span style=\"color:#F97583\"> &#x3C;-</span><span style=\"color:#E1E4E8\">chUser:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      user </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> u</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    case</span><span style=\"color:#E1E4E8\"> s </span><span style=\"color:#F97583\">:=</span><span style=\"color:#F97583\"> &#x3C;-</span><span style=\"color:#E1E4E8\">chScore:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      score </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> s</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    case</span><span style=\"color:#E1E4E8\"> err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#F97583\"> &#x3C;-</span><span style=\"color:#E1E4E8\">errCh:</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#E1E4E8\">, err</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#B392F0\">RemoteUser</span><span style=\"color:#E1E4E8\">{Profile: user, Score: score}, </span><span style=\"color:#79B8FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<hr>\n<h2 id=\"-3-manejo-de-resiliencia-timeouts--retry\">🧱 3. Manejo de Resiliencia (Timeouts + Retry)</h2>\n<p>Usamos contexto y un patrón básico de retry con backoff:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> fetchUserService</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">id</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">) (</span><span style=\"color:#B392F0\">api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#F97583\">error</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  var</span><span style=\"color:#E1E4E8\"> user </span><span style=\"color:#B392F0\">api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  for</span><span style=\"color:#E1E4E8\"> i </span><span style=\"color:#F97583\">:=</span><span style=\"color:#79B8FF\"> 0</span><span style=\"color:#E1E4E8\">; i </span><span style=\"color:#F97583\">&#x3C;</span><span style=\"color:#79B8FF\"> 3</span><span style=\"color:#E1E4E8\">; i</span><span style=\"color:#F97583\">++</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    ctx, cancel </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> context.</span><span style=\"color:#B392F0\">WithTimeout</span><span style=\"color:#E1E4E8\">(context.</span><span style=\"color:#B392F0\">Background</span><span style=\"color:#E1E4E8\">(), </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#F97583\">*</span><span style=\"color:#E1E4E8\">time.Second)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    defer</span><span style=\"color:#B392F0\"> cancel</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    req, _ </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> http.</span><span style=\"color:#B392F0\">NewRequestWithContext</span><span style=\"color:#E1E4E8\">(ctx, </span><span style=\"color:#9ECBFF\">\"GET\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"http://user-service/users/\"</span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\">id, </span><span style=\"color:#79B8FF\">nil</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    res, err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> http.DefaultClient.</span><span style=\"color:#B392F0\">Do</span><span style=\"color:#E1E4E8\">(req)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> err </span><span style=\"color:#F97583\">==</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#F97583\"> &#x26;&#x26;</span><span style=\"color:#E1E4E8\"> res.StatusCode </span><span style=\"color:#F97583\">==</span><span style=\"color:#E1E4E8\"> http.StatusOK {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      json.</span><span style=\"color:#B392F0\">NewDecoder</span><span style=\"color:#E1E4E8\">(res.Body).</span><span style=\"color:#B392F0\">Decode</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#E1E4E8\">user)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span><span style=\"color:#E1E4E8\"> user, </span><span style=\"color:#79B8FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    time.</span><span style=\"color:#B392F0\">Sleep</span><span style=\"color:#E1E4E8\">(time.</span><span style=\"color:#B392F0\">Duration</span><span style=\"color:#E1E4E8\">(i</span><span style=\"color:#F97583\">+</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">*</span><span style=\"color:#79B8FF\"> 500</span><span style=\"color:#F97583\"> *</span><span style=\"color:#E1E4E8\"> time.Millisecond)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> user, fmt.</span><span style=\"color:#B392F0\">Errorf</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"falló la conexión con user-service\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<hr>\n<h2 id=\"-y-la-arquitectura-hexagonal\">📦 ¿Y la arquitectura hexagonal?</h2>\n<p>Estas prácticas encajan perfecto si separas:</p>\n<ul>\n<li><strong>handlers/</strong> ➝ Capa de entrada (HTTP)</li>\n<li><strong>services/</strong> ➝ Capa de lógica de negocio</li>\n<li><strong>clients/</strong> ➝ Acceso a servicios remotos</li>\n</ul>\n<p>Puedes usar <code>wire</code> o <code>fx</code> para inyección de dependencias. Esto permite testear cada capa por separado sin acoplamientos fuertes.</p>\n<hr>\n<h2 id=\"-próximos-pasos\">🧩 Próximos pasos</h2>\n<ul>\n<li>📄 Agregar Swagger UI embebido</li>\n<li>🔐 Incluir autenticación JWT</li>\n<li>📦 Dockerizar el proyecto para despliegue en la nube</li>\n</ul>\n<hr>\n<p>¿Te gustó esta segunda parte? Comenta o escribeme para incluir una tercera parte. 🚀</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"BFF con Go (Parte 2): Tests, Concurrencia y Resiliencia en APIs","description":"Extiende tu Backend For Frontend con pruebas, manejo de errores y uso de goroutines para llamadas concurrentes.","tags":["golang","openapi","bff","microservicios","testing","resiliencia"],"time":10,"featured":true,"timestamp":"2025-03-29T17:00:00-0300","filename":"2025-03-29_BFF-Golang-Parte2"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-03-29_BFF-Golang-Parte2.md";
				const url = "/blog/2025-03-29_BFF-Golang-Parte2";
				function rawContent() {
					return "   \n                                        \n                                                                        \n                                                                                                                              \n                                                                              \n        \n              \n                                     \n                                        \n   \n\n# BFF con Go (Parte 2): Tests, Concurrencia y Resiliencia en APIs 🧪⚙️\n\nEn la [primera parte](../2025-03-28_BFF-Golang-OpenAPI), construimos un BFF minimalista en Go usando OpenAPI, con estructura limpia y endpoints claros. En esta segunda entrega, vamos un paso más allá:\n\n- ✅ Añadiremos tests\n- 🔁 Implementaremos concurrencia con goroutines y channels\n- 🧱 Incorporaremos resiliencia frente a errores de servicios remotos\n\nTodo manteniendo buenas prácticas y un diseño que pueda escalar con tu arquitectura hexagonal o basada en dependencias.\n\n---\n\n## 🧪 1. Agregando Tests con `httptest`\n\nCreamos un test para nuestro handler principal:\n\n```go\nfunc TestGetUserById(t *testing.T) {\n  r := chi.NewRouter()\n  h := &handlers.UserHandler{}\n  api.RegisterHandlers(r, h)\n\n  req := httptest.NewRequest(http.MethodGet, \"/users/123\", nil)\n  w := httptest.NewRecorder()\n\n  r.ServeHTTP(w, req)\n\n  if w.Code != http.StatusOK {\n    t.Errorf(\"esperado 200, obtenido %d\", w.Code)\n  }\n\n  var user api.User\n  json.NewDecoder(w.Body).Decode(&user)\n  if user.Id != \"123\" {\n    t.Errorf(\"ID esperado '123', obtenido %s\", user.Id)\n  }\n}\n```\n\n---\n\n## 🔁 2. Concurrencia con Goroutines y Channels\n\nSupongamos que el BFF necesita llamar a dos servicios remotos al mismo tiempo:\n\n```go\ntype RemoteUser struct {\n  Profile api.User\n  Score   int\n}\n\nfunc FetchCombinedData(ctx context.Context, id string) (*RemoteUser, error) {\n  chUser := make(chan api.User)\n  chScore := make(chan int)\n  errCh := make(chan error, 2)\n\n  go func() {\n    user, err := fetchUserService(id)\n    if err != nil {\n      errCh <- err\n      return\n    }\n    chUser <- user\n  }()\n\n  go func() {\n    score, err := fetchScoreService(id)\n    if err != nil {\n      errCh <- err\n      return\n    }\n    chScore <- score\n  }()\n\n  var user api.User\n  var score int\n\n  for i := 0; i < 2; i++ {\n    select {\n    case u := <-chUser:\n      user = u\n    case s := <-chScore:\n      score = s\n    case err := <-errCh:\n      return nil, err\n    }\n  }\n\n  return &RemoteUser{Profile: user, Score: score}, nil\n}\n```\n\n---\n\n## 🧱 3. Manejo de Resiliencia (Timeouts + Retry)\n\nUsamos contexto y un patrón básico de retry con backoff:\n\n```go\nfunc fetchUserService(id string) (api.User, error) {\n  var user api.User\n  for i := 0; i < 3; i++ {\n    ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n    defer cancel()\n\n    req, _ := http.NewRequestWithContext(ctx, \"GET\", \"http://user-service/users/\"+id, nil)\n    res, err := http.DefaultClient.Do(req)\n    if err == nil && res.StatusCode == http.StatusOK {\n      json.NewDecoder(res.Body).Decode(&user)\n      return user, nil\n    }\n\n    time.Sleep(time.Duration(i+1) * 500 * time.Millisecond)\n  }\n  return user, fmt.Errorf(\"falló la conexión con user-service\")\n}\n```\n\n---\n\n## 📦 ¿Y la arquitectura hexagonal?\n\nEstas prácticas encajan perfecto si separas:\n\n- **handlers/** ➝ Capa de entrada (HTTP)\n- **services/** ➝ Capa de lógica de negocio\n- **clients/** ➝ Acceso a servicios remotos\n\nPuedes usar `wire` o `fx` para inyección de dependencias. Esto permite testear cada capa por separado sin acoplamientos fuertes.\n\n---\n\n## 🧩 Próximos pasos\n\n- 📄 Agregar Swagger UI embebido\n- 🔐 Incluir autenticación JWT\n- 📦 Dockerizar el proyecto para despliegue en la nube\n\n---\n\n¿Te gustó esta segunda parte? Comenta o escribeme para incluir una tercera parte. 🚀\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"bff-con-go-parte-2-tests-concurrencia-y-resiliencia-en-apis-️","text":"BFF con Go (Parte 2): Tests, Concurrencia y Resiliencia en APIs 🧪⚙️"},{"depth":2,"slug":"-1-agregando-tests-con-httptest","text":"🧪 1. Agregando Tests con httptest"},{"depth":2,"slug":"-2-concurrencia-con-goroutines-y-channels","text":"🔁 2. Concurrencia con Goroutines y Channels"},{"depth":2,"slug":"-3-manejo-de-resiliencia-timeouts--retry","text":"🧱 3. Manejo de Resiliencia (Timeouts + Retry)"},{"depth":2,"slug":"-y-la-arquitectura-hexagonal","text":"📦 ¿Y la arquitectura hexagonal?"},{"depth":2,"slug":"-próximos-pasos","text":"🧩 Próximos pasos"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
