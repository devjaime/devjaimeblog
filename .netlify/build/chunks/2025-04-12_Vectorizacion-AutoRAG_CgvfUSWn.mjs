/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"-vectorizaci√≥n-e-indexaci√≥n-inteligente-con-autorag-pdf-excel-y-csv\">üß† Vectorizaci√≥n e Indexaci√≥n Inteligente con AutoRAG: PDF, Excel y CSV</h1>\n<p>En la era de la inteligencia artificial generativa, los sistemas RAG (Retrieval-Augmented Generation) est√°n revolucionando c√≥mo accedemos a la informaci√≥n contenida en documentos. En esta gu√≠a aprender√°s paso a paso c√≥mo implementar AutoRAG con LangChain y Python para vectorizar e indexar documentos como PDF, Excel y CSV. Adem√°s, exploraremos c√≥mo integrarlo con bases de datos como <strong>pgvector</strong> y <strong>Neo4j AuraDB (Astra)</strong>, as√≠ como herramientas como <strong>Langflow</strong>.</p>\n<hr>\n<h2 id=\"-qu√©-es-autorag-y-por-qu√©-es-importante\">üìò ¬øQu√© es AutoRAG y por qu√© es importante?</h2>\n<p>AutoRAG automatiza el proceso de:</p>\n<ul>\n<li>Carga de documentos</li>\n<li>Extracci√≥n de texto</li>\n<li>Divisiones inteligentes (chunking)</li>\n<li>Vectorizaci√≥n con embeddings</li>\n<li>Indexaci√≥n en una base de datos vectorial</li>\n</ul>\n<p>Esto permite a los modelos LLM acceder r√°pidamente a informaci√≥n espec√≠fica sin necesidad de entrenar desde cero.</p>\n<hr>\n<h2 id=\"Ô∏è-herramientas-que-usaremos\">üõ†Ô∏è Herramientas que usaremos</h2>\n<ul>\n<li><strong>Python 3.10+</strong></li>\n<li><strong>LangChain</strong></li>\n<li><strong>pgvector</strong> (PostgreSQL + extensi√≥n)</li>\n<li><strong>Neo4j Aura (Astra DB opcional)</strong></li>\n<li><strong>Langflow</strong></li>\n<li><strong>Pandas, PyPDF2, openpyxl, csv</strong></li>\n<li><strong>Docker (opcional para entornos reproducibles)</strong></li>\n</ul>\n<hr>\n<h2 id=\"-1-carga-de-documentos-pdf-excel-y-csv\">üì• 1. Carga de documentos PDF, Excel y CSV</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.document_loaders </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> PyPDFLoader, CSVLoader, UnstructuredExcelLoader</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pdf_loader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> PyPDFLoader(</span><span style=\"color:#9ECBFF\">\"ejemplo.pdf\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">csv_loader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> CSVLoader(</span><span style=\"color:#FFAB70\">file_path</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"ventas.csv\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">excel_loader </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> UnstructuredExcelLoader(</span><span style=\"color:#9ECBFF\">\"inventario.xlsx\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">pdf_docs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> pdf_loader.load()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">csv_docs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> csv_loader.load()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">excel_docs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> excel_loader.load()</span></span></code></pre>\n<hr>\n<h2 id=\"-2-chunking-y-limpieza-de-texto\">üß© 2. Chunking y limpieza de texto</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.text_splitter </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> RecursiveCharacterTextSplitter</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">docs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> pdf_docs </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> csv_docs </span><span style=\"color:#F97583\">+</span><span style=\"color:#E1E4E8\"> excel_docs</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">splitter </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> RecursiveCharacterTextSplitter(</span><span style=\"color:#FFAB70\">chunk_size</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">500</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">chunk_overlap</span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\">50</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">splitted_docs </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> splitter.split_documents(docs)</span></span></code></pre>\n<hr>\n<h2 id=\"-3-vectorizaci√≥n-con-embeddings\">üß† 3. Vectorizaci√≥n con embeddings</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.embeddings </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> OpenAIEmbeddings</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.vectorstores </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> PGVector</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">embedding_model </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> OpenAIEmbeddings()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vectorstore </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> PGVector(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    connection_string</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"postgresql+psycopg2://user:pass@host/db\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    embedding_function</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">embedding_model.embed_query,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    collection_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"documentos\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">vectorstore.add_documents(splitted_docs)</span></span></code></pre>\n<hr>\n<h2 id=\"Ô∏è-4-alternativa-vectorizaci√≥n-con-neo4j-aura\">üï∏Ô∏è 4. Alternativa: Vectorizaci√≥n con Neo4j Aura</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.vectorstores </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> Neo4jVector</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">neo4j_store </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> Neo4jVector(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    url</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"neo4j+s://...\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    username</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"neo4j\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    password</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"...\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    embedding_function</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">embedding_model.embed_query,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    database</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"neo4j\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    index_name</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"docs\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">neo4j_store.add_documents(splitted_docs)</span></span></code></pre>\n<hr>\n<h2 id=\"-5-consulta-tipo-rag\">üîÑ 5. Consulta tipo RAG</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.chains </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> RetrievalQA</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> langchain.chat_models </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> ChatOpenAI</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">retriever </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> vectorstore.as_retriever()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">qa_chain </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> RetrievalQA.from_chain_type(</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    llm</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">ChatOpenAI(),</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">    retriever</span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\">retriever</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">respuesta </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> qa_chain.run(</span><span style=\"color:#9ECBFF\">\"¬øCu√°les fueron las ventas en abril?\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">print</span><span style=\"color:#E1E4E8\">(respuesta)</span></span></code></pre>\n<hr>\n<h2 id=\"-6-flujos-en-la-nube-y-langflow\">üåê 6. Flujos en la nube y Langflow</h2>\n<p>Langflow permite orquestar todo esto visualmente. Puedes subir tus documentos, configurar embeddings y a√±adir nodos para vectorstores, LLMs y respuestas.</p>\n<p>üîó Revisa: <a href=\"https://github.com/logspace-ai/langflow\">https://github.com/logspace-ai/langflow</a></p>\n<p>Tambi√©n puedes desplegar tu soluci√≥n en:</p>\n<ul>\n<li><strong>GCP</strong> con Cloud Run + Cloud SQL (PostgreSQL)</li>\n<li><strong>AWS</strong> con Lambda + RDS + Bedrock</li>\n<li><strong>Railway / Render</strong> si buscas velocidad y simplicidad</li>\n</ul>\n<hr>\n<h2 id=\"-beneficios-de-vectorizar-documentos\">üìä Beneficios de vectorizar documentos</h2>\n<ul>\n<li>üîç B√∫squeda sem√°ntica m√°s precisa</li>\n<li>üìÅ Indexaci√≥n de grandes vol√∫menes de informaci√≥n</li>\n<li>ü§ñ Mejor desempe√±o en agentes con LLMs</li>\n<li>üîê Puedes filtrar, clasificar, y personalizar resultados</li>\n</ul>\n<hr>\n<h2 id=\"-conclusi√≥n\">üöÄ Conclusi√≥n</h2>\n<p>Vectorizar e indexar documentos es una t√©cnica clave para escalar soluciones de IA con acceso a informaci√≥n especializada. Con herramientas como LangChain, pgvector, Neo4j y Langflow, puedes montar soluciones robustas, eficientes y productivas.</p>\n<p>¬øTe gustar√≠a que subamos una demo en YouTube con este ejemplo paso a paso? ¬°D√©janos un comentario en <a href=\"https://codeia.cl\">codeIA.cl</a> o escr√≠benos en nuestras redes sociales!</p>\n<hr>\n<p>¬øQuieres probar esto en tu empresa? Agenda una demo o escribe a <a href=\"mailto:contacto@codeia.cl\">contacto@codeia.cl</a> üöÄ</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Vectorizaci√≥n e Indexaci√≥n Inteligente con AutoRAG: PDF, Excel y CSV con LangChain, pgvector y m√°s","description":"Aprende paso a paso c√≥mo vectorizar e indexar documentos como PDF, Excel y CSV utilizando LangChain, pgvector, Neo4j, Langflow y herramientas cloud. Incluye flujos, ejemplos y mejores pr√°cticas.","tags":["AutoRAG","RAG","LangChain","pgvector","Neo4j","Langflow","Documentos","Vectorizaci√≥n","Python","Indexaci√≥n"],"time":10,"timestamp":"2025-04-12T10:00:00-0300","featured":true,"filename":"2025-04-12_Vectorizacion-AutoRAG"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-04-12_Vectorizacion-AutoRAG.md";
				const url = "/blog/2025-04-12_Vectorizacion-AutoRAG";
				function rawContent() {
					return "   \n                                        \n                                                                                                           \n                                                                                                                                                                                                                 \n                                                                                                                             \n        \n                                     \n              \n                                            \n   \n\n# üß† Vectorizaci√≥n e Indexaci√≥n Inteligente con AutoRAG: PDF, Excel y CSV\n\nEn la era de la inteligencia artificial generativa, los sistemas RAG (Retrieval-Augmented Generation) est√°n revolucionando c√≥mo accedemos a la informaci√≥n contenida en documentos. En esta gu√≠a aprender√°s paso a paso c√≥mo implementar AutoRAG con LangChain y Python para vectorizar e indexar documentos como PDF, Excel y CSV. Adem√°s, exploraremos c√≥mo integrarlo con bases de datos como **pgvector** y **Neo4j AuraDB (Astra)**, as√≠ como herramientas como **Langflow**.\n\n---\n\n## üìò ¬øQu√© es AutoRAG y por qu√© es importante?\nAutoRAG automatiza el proceso de:\n- Carga de documentos\n- Extracci√≥n de texto\n- Divisiones inteligentes (chunking)\n- Vectorizaci√≥n con embeddings\n- Indexaci√≥n en una base de datos vectorial\n\nEsto permite a los modelos LLM acceder r√°pidamente a informaci√≥n espec√≠fica sin necesidad de entrenar desde cero.\n\n---\n\n## üõ†Ô∏è Herramientas que usaremos\n\n- **Python 3.10+**\n- **LangChain**\n- **pgvector** (PostgreSQL + extensi√≥n)\n- **Neo4j Aura (Astra DB opcional)**\n- **Langflow**\n- **Pandas, PyPDF2, openpyxl, csv**\n- **Docker (opcional para entornos reproducibles)**\n\n---\n\n## üì• 1. Carga de documentos PDF, Excel y CSV\n\n```python\nfrom langchain.document_loaders import PyPDFLoader, CSVLoader, UnstructuredExcelLoader\n\npdf_loader = PyPDFLoader(\"ejemplo.pdf\")\ncsv_loader = CSVLoader(file_path=\"ventas.csv\")\nexcel_loader = UnstructuredExcelLoader(\"inventario.xlsx\")\n\npdf_docs = pdf_loader.load()\ncsv_docs = csv_loader.load()\nexcel_docs = excel_loader.load()\n```\n\n---\n\n## üß© 2. Chunking y limpieza de texto\n\n```python\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\ndocs = pdf_docs + csv_docs + excel_docs\nsplitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)\nsplitted_docs = splitter.split_documents(docs)\n```\n\n---\n\n## üß† 3. Vectorizaci√≥n con embeddings\n\n```python\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import PGVector\n\nembedding_model = OpenAIEmbeddings()\n\nvectorstore = PGVector(\n    connection_string=\"postgresql+psycopg2://user:pass@host/db\",\n    embedding_function=embedding_model.embed_query,\n    collection_name=\"documentos\"\n)\n\nvectorstore.add_documents(splitted_docs)\n```\n\n---\n\n## üï∏Ô∏è 4. Alternativa: Vectorizaci√≥n con Neo4j Aura\n\n```python\nfrom langchain.vectorstores import Neo4jVector\n\nneo4j_store = Neo4jVector(\n    url=\"neo4j+s://...\",\n    username=\"neo4j\",\n    password=\"...\",\n    embedding_function=embedding_model.embed_query,\n    database=\"neo4j\",\n    index_name=\"docs\"\n)\n\nneo4j_store.add_documents(splitted_docs)\n```\n\n---\n\n## üîÑ 5. Consulta tipo RAG\n\n```python\nfrom langchain.chains import RetrievalQA\nfrom langchain.chat_models import ChatOpenAI\n\nretriever = vectorstore.as_retriever()\nqa_chain = RetrievalQA.from_chain_type(\n    llm=ChatOpenAI(),\n    retriever=retriever\n)\n\nrespuesta = qa_chain.run(\"¬øCu√°les fueron las ventas en abril?\")\nprint(respuesta)\n```\n\n---\n\n## üåê 6. Flujos en la nube y Langflow\n\nLangflow permite orquestar todo esto visualmente. Puedes subir tus documentos, configurar embeddings y a√±adir nodos para vectorstores, LLMs y respuestas.\n\nüîó Revisa: [https://github.com/logspace-ai/langflow](https://github.com/logspace-ai/langflow)\n\nTambi√©n puedes desplegar tu soluci√≥n en:\n- **GCP** con Cloud Run + Cloud SQL (PostgreSQL)\n- **AWS** con Lambda + RDS + Bedrock\n- **Railway / Render** si buscas velocidad y simplicidad\n\n---\n\n## üìä Beneficios de vectorizar documentos\n\n- üîç B√∫squeda sem√°ntica m√°s precisa\n- üìÅ Indexaci√≥n de grandes vol√∫menes de informaci√≥n\n- ü§ñ Mejor desempe√±o en agentes con LLMs\n- üîê Puedes filtrar, clasificar, y personalizar resultados\n\n---\n\n## üöÄ Conclusi√≥n\n\nVectorizar e indexar documentos es una t√©cnica clave para escalar soluciones de IA con acceso a informaci√≥n especializada. Con herramientas como LangChain, pgvector, Neo4j y Langflow, puedes montar soluciones robustas, eficientes y productivas.\n\n¬øTe gustar√≠a que subamos una demo en YouTube con este ejemplo paso a paso? ¬°D√©janos un comentario en [codeIA.cl](https://codeia.cl) o escr√≠benos en nuestras redes sociales!\n\n---\n\n¬øQuieres probar esto en tu empresa? Agenda una demo o escribe a contacto@codeia.cl üöÄ\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"-vectorizaci√≥n-e-indexaci√≥n-inteligente-con-autorag-pdf-excel-y-csv","text":"üß† Vectorizaci√≥n e Indexaci√≥n Inteligente con AutoRAG: PDF, Excel y CSV"},{"depth":2,"slug":"-qu√©-es-autorag-y-por-qu√©-es-importante","text":"üìò ¬øQu√© es AutoRAG y por qu√© es importante?"},{"depth":2,"slug":"Ô∏è-herramientas-que-usaremos","text":"üõ†Ô∏è Herramientas que usaremos"},{"depth":2,"slug":"-1-carga-de-documentos-pdf-excel-y-csv","text":"üì• 1. Carga de documentos PDF, Excel y CSV"},{"depth":2,"slug":"-2-chunking-y-limpieza-de-texto","text":"üß© 2. Chunking y limpieza de texto"},{"depth":2,"slug":"-3-vectorizaci√≥n-con-embeddings","text":"üß† 3. Vectorizaci√≥n con embeddings"},{"depth":2,"slug":"Ô∏è-4-alternativa-vectorizaci√≥n-con-neo4j-aura","text":"üï∏Ô∏è 4. Alternativa: Vectorizaci√≥n con Neo4j Aura"},{"depth":2,"slug":"-5-consulta-tipo-rag","text":"üîÑ 5. Consulta tipo RAG"},{"depth":2,"slug":"-6-flujos-en-la-nube-y-langflow","text":"üåê 6. Flujos en la nube y Langflow"},{"depth":2,"slug":"-beneficios-de-vectorizar-documentos","text":"üìä Beneficios de vectorizar documentos"},{"depth":2,"slug":"-conclusi√≥n","text":"üöÄ Conclusi√≥n"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
