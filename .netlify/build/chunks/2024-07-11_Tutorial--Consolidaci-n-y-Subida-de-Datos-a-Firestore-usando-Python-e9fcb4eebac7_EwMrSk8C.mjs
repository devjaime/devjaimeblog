/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"tutorial-consolidación-y-subida-de-datos-a-firestore-usando-python\">Tutorial: Consolidación y Subida de Datos a Firestore usando Python</h1>\n<p>Introducción</p>\n<hr>\n<h3 id=\"tutorial-consolidación-y-subida-de-datos-a-firestore-usandopython\">Tutorial: Consolidación y Subida de Datos a Firestore usando Python</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*lLKGzMnDZlwKlG_E\" alt=\"\"></p>\n<h3 id=\"introducción\">Introducción</h3>\n<p>En este tutorial, aprenderemos cómo consolidar múltiples tablas en archivos JSON en un único archivo, y luego subir esos datos a Firestore usando un script en Python. Esto es útil para integrar datos dispersos en una base de datos centralizada y realizar operaciones de datos más eficientes.</p>\n<h3 id=\"requisitos-previos\">Requisitos Previos</h3>\n<p>Antes de comenzar, asegúrate de tener lo siguiente instalado y configurado:</p>\n<ol>\n<li><strong>Python 3.x</strong></li>\n<li><strong>Google Cloud SDK</strong> (incluyendo <code>gcloud</code> y <code>gsutil</code>)</li>\n<li><strong>Credenciales de una cuenta de servicio de Google Cloud</strong></li>\n</ol>\n<h3 id=\"paso-1-configurar-el-entorno-virtual-depython\">Paso 1: Configurar el Entorno Virtual de Python</h3>\n<p>Primero, vamos a crear y activar un entorno virtual para gestionar nuestras dependencias de Python.</p>\n<p>python3 -m venv myenv<br>\nsource myenv/bin/activate</p>\n<h3 id=\"paso-2-instalar-las-dependencias-necesarias\">Paso 2: Instalar las Dependencias Necesarias</h3>\n<p>Instalaremos la biblioteca <code>google-cloud-firestore</code> que nos permitirá interactuar con Firestore.</p>\n<p>pip install google-cloud-firestore</p>\n<h3 id=\"paso-3-obtener-dumps-de-las-tablas-desde-postgresql\">Paso 3: Obtener Dumps de las Tablas desde PostgreSQL</h3>\n<p>Vamos a crear un script Bash para obtener dumps de las tablas desde una base de datos PostgreSQL y convertir esos dumps en archivos JSON.</p>\n<h3 id=\"script-bash-para-obtener-dumps-y-convertirlos-ajson\">Script Bash para Obtener Dumps y Convertirlos a JSON</h3>\n<p>Guarda el siguiente script en un archivo llamado <code>export_to_json.sh</code>.</p>\n<p>#!/bin/bash</p>\n<p># Configuración<br>\nHOST=“localhost”<br>\nPORT=“5432”<br>\nUSER=“tu_usuario”<br>\nDB=“tu_base_de_datos”<br>\nDIRECTORY=“RIM_FIRESTORE”</p>\n<p># Crear el directorio si no existe<br>\nmkdir -p $DIRECTORY</p>\n<p># Listar todas las tablas<br>\nTABLES=$(psql -h $HOST -p $PORT -U $USER -d $DB -t -c “SELECT tablename FROM pg_tables WHERE schemaname=‘public’;”)</p>\n<p># Exportar cada tabla a JSON<br>\nfor TABLE in $TABLES; do<br>\necho “Exportando tabla: $TABLE”<br>\npsql -h $HOST -p $PORT -U $USER -d $DB -c “\\copy (SELECT row_to_json(t) FROM (SELECT * FROM $TABLE) t) TO ‘$DIRECTORY/$TABLE.json‘“<br>\ndone</p>\n<h3 id=\"ejecutar-el-scriptbash\">Ejecutar el Script Bash</h3>\n<p>Haz que el script sea ejecutable y ejecútalo:</p>\n<p>chmod +x export_to_json.sh<br>\n./export_to_json.sh</p>\n<h3 id=\"paso-4-crear-el-script-python-para-consolidar-y-subir-los-datos-a-firestore\">Paso 4: Crear el Script Python para Consolidar y Subir los Datos a Firestore</h3>\n<p>Vamos a crear un script Python llamado <code>consolidate_upload.py</code>. Este script consolidará los archivos JSON y subirá los datos a Firestore.</p>\n<h3 id=\"código-delscript\">Código del Script</h3>\n<p>Guarda el siguiente código en un archivo llamado <code>consolidate_upload.py</code>.</p>\n<p>import os<br>\nimport json<br>\nimport sys<br>\nfrom collections import defaultdict<br>\nfrom google.cloud import firestore<br>\nfrom google.oauth2 import service_account</p>\n<p>FILES_TO_CONSOLIDATE = [<br>\n“1.json”,<br>\n“2.json”,<br>\n“3.json”,<br>\n“4.json”,<br>\n]</p>\n<p>def consolidate_files(directory):<br>\nconsolidated_data = []<br>\nall_fields = set()</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>\\# Leer todos los archivos y recolectar todos los campos posibles  </span></span>\n<span class=\"line\"><span>for filename in FILES\\_TO\\_CONSOLIDATE:  </span></span>\n<span class=\"line\"><span>    file\\_path = os.path.join(directory, filename)  </span></span>\n<span class=\"line\"><span>    if not os.path.exists(file\\_path):  </span></span>\n<span class=\"line\"><span>        print(f\"Archivo {filename} no encontrado en el directorio {directory}, se omitirá.\")  </span></span>\n<span class=\"line\"><span>        continue  </span></span>\n<span class=\"line\"><span>      </span></span>\n<span class=\"line\"><span>    table\\_name = os.path.splitext(filename)\\[0\\]  \\# Remover la extensión .json  </span></span>\n<span class=\"line\"><span>    with open(file\\_path, 'r') as f:  </span></span>\n<span class=\"line\"><span>        for line in f:  </span></span>\n<span class=\"line\"><span>            try:  </span></span>\n<span class=\"line\"><span>                document = json.loads(line.strip())  </span></span>\n<span class=\"line\"><span>                document\\[\"source\\_table\"\\] = table\\_name  \\# Añadir campo con el nombre de la tabla sin .json  </span></span>\n<span class=\"line\"><span>                all\\_fields.update(document.keys())  </span></span>\n<span class=\"line\"><span>                consolidated\\_data.append(document)  </span></span>\n<span class=\"line\"><span>            except json.JSONDecodeError as e:  </span></span>\n<span class=\"line\"><span>                print(f\"Error al decodificar JSON en {file\\_path}: {e}\")  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>\\# Homologar la estructura de todos los documentos  </span></span>\n<span class=\"line\"><span>homologated\\_data = \\[\\]  </span></span>\n<span class=\"line\"><span>for document in consolidated\\_data:  </span></span>\n<span class=\"line\"><span>    homologated\\_document = {field: document.get(field, None) for field in all\\_fields}  </span></span>\n<span class=\"line\"><span>    homologated\\_document\\[\"source\\_table\"\\] = document\\[\"source\\_table\"\\]  \\# Asegurar que el campo 'source\\_table' esté presente  </span></span>\n<span class=\"line\"><span>    homologated\\_data.append(homologated\\_document)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>return homologated\\_data, all\\_fields  </span></span></code></pre>\n<p>def save_consolidated_data(data, output_file):<br>\nwith open(output_file, ‘w’) as f:<br>\njson.dump(data, f, indent=4)<br>\nprint(f”Datos consolidados guardados en {output_file}”)</p>\n<p>def preview_data(data, fields, num_records_per_table=5):<br>\nprint(“Previsualización de los datos consolidados:“)<br>\nprint(f”Total de registros: {len(data)}“)<br>\nprint(f”Campos homologados: {’, ‘.join(fields)}”)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>\\# Previsualizar los registros por tabla de origen  </span></span>\n<span class=\"line\"><span>tables = defaultdict(list)  </span></span>\n<span class=\"line\"><span>for record in data:  </span></span>\n<span class=\"line\"><span>    tables\\[record\\[\"source\\_table\"\\]\\].append(record)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>for table\\_name, records in tables.items():  </span></span>\n<span class=\"line\"><span>    print(f\"\\\\nTabla: {table\\_name}\")  </span></span>\n<span class=\"line\"><span>    for record in records\\[:num\\_records\\_per\\_table\\]:  </span></span>\n<span class=\"line\"><span>        print(record)  </span></span>\n<span class=\"line\"><span>    if len(records) > num\\_records\\_per\\_table:  </span></span>\n<span class=\"line\"><span>        print(f\"...y {len(records) - num\\_records\\_per\\_table} registros más.\")  </span></span></code></pre>\n<p>def upload_to_firestore(data, credentials_path, collection_name=“consolidate_mpn”):<br>\n# Configurar las credenciales del servicio<br>\ncredentials = service_account.Credentials.from_service_account_file(credentials_path)<br>\ndb = firestore.Client(credentials=credentials)</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>total\\_docs = len(data)  </span></span>\n<span class=\"line\"><span>collection\\_ref = db.collection(collection\\_name)  </span></span>\n<span class=\"line\"><span>for i, document in enumerate(data):  </span></span>\n<span class=\"line\"><span>    doc\\_id = str(document.get('id', ''))  </span></span>\n<span class=\"line\"><span>    if doc\\_id:  </span></span>\n<span class=\"line\"><span>        doc\\_ref = collection\\_ref.document(doc\\_id)  </span></span>\n<span class=\"line\"><span>        doc = doc\\_ref.get()  </span></span>\n<span class=\"line\"><span>        if doc.exists:  </span></span>\n<span class=\"line\"><span>            source\\_table = document\\[\"source\\_table\"\\]  </span></span>\n<span class=\"line\"><span>            print(f\"Documento con ID {doc\\_id} de la tabla {source\\_table} ya existe en la colección {collection\\_name}. Se eliminará y se volverá a crear.\")  </span></span>\n<span class=\"line\"><span>            doc\\_ref.delete()  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>        \\# Insertar documento en Firestore  </span></span>\n<span class=\"line\"><span>        doc\\_ref.set(document)  </span></span>\n<span class=\"line\"><span>    else:  </span></span>\n<span class=\"line\"><span>        collection\\_ref.add(document)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>    \\# Mostrar el progreso  </span></span>\n<span class=\"line\"><span>    print(f\"Progreso: {i + 1}/{total\\_docs} documentos subidos ({(i + 1) / total\\_docs \\* 100:.2f}%)\")  </span></span>\n<span class=\"line\"><span>  </span></span>\n<span class=\"line\"><span>print(\"Datos consolidados subidos a Firestore.\")  </span></span></code></pre>\n<p>if __name__ == “__main__“:<br>\nif len(sys.argv) != 3:<br>\nprint(“Uso: python consolidate_upload.py <directorio> &#x3C;ruta_a_credenciales_json>“)<br>\nsys.exit(1)</directorio></p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>directory = sys.argv\\[1\\]  </span></span>\n<span class=\"line\"><span>credentials\\_path = sys.argv\\[2\\]  </span></span>\n<span class=\"line\"><span>output\\_file = \"consolidated\\_data.json\"  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>\\# Consolidar archivos  </span></span>\n<span class=\"line\"><span>consolidated\\_data, all\\_fields = consolidate\\_files(directory)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>\\# Guardar datos consolidados en un archivo JSON  </span></span>\n<span class=\"line\"><span>save\\_consolidated\\_data(consolidated\\_data, output\\_file)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>\\# Previsualizar datos consolidados  </span></span>\n<span class=\"line\"><span>preview\\_data(consolidated\\_data, all\\_fields)  </span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>\\# Preguntar al usuario si desea subir los datos a Firestore  </span></span>\n<span class=\"line\"><span>user\\_input = input(\"¿Desea subir los datos consolidados a Firestore? (s/n): \")  </span></span>\n<span class=\"line\"><span>if user\\_input.lower() == 's':  </span></span>\n<span class=\"line\"><span>    upload\\_to\\_firestore(consolidated\\_data, credentials\\_path)  </span></span>\n<span class=\"line\"><span>else:  </span></span>\n<span class=\"line\"><span>    print(\"Subida cancelada.\")</span></span></code></pre>\n<h3 id=\"descripción-delscript\">Descripción del Script</h3>\n<p><strong>Consolidar Archivos JSON</strong>:</p>\n<ul>\n<li>Lee varios archivos JSON de un directorio.</li>\n<li>Añade un campo <code>source_table</code> para indicar el archivo de origen de cada registro.</li>\n<li>Homologa la estructura de los documentos para asegurarse de que todos los registros tienen los mismos campos.</li>\n</ul>\n<p><strong>Guardar Datos Consolidados</strong>:</p>\n<ul>\n<li>Guarda los datos consolidados en un archivo JSON.</li>\n</ul>\n<p><strong>Previsualizar los Datos</strong>:</p>\n<ul>\n<li>Muestra una previsualización de los datos consolidados en la consola.</li>\n</ul>\n<p><strong>Subir Datos a Firestore</strong>:</p>\n<ul>\n<li>Sube los datos consolidados a Firestore en la colección <code>consolidate_mpn</code>.</li>\n<li>Muestra el progreso de la subida en la consola.</li>\n<li>Si un documento ya existe, lo elimina y lo vuelve a crear.</li>\n</ul>\n<h3 id=\"paso-4-ejecutar-elscript\">Paso 4: Ejecutar el Script</h3>\n<p>Ejecuta el script pasando el directorio que contiene los archivos JSON y la ruta al archivo de credenciales:</p>\n<p>python consolidate_upload.py RIM_FIRESTORE /ruta/a/tus/credenciales.json</p>\n<h3 id=\"estructura-de-directorios-yarchivos\">Estructura de Directorios y Archivos</h3>\n<p>Asegúrate de que tu estructura de directorios se vea así:</p>\n<p>proyecto/<br>\n│<br>\n├── myenv/  (entorno virtual)<br>\n├── consolidate_upload.py<br>\n├── /ruta/a/tus/credenciales.json<br>\n└── ARCHIVOS_DUMP/<br>\n├── 1.json<br>\n├── 2.json<br>\n├── 3.json<br>\n├── 4.json<br>\n├── …</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/e9fcb4eebac7\">July 11, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/tutorial-consolidaci%C3%B3n-y-subida-de-datos-a-firestore-usando-python-e9fcb4eebac7\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Tutorial: Consolidación y Subida de Datos a Firestore usando Python","description":"","tags":["code","Firestore","python"],"time":4,"featured":true,"timestamp":"2024-07-11T12:20:32-0300","filename":"2024-07-11_Tutorial--Consolidaci-n-y-Subida-de-Datos-a-Firestore-usando-Python-e9fcb4eebac7"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-07-11_Tutorial--Consolidaci-n-y-Subida-de-Datos-a-Firestore-usando-Python-e9fcb4eebac7.md";
				const url = "/blog/2024-07-11_Tutorial--Consolidaci-n-y-Subida-de-Datos-a-Firestore-usando-Python-e9fcb4eebac7";
				function rawContent() {
					return "   \n                                        \n                                                                            \n               \n                                     \n       \n              \n                                     \n                                                                                                       \n   \n\nTutorial: Consolidación y Subida de Datos a Firestore usando Python\n===================================================================\n\nIntroducción\n\n* * *\n\n### Tutorial: Consolidación y Subida de Datos a Firestore usando Python\n\n![](https://cdn-images-1.medium.com/max/800/0*lLKGzMnDZlwKlG_E)\n\n### Introducción\n\nEn este tutorial, aprenderemos cómo consolidar múltiples tablas en archivos JSON en un único archivo, y luego subir esos datos a Firestore usando un script en Python. Esto es útil para integrar datos dispersos en una base de datos centralizada y realizar operaciones de datos más eficientes.\n\n### Requisitos Previos\n\nAntes de comenzar, asegúrate de tener lo siguiente instalado y configurado:\n\n1.  **Python 3.x**\n2.  **Google Cloud SDK** (incluyendo `gcloud` y `gsutil`)\n3.  **Credenciales de una cuenta de servicio de Google Cloud**\n\n### Paso 1: Configurar el Entorno Virtual de Python\n\nPrimero, vamos a crear y activar un entorno virtual para gestionar nuestras dependencias de Python.\n\npython3 -m venv myenv  \nsource myenv/bin/activate\n\n### Paso 2: Instalar las Dependencias Necesarias\n\nInstalaremos la biblioteca `google-cloud-firestore` que nos permitirá interactuar con Firestore.\n\npip install google-cloud-firestore\n\n### Paso 3: Obtener Dumps de las Tablas desde PostgreSQL\n\nVamos a crear un script Bash para obtener dumps de las tablas desde una base de datos PostgreSQL y convertir esos dumps en archivos JSON.\n\n### Script Bash para Obtener Dumps y Convertirlos a JSON\n\nGuarda el siguiente script en un archivo llamado `export_to_json.sh`.\n\n#!/bin/bash  \n  \n\\# Configuración  \nHOST=\"localhost\"  \nPORT=\"5432\"  \nUSER=\"tu\\_usuario\"  \nDB=\"tu\\_base\\_de\\_datos\"  \nDIRECTORY=\"RIM\\_FIRESTORE\"  \n  \n\\# Crear el directorio si no existe  \nmkdir -p $DIRECTORY  \n  \n\\# Listar todas las tablas  \nTABLES=$(psql -h $HOST -p $PORT -U $USER -d $DB -t -c \"SELECT tablename FROM pg\\_tables WHERE schemaname='public';\")  \n  \n\\# Exportar cada tabla a JSON  \nfor TABLE in $TABLES; do  \n  echo \"Exportando tabla: $TABLE\"  \n  psql -h $HOST -p $PORT -U $USER -d $DB -c \"\\\\copy (SELECT row\\_to\\_json(t) FROM (SELECT \\* FROM $TABLE) t) TO '$DIRECTORY/$TABLE.json'\"  \ndone\n\n### Ejecutar el Script Bash\n\nHaz que el script sea ejecutable y ejecútalo:\n\nchmod +x export\\_to\\_json.sh  \n./export\\_to\\_json.sh\n\n### Paso 4: Crear el Script Python para Consolidar y Subir los Datos a Firestore\n\nVamos a crear un script Python llamado `consolidate_upload.py`. Este script consolidará los archivos JSON y subirá los datos a Firestore.\n\n### Código del Script\n\nGuarda el siguiente código en un archivo llamado `consolidate_upload.py`.\n\nimport os  \nimport json  \nimport sys  \nfrom collections import defaultdict  \nfrom google.cloud import firestore  \nfrom google.oauth2 import service\\_account  \n  \nFILES\\_TO\\_CONSOLIDATE = \\[  \n    \"1.json\",  \n    \"2.json\",  \n    \"3.json\",  \n    \"4.json\",  \n\\]  \n  \ndef consolidate\\_files(directory):  \n    consolidated\\_data = \\[\\]  \n    all\\_fields = set()  \n  \n    \\# Leer todos los archivos y recolectar todos los campos posibles  \n    for filename in FILES\\_TO\\_CONSOLIDATE:  \n        file\\_path = os.path.join(directory, filename)  \n        if not os.path.exists(file\\_path):  \n            print(f\"Archivo {filename} no encontrado en el directorio {directory}, se omitirá.\")  \n            continue  \n          \n        table\\_name = os.path.splitext(filename)\\[0\\]  \\# Remover la extensión .json  \n        with open(file\\_path, 'r') as f:  \n            for line in f:  \n                try:  \n                    document = json.loads(line.strip())  \n                    document\\[\"source\\_table\"\\] = table\\_name  \\# Añadir campo con el nombre de la tabla sin .json  \n                    all\\_fields.update(document.keys())  \n                    consolidated\\_data.append(document)  \n                except json.JSONDecodeError as e:  \n                    print(f\"Error al decodificar JSON en {file\\_path}: {e}\")  \n  \n    \\# Homologar la estructura de todos los documentos  \n    homologated\\_data = \\[\\]  \n    for document in consolidated\\_data:  \n        homologated\\_document = {field: document.get(field, None) for field in all\\_fields}  \n        homologated\\_document\\[\"source\\_table\"\\] = document\\[\"source\\_table\"\\]  \\# Asegurar que el campo 'source\\_table' esté presente  \n        homologated\\_data.append(homologated\\_document)  \n  \n    return homologated\\_data, all\\_fields  \n  \ndef save\\_consolidated\\_data(data, output\\_file):  \n    with open(output\\_file, 'w') as f:  \n        json.dump(data, f, indent=4)  \n    print(f\"Datos consolidados guardados en {output\\_file}\")  \n  \ndef preview\\_data(data, fields, num\\_records\\_per\\_table=5):  \n    print(\"Previsualización de los datos consolidados:\")  \n    print(f\"Total de registros: {len(data)}\")  \n    print(f\"Campos homologados: {', '.join(fields)}\")  \n  \n    \\# Previsualizar los registros por tabla de origen  \n    tables = defaultdict(list)  \n    for record in data:  \n        tables\\[record\\[\"source\\_table\"\\]\\].append(record)  \n  \n    for table\\_name, records in tables.items():  \n        print(f\"\\\\nTabla: {table\\_name}\")  \n        for record in records\\[:num\\_records\\_per\\_table\\]:  \n            print(record)  \n        if len(records) > num\\_records\\_per\\_table:  \n            print(f\"...y {len(records) - num\\_records\\_per\\_table} registros más.\")  \n  \ndef upload\\_to\\_firestore(data, credentials\\_path, collection\\_name=\"consolidate\\_mpn\"):  \n    \\# Configurar las credenciales del servicio  \n    credentials = service\\_account.Credentials.from\\_service\\_account\\_file(credentials\\_path)  \n    db = firestore.Client(credentials=credentials)  \n  \n    total\\_docs = len(data)  \n    collection\\_ref = db.collection(collection\\_name)  \n    for i, document in enumerate(data):  \n        doc\\_id = str(document.get('id', ''))  \n        if doc\\_id:  \n            doc\\_ref = collection\\_ref.document(doc\\_id)  \n            doc = doc\\_ref.get()  \n            if doc.exists:  \n                source\\_table = document\\[\"source\\_table\"\\]  \n                print(f\"Documento con ID {doc\\_id} de la tabla {source\\_table} ya existe en la colección {collection\\_name}. Se eliminará y se volverá a crear.\")  \n                doc\\_ref.delete()  \n  \n            \\# Insertar documento en Firestore  \n            doc\\_ref.set(document)  \n        else:  \n            collection\\_ref.add(document)  \n  \n        \\# Mostrar el progreso  \n        print(f\"Progreso: {i + 1}/{total\\_docs} documentos subidos ({(i + 1) / total\\_docs \\* 100:.2f}%)\")  \n      \n    print(\"Datos consolidados subidos a Firestore.\")  \n  \nif \\_\\_name\\_\\_ == \"\\_\\_main\\_\\_\":  \n    if len(sys.argv) != 3:  \n        print(\"Uso: python consolidate\\_upload.py <directorio> <ruta\\_a\\_credenciales\\_json>\")  \n        sys.exit(1)  \n  \n    directory = sys.argv\\[1\\]  \n    credentials\\_path = sys.argv\\[2\\]  \n    output\\_file = \"consolidated\\_data.json\"  \n  \n    \\# Consolidar archivos  \n    consolidated\\_data, all\\_fields = consolidate\\_files(directory)  \n  \n    \\# Guardar datos consolidados en un archivo JSON  \n    save\\_consolidated\\_data(consolidated\\_data, output\\_file)  \n  \n    \\# Previsualizar datos consolidados  \n    preview\\_data(consolidated\\_data, all\\_fields)  \n  \n    \\# Preguntar al usuario si desea subir los datos a Firestore  \n    user\\_input = input(\"¿Desea subir los datos consolidados a Firestore? (s/n): \")  \n    if user\\_input.lower() == 's':  \n        upload\\_to\\_firestore(consolidated\\_data, credentials\\_path)  \n    else:  \n        print(\"Subida cancelada.\")\n\n### Descripción del Script\n\n**Consolidar Archivos JSON**:\n\n*   Lee varios archivos JSON de un directorio.\n*   Añade un campo `source_table` para indicar el archivo de origen de cada registro.\n*   Homologa la estructura de los documentos para asegurarse de que todos los registros tienen los mismos campos.\n\n**Guardar Datos Consolidados**:\n\n*   Guarda los datos consolidados en un archivo JSON.\n\n**Previsualizar los Datos**:\n\n*   Muestra una previsualización de los datos consolidados en la consola.\n\n**Subir Datos a Firestore**:\n\n*   Sube los datos consolidados a Firestore en la colección `consolidate_mpn`.\n*   Muestra el progreso de la subida en la consola.\n*   Si un documento ya existe, lo elimina y lo vuelve a crear.\n\n### Paso 4: Ejecutar el Script\n\nEjecuta el script pasando el directorio que contiene los archivos JSON y la ruta al archivo de credenciales:\n\npython consolidate\\_upload.py RIM\\_FIRESTORE /ruta/a/tus/credenciales.json\n\n### Estructura de Directorios y Archivos\n\nAsegúrate de que tu estructura de directorios se vea así:\n\nproyecto/  \n│  \n├── myenv/  (entorno virtual)  \n├── consolidate\\_upload.py  \n├── /ruta/a/tus/credenciales.json  \n└── ARCHIVOS\\_DUMP/  \n    ├── 1.json  \n    ├── 2.json  \n    ├── 3.json  \n    ├── 4.json  \n    ├── ...\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [July 11, 2024](https://medium.com/p/e9fcb4eebac7).\n\n[Canonical link](https://medium.com/@devjaime/tutorial-consolidaci%C3%B3n-y-subida-de-datos-a-firestore-usando-python-e9fcb4eebac7)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"tutorial-consolidación-y-subida-de-datos-a-firestore-usando-python","text":"Tutorial: Consolidación y Subida de Datos a Firestore usando Python"},{"depth":3,"slug":"tutorial-consolidación-y-subida-de-datos-a-firestore-usandopython","text":"Tutorial: Consolidación y Subida de Datos a Firestore usando Python"},{"depth":3,"slug":"introducción","text":"Introducción"},{"depth":3,"slug":"requisitos-previos","text":"Requisitos Previos"},{"depth":3,"slug":"paso-1-configurar-el-entorno-virtual-depython","text":"Paso 1: Configurar el Entorno Virtual de Python"},{"depth":3,"slug":"paso-2-instalar-las-dependencias-necesarias","text":"Paso 2: Instalar las Dependencias Necesarias"},{"depth":3,"slug":"paso-3-obtener-dumps-de-las-tablas-desde-postgresql","text":"Paso 3: Obtener Dumps de las Tablas desde PostgreSQL"},{"depth":3,"slug":"script-bash-para-obtener-dumps-y-convertirlos-ajson","text":"Script Bash para Obtener Dumps y Convertirlos a JSON"},{"depth":3,"slug":"ejecutar-el-scriptbash","text":"Ejecutar el Script Bash"},{"depth":3,"slug":"paso-4-crear-el-script-python-para-consolidar-y-subir-los-datos-a-firestore","text":"Paso 4: Crear el Script Python para Consolidar y Subir los Datos a Firestore"},{"depth":3,"slug":"código-delscript","text":"Código del Script"},{"depth":3,"slug":"descripción-delscript","text":"Descripción del Script"},{"depth":3,"slug":"paso-4-ejecutar-elscript","text":"Paso 4: Ejecutar el Script"},{"depth":3,"slug":"estructura-de-directorios-yarchivos","text":"Estructura de Directorios y Archivos"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
