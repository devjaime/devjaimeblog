/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"bff-con-go-parte-3-documentación-seguridad-y-despliegue\">BFF con Go (Parte 3): Documentación, Seguridad y Despliegue 📄🔐📦</h1>\n<p>Luego de construir un Backend For Frontend con Go + OpenAPI y extenderlo con pruebas, concurrencia y resiliencia, es momento de prepararlo para producción.</p>\n<p>En esta tercera parte, te mostraré cómo:</p>\n<ul>\n<li>📄 Agregar Swagger UI embebido para documentar y testear tu API</li>\n<li>🔐 Incluir autenticación con JWT</li>\n<li>📦 Dockerizar tu BFF para desplegarlo en la nube</li>\n</ul>\n<hr>\n<h2 id=\"-1-integrar-swagger-ui\">📄 1. Integrar Swagger UI</h2>\n<p>Agrega Swagger UI como servidor embebido usando <a href=\"https://github.com/swaggo/http-swagger\"><code>github.com/swaggo/http-swagger</code></a>:</p>\n<ol>\n<li>Instala la dependencia:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#79B8FF\"> -u</span><span style=\"color:#9ECBFF\"> github.com/swaggo/http-swagger</span></span></code></pre>\n<ol start=\"2\">\n<li>Agrega el handler en tu <code>main.go</code>:</li>\n</ol>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> httpSwagger </span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#B392F0\">github.com/swaggo/http-swagger</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  r </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> chi.</span><span style=\"color:#B392F0\">NewRouter</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  r.</span><span style=\"color:#B392F0\">Get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/swagger/*\"</span><span style=\"color:#E1E4E8\">, httpSwagger.WrapHandler)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Registra tus handlers de API</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<ol start=\"3\">\n<li>Sirve tu spec OpenAPI en <code>/swagger/index.html</code> 📘</li>\n</ol>\n<hr>\n<h2 id=\"-2-autenticación-jwt\">🔐 2. Autenticación JWT</h2>\n<p>Instala <code>github.com/golang-jwt/jwt/v5</code> para manejar tokens:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> github.com/golang-jwt/jwt/v5</span></span></code></pre>\n<p>Agrega un middleware para validar tokens:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> JWTMiddleware</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">next</span><span style=\"color:#B392F0\"> http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Handler</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#B392F0\">http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Handler</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> http.</span><span style=\"color:#B392F0\">HandlerFunc</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">func</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">w</span><span style=\"color:#B392F0\"> http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">ResponseWriter</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">r</span><span style=\"color:#F97583\"> *</span><span style=\"color:#B392F0\">http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Request</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    authHeader </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> r.Header.</span><span style=\"color:#B392F0\">Get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Authorization\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    tokenStr </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> strings.</span><span style=\"color:#B392F0\">TrimPrefix</span><span style=\"color:#E1E4E8\">(authHeader, </span><span style=\"color:#9ECBFF\">\"Bearer \"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    token, err </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> jwt.</span><span style=\"color:#B392F0\">Parse</span><span style=\"color:#E1E4E8\">(tokenStr, </span><span style=\"color:#F97583\">func</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">token</span><span style=\"color:#F97583\"> *</span><span style=\"color:#B392F0\">jwt</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Token</span><span style=\"color:#E1E4E8\">) (</span><span style=\"color:#F97583\">interface</span><span style=\"color:#E1E4E8\">{}, </span><span style=\"color:#F97583\">error</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span><span style=\"color:#E1E4E8\"> []</span><span style=\"color:#F97583\">byte</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"tu_clave_secreta\"</span><span style=\"color:#E1E4E8\">), </span><span style=\"color:#79B8FF\">nil</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">    if</span><span style=\"color:#E1E4E8\"> err </span><span style=\"color:#F97583\">!=</span><span style=\"color:#79B8FF\"> nil</span><span style=\"color:#F97583\"> ||</span><span style=\"color:#F97583\"> !</span><span style=\"color:#E1E4E8\">token.Valid {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      http.</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">(w, </span><span style=\"color:#9ECBFF\">\"Token inválido\"</span><span style=\"color:#E1E4E8\">, http.StatusUnauthorized)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      return</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    next.</span><span style=\"color:#B392F0\">ServeHTTP</span><span style=\"color:#E1E4E8\">(w, r)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Y protégelo en tus rutas:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">r.</span><span style=\"color:#B392F0\">With</span><span style=\"color:#E1E4E8\">(JWTMiddleware).</span><span style=\"color:#B392F0\">Get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/users/{id}\"</span><span style=\"color:#E1E4E8\">, handler.GetUserById)</span></span></code></pre>\n<hr>\n<h2 id=\"-3-dockerizar-el-bff\">📦 3. Dockerizar el BFF</h2>\n<p>Creamos un archivo <code>Dockerfile</code> simple:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>FROM golang:1.21 AS builder</span></span>\n<span class=\"line\"><span>WORKDIR /app</span></span>\n<span class=\"line\"><span>COPY . .</span></span>\n<span class=\"line\"><span>RUN go build -o bff ./cmd/main.go</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>FROM debian:bullseye-slim</span></span>\n<span class=\"line\"><span>WORKDIR /app</span></span>\n<span class=\"line\"><span>COPY --from=builder /app/bff ./bff</span></span>\n<span class=\"line\"><span>EXPOSE 8080</span></span>\n<span class=\"line\"><span>CMD [\"./bff\"]</span></span></code></pre>\n<p>Y un <code>.dockerignore</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>**/*.go</span></span>\n<span class=\"line\"><span>**/*.mod</span></span>\n<span class=\"line\"><span>Dockerfile</span></span>\n<span class=\"line\"><span>tmp/*</span></span></code></pre>\n<p>Construye y corre tu contenedor:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> -t</span><span style=\"color:#9ECBFF\"> bff-go</span><span style=\"color:#9ECBFF\"> .</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#79B8FF\"> -p</span><span style=\"color:#9ECBFF\"> 8080:8080</span><span style=\"color:#9ECBFF\"> bff-go</span></span></code></pre>\n<hr>\n<h2 id=\"-próximos-pasos-sugeridos\">🚀 Próximos pasos sugeridos</h2>\n<ul>\n<li>📊 Métricas con Prometheus</li>\n<li>🔄 CI/CD para producción</li>\n<li>🔍 Validación avanzada de JWT con claims</li>\n<li>🔐 Roles y scopes para control de acceso</li>\n</ul>\n<hr>\n<p>Con esto, tu BFF en Go está listo para producción: documentado, seguro y desplegable en la nube 🚀</p>\n<p>Sígueme en <a href=\"https://codeia.cl\">codeIA.cl</a> y comenta si quieres que exploremos una integración con frontend o autenticación federada. 💬</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"BFF con Go (Parte 3): Documentación, Seguridad y Despliegue","description":"Explora cómo integrar Swagger UI, añadir autenticación JWT y preparar tu BFF en Go para producción con Docker.","tags":["golang","openapi","bff","swagger","jwt","docker"],"time":10,"featured":true,"timestamp":"2025-03-30T11:00:00-0300","filename":"2025-03-30_BFF-Golang-Parte3"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-03-30_BFF-Golang-Parte3.md";
				const url = "/blog/2025-03-30_BFF-Golang-Parte3";
				function rawContent() {
					return "   \n                                        \n                                                                    \n                                                                                                                             \n                                                              \n        \n              \n                                     \n                                        \n   \n\n# BFF con Go (Parte 3): Documentación, Seguridad y Despliegue 📄🔐📦\n\nLuego de construir un Backend For Frontend con Go + OpenAPI y extenderlo con pruebas, concurrencia y resiliencia, es momento de prepararlo para producción.\n\nEn esta tercera parte, te mostraré cómo:\n\n- 📄 Agregar Swagger UI embebido para documentar y testear tu API\n- 🔐 Incluir autenticación con JWT\n- 📦 Dockerizar tu BFF para desplegarlo en la nube\n\n---\n\n## 📄 1. Integrar Swagger UI\n\nAgrega Swagger UI como servidor embebido usando [`github.com/swaggo/http-swagger`](https://github.com/swaggo/http-swagger):\n\n1. Instala la dependencia:\n\n```bash\ngo get -u github.com/swaggo/http-swagger\n```\n\n2. Agrega el handler en tu `main.go`:\n\n```go\nimport httpSwagger \"github.com/swaggo/http-swagger\"\n\nfunc main() {\n  r := chi.NewRouter()\n  r.Get(\"/swagger/*\", httpSwagger.WrapHandler)\n  // Registra tus handlers de API\n}\n```\n\n3. Sirve tu spec OpenAPI en `/swagger/index.html` 📘\n\n---\n\n## 🔐 2. Autenticación JWT\n\nInstala `github.com/golang-jwt/jwt/v5` para manejar tokens:\n\n```bash\ngo get github.com/golang-jwt/jwt/v5\n```\n\nAgrega un middleware para validar tokens:\n\n```go\nfunc JWTMiddleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n    authHeader := r.Header.Get(\"Authorization\")\n    tokenStr := strings.TrimPrefix(authHeader, \"Bearer \")\n\n    token, err := jwt.Parse(tokenStr, func(token *jwt.Token) (interface{}, error) {\n      return []byte(\"tu_clave_secreta\"), nil\n    })\n\n    if err != nil || !token.Valid {\n      http.Error(w, \"Token inválido\", http.StatusUnauthorized)\n      return\n    }\n\n    next.ServeHTTP(w, r)\n  })\n}\n```\n\nY protégelo en tus rutas:\n\n```go\nr.With(JWTMiddleware).Get(\"/users/{id}\", handler.GetUserById)\n```\n\n---\n\n## 📦 3. Dockerizar el BFF\n\nCreamos un archivo `Dockerfile` simple:\n\n```Dockerfile\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o bff ./cmd/main.go\n\nFROM debian:bullseye-slim\nWORKDIR /app\nCOPY --from=builder /app/bff ./bff\nEXPOSE 8080\nCMD [\"./bff\"]\n```\n\nY un `.dockerignore`:\n\n```dockerignore\n**/*.go\n**/*.mod\nDockerfile\ntmp/*\n```\n\nConstruye y corre tu contenedor:\n\n```bash\ndocker build -t bff-go .\ndocker run -p 8080:8080 bff-go\n```\n\n---\n\n## 🚀 Próximos pasos sugeridos\n\n- 📊 Métricas con Prometheus\n- 🔄 CI/CD para producción\n- 🔍 Validación avanzada de JWT con claims\n- 🔐 Roles y scopes para control de acceso\n\n---\n\nCon esto, tu BFF en Go está listo para producción: documentado, seguro y desplegable en la nube 🚀\n\nSígueme en [codeIA.cl](https://codeia.cl) y comenta si quieres que exploremos una integración con frontend o autenticación federada. 💬\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"bff-con-go-parte-3-documentación-seguridad-y-despliegue","text":"BFF con Go (Parte 3): Documentación, Seguridad y Despliegue 📄🔐📦"},{"depth":2,"slug":"-1-integrar-swagger-ui","text":"📄 1. Integrar Swagger UI"},{"depth":2,"slug":"-2-autenticación-jwt","text":"🔐 2. Autenticación JWT"},{"depth":2,"slug":"-3-dockerizar-el-bff","text":"📦 3. Dockerizar el BFF"},{"depth":2,"slug":"-próximos-pasos-sugeridos","text":"🚀 Próximos pasos sugeridos"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
