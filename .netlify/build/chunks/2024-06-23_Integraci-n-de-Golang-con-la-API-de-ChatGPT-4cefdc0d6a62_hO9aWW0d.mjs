/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"integración-de-golang-con-la-api-de-chatgpt\">Integración de Golang con la API de ChatGPT</h1>\n<p>En la era actual, las aplicaciones impulsadas por inteligencia artificial están ganando una popularidad significativa. Integrar capacidades…</p>\n<hr>\n<h3 id=\"integración-de-golang-con-la-api-dechatgpt\">Integración de Golang con la API de ChatGPT</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Atm0sii4_bstXiSM.png\" alt=\"\"></p>\n<p>En la era actual, las aplicaciones impulsadas por inteligencia artificial están ganando una popularidad significativa. Integrar capacidades de lenguaje natural en tus aplicaciones puede proporcionar una experiencia de usuario rica y dinámica. En este artículo, aprenderás cómo integrar Golang con la API de ChatGPT para aprovechar las poderosas funcionalidades del modelo de lenguaje de OpenAI.</p>\n<h3 id=\"por-qué-usar-golang-conchatgpt\">¿Por qué usar Golang con ChatGPT?</h3>\n<p>Golang, conocido por su rendimiento y eficiencia, es ideal para construir aplicaciones de backend y servicios RESTful. Por otro lado, ChatGPT proporciona capacidades avanzadas de procesamiento del lenguaje natural (NLP). La integración de ambos puede llevar a la creación de aplicaciones que respondan inteligentemente a las consultas de los usuarios.</p>\n<h3 id=\"prerrequisitos\">Prerrequisitos</h3>\n<p>Antes de comenzar, asegúrate de tener lo siguiente:</p>\n<ul>\n<li><a href=\"https://golang.org/dl/\">Golang</a> instalado en tu máquina.</li>\n<li>Una cuenta de OpenAI y una clave API. Puedes obtenerla registrándote en <a href=\"https://www.openai.com/\">OpenAI</a>.</li>\n</ul>\n<h3 id=\"paso-1-configuración-delentorno\">Paso 1: Configuración del Entorno</h3>\n<p>Primero, asegúrate de tener Go instalado. Puedes verificarlo ejecutando:</p>\n<p>go version</p>\n<p>Si Go no está instalado, sigue las <a href=\"https://golang.org/doc/install\">instrucciones oficiales</a>.</p>\n<h3 id=\"paso-2-crear-un-proyectogolang\">Paso 2: Crear un Proyecto Golang</h3>\n<p>Crea un nuevo directorio para tu proyecto y navega a él:</p>\n<p>mkdir chatgpt-golang<br>\ncd chatgpt-golang</p>\n<p>Inicializa un nuevo módulo Go:</p>\n<p>go mod init chatgpt-golang</p>\n<h3 id=\"paso-3-instalar-dependencias\">Paso 3: Instalar Dependencias</h3>\n<p>Usaremos el paquete <code>net/http</code> de Go para hacer solicitudes HTTP. Además, instalaremos el paquete <code>encoding/json</code> para manejar la serialización JSON.</p>\n<p>No se requiere una instalación separada para estos paquetes ya que vienen incluidos en la biblioteca estándar de Go.</p>\n<h3 id=\"paso-4-implementar-la-llamada-a-la-api-dechatgpt\">Paso 4: Implementar la Llamada a la API de ChatGPT</h3>\n<p>Crea un archivo llamado <code>main.go</code> y escribe el siguiente código:</p>\n<p>package main</p>\n<p>import (<br>\n“bytes\"<br>\n\"encoding/json\"<br>\n\"fmt\"<br>\n\"net/http\"<br>\n\"os”<br>\n)</p>\n<p>// Estructura para la solicitud a la API de ChatGPT<br>\ntype ChatGPTRequest struct {<br>\nModel    string `json:“model”`<br>\nMessages []Message `json:“messages”`<br>\n}</p>\n<p>// Estructura para los mensajes en la solicitud<br>\ntype Message struct {<br>\nRole    string `json:“role”`<br>\nContent string `json:“content”`<br>\n}</p>\n<p>// Estructura para la respuesta de la API de ChatGPT<br>\ntype ChatGPTResponse struct {<br>\nChoices []struct {<br>\nMessage Message `json:“message”`<br>\n} `json:“choices”`<br>\n}</p>\n<p>func main() {<br>\n// Clave API de OpenAI<br>\napiKey := os.Getenv(“OPENAI_API_KEY”)<br>\nif apiKey == \"\" {<br>\nfmt.Println(“Por favor, establece la variable de entorno OPENAI_API_KEY.”)<br>\nreturn<br>\n}</p>\n<p>// URL de la API<br>\napiURL := “<a href=\"https://api.openai.com/v1/chat/completions\">https://api.openai.com/v1/chat/completions</a>”</p>\n<p>// Crear la solicitud<br>\nrequestBody := ChatGPTRequest{<br>\nModel: “gpt-4”,<br>\nMessages: []Message{<br>\n{<br>\nRole:    “system”,<br>\nContent: “Eres un asistente útil.”,<br>\n},<br>\n{<br>\nRole:    “user”,<br>\nContent: “Hola, ¿cómo estás?”,<br>\n},<br>\n},<br>\n}</p>\n<p>// Convertir la solicitud a JSON<br>\njsonRequest, err := json.Marshal(requestBody)<br>\nif err != nil {<br>\nfmt.Printf(“Error al convertir a JSON: %v\\n”, err)<br>\nreturn<br>\n}</p>\n<p>// Hacer la solicitud HTTP<br>\nclient := &#x26;http.Client{}<br>\nreq, err := http.NewRequest(“POST”, apiURL, bytes.NewBuffer(jsonRequest))<br>\nif err != nil {<br>\nfmt.Printf(“Error al crear la solicitud HTTP: %v\\n”, err)<br>\nreturn<br>\n}</p>\n<p>req.Header.Set(“Authorization”, “Bearer “+apiKey)<br>\nreq.Header.Set(“Content-Type”, “application/json”)</p>\n<p>resp, err := client.Do(req)<br>\nif err != nil {<br>\nfmt.Printf(“Error al realizar la solicitud HTTP: %v\\n”, err)<br>\nreturn<br>\n}<br>\ndefer resp.Body.Close()</p>\n<p>// Leer la respuesta<br>\nvar chatResponse ChatGPTResponse<br>\nerr = json.NewDecoder(resp.Body).Decode(&#x26;chatResponse)<br>\nif err != nil {<br>\nfmt.Printf(“Error al decodificar la respuesta: %v\\n”, err)<br>\nreturn<br>\n}</p>\n<p>// Mostrar la respuesta<br>\nfmt.Printf(“Respuesta de ChatGPT: %s\\n”, chatResponse.Choices[0].Message.Content)<br>\n}</p>\n<h3 id=\"explicación-delcódigo\">Explicación del Código</h3>\n<ul>\n<li><strong>Estructuras de Datos</strong>: Definimos estructuras para las solicitudes y respuestas que usamos para interactuar con la API.</li>\n<li><strong>Solicitud</strong>: Creamos una solicitud HTTP POST que contiene el mensaje del usuario.</li>\n<li><strong>Respuesta</strong>: Decodificamos la respuesta JSON en la estructura <code>ChatGPTResponse</code> y mostramos el contenido del primer mensaje de la respuesta.</li>\n</ul>\n<h3 id=\"paso-5-establecer-la-claveapi\">Paso 5: Establecer la Clave API</h3>\n<p>Debes establecer tu clave API de OpenAI como una variable de entorno. Puedes hacerlo temporalmente en la terminal:</p>\n<p>export OPENAI_API_KEY=“tu-clave-api”</p>\n<p>O añadirlo a tu archivo de configuración de entorno (<code>.bashrc</code>, <code>.zshrc</code>, etc.) para que esté disponible en todas las sesiones.</p>\n<h3 id=\"paso-6-ejecutar-elproyecto\">Paso 6: Ejecutar el Proyecto</h3>\n<p>Corre el siguiente comando para ejecutar tu programa:</p>\n<p>go run main.go</p>\n<h3 id=\"conclusión\">Conclusión</h3>\n<p>Integrar Golang con la API de ChatGPT es un proceso directo que puede enriquecer tus aplicaciones con funcionalidades avanzadas de NLP. Con esta integración, puedes construir chatbots, asistentes virtuales, y muchas otras aplicaciones que se beneficien de respuestas generadas por IA.</p>\n<p>Explora más sobre lo que puedes hacer con ChatGPT y personaliza las solicitudes para adaptarlas a tus necesidades específicas.</p>\n<p>¡Feliz codificación!</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/4cefdc0d6a62\">June 23, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/integraci%C3%B3n-de-golang-con-la-api-de-chatgpt-4cefdc0d6a62\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Integración de Golang con la API de ChatGPT","description":"","tags":["code","Golang","chatGPT"],"time":4,"featured":true,"timestamp":"2024-06-23T12:20:32-0300","filename":"2024-06-23_Integraci-n-de-Golang-con-la-API-de-ChatGPT-4cefdc0d6a62"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-06-23_Integraci-n-de-Golang-con-la-API-de-ChatGPT-4cefdc0d6a62.md";
				const url = "/blog/2024-06-23_Integraci-n-de-Golang-con-la-API-de-ChatGPT-4cefdc0d6a62";
				function rawContent() {
					return "   \n                                        \n                                                    \n               \n                                   \n       \n              \n                                     \n                                                                               \n   \n\n\nIntegración de Golang con la API de ChatGPT\n===========================================\n\nEn la era actual, las aplicaciones impulsadas por inteligencia artificial están ganando una popularidad significativa. Integrar capacidades…\n\n* * *\n\n### Integración de Golang con la API de ChatGPT\n\n![](https://cdn-images-1.medium.com/max/800/0*Atm0sii4_bstXiSM.png)\n\nEn la era actual, las aplicaciones impulsadas por inteligencia artificial están ganando una popularidad significativa. Integrar capacidades de lenguaje natural en tus aplicaciones puede proporcionar una experiencia de usuario rica y dinámica. En este artículo, aprenderás cómo integrar Golang con la API de ChatGPT para aprovechar las poderosas funcionalidades del modelo de lenguaje de OpenAI.\n\n### ¿Por qué usar Golang con ChatGPT?\n\nGolang, conocido por su rendimiento y eficiencia, es ideal para construir aplicaciones de backend y servicios RESTful. Por otro lado, ChatGPT proporciona capacidades avanzadas de procesamiento del lenguaje natural (NLP). La integración de ambos puede llevar a la creación de aplicaciones que respondan inteligentemente a las consultas de los usuarios.\n\n### Prerrequisitos\n\nAntes de comenzar, asegúrate de tener lo siguiente:\n\n*   [Golang](https://golang.org/dl/) instalado en tu máquina.\n*   Una cuenta de OpenAI y una clave API. Puedes obtenerla registrándote en [OpenAI](https://www.openai.com/).\n\n### Paso 1: Configuración del Entorno\n\nPrimero, asegúrate de tener Go instalado. Puedes verificarlo ejecutando:\n\ngo version\n\nSi Go no está instalado, sigue las [instrucciones oficiales](https://golang.org/doc/install).\n\n### Paso 2: Crear un Proyecto Golang\n\nCrea un nuevo directorio para tu proyecto y navega a él:\n\nmkdir chatgpt-golang  \ncd chatgpt-golang\n\nInicializa un nuevo módulo Go:\n\ngo mod init chatgpt-golang\n\n### Paso 3: Instalar Dependencias\n\nUsaremos el paquete `net/http` de Go para hacer solicitudes HTTP. Además, instalaremos el paquete `encoding/json` para manejar la serialización JSON.\n\nNo se requiere una instalación separada para estos paquetes ya que vienen incluidos en la biblioteca estándar de Go.\n\n### Paso 4: Implementar la Llamada a la API de ChatGPT\n\nCrea un archivo llamado `main.go` y escribe el siguiente código:\n\npackage main  \n  \nimport (  \n \"bytes\"  \n \"encoding/json\"  \n \"fmt\"  \n \"net/http\"  \n \"os\"  \n)  \n  \n// Estructura para la solicitud a la API de ChatGPT  \ntype ChatGPTRequest struct {  \n Model    string \\`json:\"model\"\\`  \n Messages \\[\\]Message \\`json:\"messages\"\\`  \n}  \n  \n// Estructura para los mensajes en la solicitud  \ntype Message struct {  \n Role    string \\`json:\"role\"\\`  \n Content string \\`json:\"content\"\\`  \n}  \n  \n// Estructura para la respuesta de la API de ChatGPT  \ntype ChatGPTResponse struct {  \n Choices \\[\\]struct {  \n  Message Message \\`json:\"message\"\\`  \n } \\`json:\"choices\"\\`  \n}  \n  \nfunc main() {  \n // Clave API de OpenAI  \n apiKey := os.Getenv(\"OPENAI\\_API\\_KEY\")  \n if apiKey == \"\" {  \n  fmt.Println(\"Por favor, establece la variable de entorno OPENAI\\_API\\_KEY.\")  \n  return  \n }  \n  \n // URL de la API  \n apiURL := \"https://api.openai.com/v1/chat/completions\"  \n  \n // Crear la solicitud  \n requestBody := ChatGPTRequest{  \n  Model: \"gpt-4\",  \n  Messages: \\[\\]Message{  \n   {  \n    Role:    \"system\",  \n    Content: \"Eres un asistente útil.\",  \n   },  \n   {  \n    Role:    \"user\",  \n    Content: \"Hola, ¿cómo estás?\",  \n   },  \n  },  \n }  \n  \n // Convertir la solicitud a JSON  \n jsonRequest, err := json.Marshal(requestBody)  \n if err != nil {  \n  fmt.Printf(\"Error al convertir a JSON: %v\\\\n\", err)  \n  return  \n }  \n  \n // Hacer la solicitud HTTP  \n client := &http.Client{}  \n req, err := http.NewRequest(\"POST\", apiURL, bytes.NewBuffer(jsonRequest))  \n if err != nil {  \n  fmt.Printf(\"Error al crear la solicitud HTTP: %v\\\\n\", err)  \n  return  \n }  \n  \n req.Header.Set(\"Authorization\", \"Bearer \"+apiKey)  \n req.Header.Set(\"Content-Type\", \"application/json\")  \n  \n resp, err := client.Do(req)  \n if err != nil {  \n  fmt.Printf(\"Error al realizar la solicitud HTTP: %v\\\\n\", err)  \n  return  \n }  \n defer resp.Body.Close()  \n  \n // Leer la respuesta  \n var chatResponse ChatGPTResponse  \n err = json.NewDecoder(resp.Body).Decode(&chatResponse)  \n if err != nil {  \n  fmt.Printf(\"Error al decodificar la respuesta: %v\\\\n\", err)  \n  return  \n }  \n  \n // Mostrar la respuesta  \n fmt.Printf(\"Respuesta de ChatGPT: %s\\\\n\", chatResponse.Choices\\[0\\].Message.Content)  \n}\n\n### Explicación del Código\n\n*   **Estructuras de Datos**: Definimos estructuras para las solicitudes y respuestas que usamos para interactuar con la API.\n*   **Solicitud**: Creamos una solicitud HTTP POST que contiene el mensaje del usuario.\n*   **Respuesta**: Decodificamos la respuesta JSON en la estructura `ChatGPTResponse` y mostramos el contenido del primer mensaje de la respuesta.\n\n### Paso 5: Establecer la Clave API\n\nDebes establecer tu clave API de OpenAI como una variable de entorno. Puedes hacerlo temporalmente en la terminal:\n\nexport OPENAI\\_API\\_KEY=\"tu-clave-api\"\n\nO añadirlo a tu archivo de configuración de entorno (`.bashrc`, `.zshrc`, etc.) para que esté disponible en todas las sesiones.\n\n### Paso 6: Ejecutar el Proyecto\n\nCorre el siguiente comando para ejecutar tu programa:\n\ngo run main.go\n\n### Conclusión\n\nIntegrar Golang con la API de ChatGPT es un proceso directo que puede enriquecer tus aplicaciones con funcionalidades avanzadas de NLP. Con esta integración, puedes construir chatbots, asistentes virtuales, y muchas otras aplicaciones que se beneficien de respuestas generadas por IA.\n\nExplora más sobre lo que puedes hacer con ChatGPT y personaliza las solicitudes para adaptarlas a tus necesidades específicas.\n\n¡Feliz codificación!\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [June 23, 2024](https://medium.com/p/4cefdc0d6a62).\n\n[Canonical link](https://medium.com/@devjaime/integraci%C3%B3n-de-golang-con-la-api-de-chatgpt-4cefdc0d6a62)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"integración-de-golang-con-la-api-de-chatgpt","text":"Integración de Golang con la API de ChatGPT"},{"depth":3,"slug":"integración-de-golang-con-la-api-dechatgpt","text":"Integración de Golang con la API de ChatGPT"},{"depth":3,"slug":"por-qué-usar-golang-conchatgpt","text":"¿Por qué usar Golang con ChatGPT?"},{"depth":3,"slug":"prerrequisitos","text":"Prerrequisitos"},{"depth":3,"slug":"paso-1-configuración-delentorno","text":"Paso 1: Configuración del Entorno"},{"depth":3,"slug":"paso-2-crear-un-proyectogolang","text":"Paso 2: Crear un Proyecto Golang"},{"depth":3,"slug":"paso-3-instalar-dependencias","text":"Paso 3: Instalar Dependencias"},{"depth":3,"slug":"paso-4-implementar-la-llamada-a-la-api-dechatgpt","text":"Paso 4: Implementar la Llamada a la API de ChatGPT"},{"depth":3,"slug":"explicación-delcódigo","text":"Explicación del Código"},{"depth":3,"slug":"paso-5-establecer-la-claveapi","text":"Paso 5: Establecer la Clave API"},{"depth":3,"slug":"paso-6-ejecutar-elproyecto","text":"Paso 6: Ejecutar el Proyecto"},{"depth":3,"slug":"conclusión","text":"Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
