/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h2 id=\"Ô∏è-introduction\">üõ§Ô∏è Introduction</h2>\n<p>Sometimes what seems like a simple ‚Äúconnect your app to the database‚Äù turns into an epic story of errors, frustration, coffee, and real technical learning. In this journey, I‚Äôll walk you step by step through how I connected a Go application to an Oracle XE database inside a Docker container and how I finally debugged it from VSCode‚Ä¶ on an M1 Mac.</p>\n<hr>\n<h2 id=\"-the-challenge\">üöß The challenge</h2>\n<p>My goal was simple:</p>\n<ul>\n<li>Connect Go to Oracle XE</li>\n<li>Use Docker to avoid local installations</li>\n<li>Debug the Go application with Delve from VSCode</li>\n</ul>\n<p>But if you‚Äôre using a Mac with an M1 chip, you already know things aren‚Äôt always straightforward‚Ä¶</p>\n<hr>\n<h2 id=\"-first-steps\">üß± First steps</h2>\n<p>I started by pulling the official image <code>gvenzl/oracle-xe:21-slim</code>. I knew Oracle XE doesn‚Äôt have native ARM64 support for Docker, so I had to run it as AMD64 using Rosetta or Colima.</p>\n<p>Here was my first <code>docker-compose.yml</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">services</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  oracle-xe</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    image</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">gvenzl/oracle-xe:21-slim</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    ports</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">\"1521:1521\"</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    environment</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      ORACLE_PASSWORD</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">test123</span></span></code></pre>\n<p>Everything seemed fine‚Ä¶ until it wasn‚Äôt.</p>\n<hr>\n<h2 id=\"-first-errors\">üî• First errors</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">ORA-12547:</span><span style=\"color:#9ECBFF\"> TNS:lost</span><span style=\"color:#9ECBFF\"> contact</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">DPI-1047:</span><span style=\"color:#9ECBFF\"> Cannot</span><span style=\"color:#9ECBFF\"> locate</span><span style=\"color:#9ECBFF\"> a</span><span style=\"color:#9ECBFF\"> 64-bit</span><span style=\"color:#9ECBFF\"> Oracle</span><span style=\"color:#9ECBFF\"> Client</span><span style=\"color:#9ECBFF\"> library</span></span></code></pre>\n<p>I found out that Go needs the Oracle Instant Client installed and linked at runtime to connect to Oracle databases.</p>\n<p>So, I had to write a Dockerfile that included Instant Client:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>COPY instantclient-basiclite-linux.x64-19.27.0.0.0dbru.zip /opt/oracle/instantclient.zip</span></span>\n<span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span>ENV LD_LIBRARY_PATH=/opt/oracle/instantclient</span></span></code></pre>\n<p>But wait! The ZIP file couldn‚Äôt be downloaded directly with <code>curl</code>. Oracle requires login to access it.</p>\n<hr>\n<h2 id=\"-tuning-tweaking-fixing\">üîß Tuning, tweaking, fixing‚Ä¶</h2>\n<p>I added Delve to debug:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>RUN go install github.com/go-delve/delve/cmd/dlv@latest</span></span></code></pre>\n<p>Then I configured VSCode‚Äôs <code>launch.json</code> for remote attach:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"go\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"request\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"attach\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"remotePath\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"/app\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"port\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">40000</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"host\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"localhost\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>And it worked!‚Ä¶ theoretically. When I launched the app with:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">CMD</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"dlv\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"exec\",</span><span style=\"color:#9ECBFF\"> \"./app\",</span><span style=\"color:#9ECBFF\"> \"--headless\",</span><span style=\"color:#9ECBFF\"> \"--listen=:40000\"]</span></span></code></pre>\n<p>I got the dreaded:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">could</span><span style=\"color:#9ECBFF\"> not</span><span style=\"color:#9ECBFF\"> launch</span><span style=\"color:#9ECBFF\"> process:</span><span style=\"color:#9ECBFF\"> open</span><span style=\"color:#9ECBFF\"> /app/app:</span><span style=\"color:#9ECBFF\"> no</span><span style=\"color:#9ECBFF\"> such</span><span style=\"color:#9ECBFF\"> file</span><span style=\"color:#9ECBFF\"> or</span><span style=\"color:#9ECBFF\"> directory</span></span></code></pre>\n<p>The reason? I forgot to build the binary. I added <code>go build -o app .</code> in the Dockerfile and it finally worked.</p>\n<hr>\n<h2 id=\"-testing-the-connection\">üß™ Testing the connection</h2>\n<p>My Go code included the following connection string:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">dsn </span><span style=\"color:#F97583\">:=</span><span style=\"color:#9ECBFF\"> \"system/test123@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oracle-xe)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)))\"</span></span></code></pre>\n<p>Using <code>localhost</code> didn‚Äôt work inside the container, but <code>oracle-xe</code> (the Docker service name) did.</p>\n<p>My test query:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">db.</span><span style=\"color:#B392F0\">Query</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"SELECT 1 FROM DUAL\"</span><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<p>üéâ And it worked!</p>\n<hr>\n<h2 id=\"-key-takeaways\">üí° Key takeaways</h2>\n<ul>\n<li>On Apple Silicon, always use <code>--platform linux/amd64</code></li>\n<li>You can‚Äôt download Oracle Instant Client ZIPs with <code>curl</code> ‚Äî do it manually</li>\n<li>Your binary must exist at <code>/app/app</code> for Delve to debug</li>\n<li>Use service names like <code>oracle-xe</code> instead of <code>localhost</code> in Docker</li>\n</ul>\n<hr>\n<h2 id=\"-final-result\">‚úÖ Final result</h2>\n<p>My Go app connected successfully to Oracle XE in Docker and I was able to debug it line by line in VSCode with Delve.</p>\n<p>It took way longer than expected. I faced obscure errors. But now, I can reproduce this setup in minutes‚Ä¶ and so can you.</p>\n<hr>\n<h2 id=\"-want-the-full-working-repo\">üß† Want the full working repo?</h2>\n<p>Reach out or check out the packaged version of this project with Docker Compose + Oracle XE + Go + Delve + VSCode Debugging.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"üìò Technical Journey: How I Connected Go to Oracle XE in Docker and Debugged It in VSCode (Apple Silicon)","description":"A detailed and real story about the process, errors, solutions, and learnings of connecting a Go app to Oracle XE in Docker and debugging it from VSCode on a Mac M1.","tags":["Go","Oracle","Docker","Story","VSCode","Apple Silicon"],"time":45,"timestamp":"2025-05-09T00:00:00-0400","featured":true,"filename":"2025-05-09_go-oracle-docker-debug-story-en"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-05-09_go-oracle-docker-debug-story-en.md";
				const url = "/blog/2025-05-09_go-oracle-docker-debug-story-en";
				function rawContent() {
					return "   \n                                        \n                                                                                                                  \n                                                                                                                                                                                    \n                                                                    \n        \n                                     \n              \n                                                      \n   \n\n## üõ§Ô∏è Introduction\n\nSometimes what seems like a simple \"connect your app to the database\" turns into an epic story of errors, frustration, coffee, and real technical learning. In this journey, I‚Äôll walk you step by step through how I connected a Go application to an Oracle XE database inside a Docker container and how I finally debugged it from VSCode‚Ä¶ on an M1 Mac.\n\n---\n\n## üöß The challenge\n\nMy goal was simple:\n\n- Connect Go to Oracle XE\n- Use Docker to avoid local installations\n- Debug the Go application with Delve from VSCode\n\nBut if you're using a Mac with an M1 chip, you already know things aren't always straightforward‚Ä¶\n\n---\n\n## üß± First steps\n\nI started by pulling the official image `gvenzl/oracle-xe:21-slim`. I knew Oracle XE doesn't have native ARM64 support for Docker, so I had to run it as AMD64 using Rosetta or Colima.\n\nHere was my first `docker-compose.yml`:\n\n```yaml\nservices:\n  oracle-xe:\n    image: gvenzl/oracle-xe:21-slim\n    ports:\n      - \"1521:1521\"\n    environment:\n      ORACLE_PASSWORD: test123\n```\n\nEverything seemed fine‚Ä¶ until it wasn‚Äôt.\n\n---\n\n## üî• First errors\n\n```bash\nORA-12547: TNS:lost contact\nDPI-1047: Cannot locate a 64-bit Oracle Client library\n```\n\nI found out that Go needs the Oracle Instant Client installed and linked at runtime to connect to Oracle databases.\n\nSo, I had to write a Dockerfile that included Instant Client:\n\n```Dockerfile\nCOPY instantclient-basiclite-linux.x64-19.27.0.0.0dbru.zip /opt/oracle/instantclient.zip\n...\nENV LD_LIBRARY_PATH=/opt/oracle/instantclient\n```\n\nBut wait! The ZIP file couldn‚Äôt be downloaded directly with `curl`. Oracle requires login to access it.\n\n---\n\n## üîß Tuning, tweaking, fixing‚Ä¶\n\nI added Delve to debug:\n\n```Dockerfile\nRUN go install github.com/go-delve/delve/cmd/dlv@latest\n```\n\nThen I configured VSCode‚Äôs `launch.json` for remote attach:\n\n```json\n{\n  \"type\": \"go\",\n  \"request\": \"attach\",\n  \"remotePath\": \"/app\",\n  \"port\": 40000,\n  \"host\": \"localhost\"\n}\n```\n\nAnd it worked!... theoretically. When I launched the app with:\n\n```bash\nCMD [\"dlv\", \"exec\", \"./app\", \"--headless\", \"--listen=:40000\"]\n```\n\nI got the dreaded:\n\n```bash\ncould not launch process: open /app/app: no such file or directory\n```\n\nThe reason? I forgot to build the binary. I added `go build -o app .` in the Dockerfile and it finally worked.\n\n---\n\n## üß™ Testing the connection\n\nMy Go code included the following connection string:\n\n```go\ndsn := \"system/test123@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oracle-xe)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)))\"\n```\n\nUsing `localhost` didn‚Äôt work inside the container, but `oracle-xe` (the Docker service name) did.\n\nMy test query:\n\n```go\ndb.Query(\"SELECT 1 FROM DUAL\")\n```\n\nüéâ And it worked!\n\n---\n\n## üí° Key takeaways\n\n- On Apple Silicon, always use `--platform linux/amd64`\n- You can‚Äôt download Oracle Instant Client ZIPs with `curl` ‚Äî do it manually\n- Your binary must exist at `/app/app` for Delve to debug\n- Use service names like `oracle-xe` instead of `localhost` in Docker\n\n---\n\n## ‚úÖ Final result\n\nMy Go app connected successfully to Oracle XE in Docker and I was able to debug it line by line in VSCode with Delve.\n\nIt took way longer than expected. I faced obscure errors. But now, I can reproduce this setup in minutes‚Ä¶ and so can you.\n\n---\n\n## üß† Want the full working repo?\n\nReach out or check out the packaged version of this project with Docker Compose + Oracle XE + Go + Delve + VSCode Debugging.\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"Ô∏è-introduction","text":"üõ§Ô∏è Introduction"},{"depth":2,"slug":"-the-challenge","text":"üöß The challenge"},{"depth":2,"slug":"-first-steps","text":"üß± First steps"},{"depth":2,"slug":"-first-errors","text":"üî• First errors"},{"depth":2,"slug":"-tuning-tweaking-fixing","text":"üîß Tuning, tweaking, fixing‚Ä¶"},{"depth":2,"slug":"-testing-the-connection","text":"üß™ Testing the connection"},{"depth":2,"slug":"-key-takeaways","text":"üí° Key takeaways"},{"depth":2,"slug":"-final-result","text":"‚úÖ Final result"},{"depth":2,"slug":"-want-the-full-working-repo","text":"üß† Want the full working repo?"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
