/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"flutter-cloud-aws-articulo-en-español-parte-1-de-3\">Flutter Cloud AWS articulo en español parte 1 de 3</h1>\n<p>Este articulo es parte de una serie de post sobre servicios Cloud y Flutter en el cual empezare con AWS e intentare ir documentando lo más…</p>\n<hr>\n<h3 id=\"flutter-cloud-aws-articulo-en-español-parte-1-de3\">Flutter Cloud AWS articulo en español parte 1 de 3</h3>\n<p>Este articulo es parte de una serie de post sobre servicios Cloud y Flutter en el cual empezare con AWS e intentare ir documentando lo más posible como poder conectarnos a los servicios de la nube de AWS</p>\n<p>La división de este articulo se centrara en conceptos y teoría. Como configuración del backend parte 1 y 2.</p>\n<p>En la tercera parte revisaremos como conectarlos con el api rest de los servicios AWS dentro de flutter.</p>\n<p>Este articulo empezó la semana del 16/07/2019 y pretendo terminar la tercera parte 31/07/2019 teniendo un articulo cada semana.</p>\n<p>Cabe mencionar que soy muy nuevo en los servicios Cloud y mi intención es abordarlo del punto de vista del desarrollador y su implementación en casos medianamente reales.</p>\n<p>La problemática</p>\n<p>¿Qué pasa si nuestra organización no quiere usar Firebase? Hmmm</p>\n<p><strong>Este artículo se infiltra en el mundo de Amazon, típicamente</strong> <a href=\"http://aws.amazon.com/\"><strong>AWS</strong></a> <strong>…</strong></p>\n<p>Para la programación de esta demo, hemos utilizado</p>\n<ol>\n<li>Amazon s3 Bucket</li>\n<li>Funciones de Amazon Lambda</li>\n<li>Obviamente Flutter.</li>\n</ol>\n<p>Explicación de conceptos</p>\n<p>¿Que es Amazon s3 Bucket?.</p>\n<h3 id=\"conceptos-básicos-de-amazons3\">Conceptos básicos de Amazon S3</h3>\n<p>Para sacar el máximo partido posible a Amazon S3, necesita conocer algunos conceptos básicos. Amazon S3 almacena datos a modo de objetos dentro de <strong>buckets(cubo es lo mismo para el concepto)</strong>. Un objeto se compone de un archivo y, de forma opcional, de cualquier metadato que describa dicho archivo.</p>\n<p>Para almacenar un objeto en Amazon S3, debe cargar en un <strong>bucket</strong> el archivo que quiera almacenar. Al cargar un archivo, puede configurar permisos en el objeto y cualquier tipo de metadatos.</p>\n<p>¿Que son los buckets?</p>\n<p>Los <strong>buckets</strong> son contenedores de objetos. Puede tener uno o más buckets. Para cada bucket, podrá controlar el acceso (quién puede crear, eliminar y enumerar objetos del bucket), consultar los logs de acceso al bucket y sus objetos y elegir la región geográfica en la que Amazon S3 almacenará el bucket y su contenido.</p>\n<p>¿Que son las funciones de Amazon Lambda?</p>\n<p>AWS Lambda es un servicio informático que permite ejecutar código sin aprovisionar ni administrar servidores. <strong>AWS Lambda</strong> ejecuta el código solo cuando es necesario, y se escala de manera automática, pasando de pocas solicitudes al día a miles por segundo. Solo se paga el tiempo de computación que se consume; no hay ningún cargo mientras el código no se ejecuta. Con <strong>AWS Lambda</strong>, puede ejecutar código para prácticamente cualquier tipo de aplicación o servicio de backend, y sin que se requiera ningún tipo de administración. AWS Lambda ejecuta el código en una infraestructura informática de alta disponibilidad y ejecuta la administración integral de los recursos informáticos, incluido el mantenimiento del servidor y del sistema operativo, el aprovisionamiento de capacidad y el escalado automático, así como la monitorización y los registros. Lo único que tiene que hacer es suministrar el código en uno de los <a href=\"https://docs.aws.amazon.com/es_es/lambda/latest/dg/lambda-runtimes.html\">lenguajes que admite AWS Lambda</a>.</p>\n<h4 id=\"paso-1\">Paso 1:</h4>\n<p>Crear cuenta en <a href=\"https://aws.amazon.com/\"><strong>Amazon Developer Console</strong></a> <strong>…</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*S7L59CH0olEZQ5x2Lv_Z3g.png\" alt=\"\"></p>\n<h4 id=\"paso-2\">Paso 2:</h4>\n<p>Recomiendo crear una cuenta gratuita</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Qrud9sQR7wEiFtJC63kTsQ.png\" alt=\"\"></p>\n<p>Buscar <strong>s3</strong> en la <strong>consola de administración …</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xvCaKziUlOamV191Pl2oeQ.png\" alt=\"\"></p>\n<p><strong>Crea un cubo según tu elección …</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*eU4NnV6m3OYKWw39DDTqlg.png\" alt=\"\"></p>\n<blockquote>\n<p><em>Por defecto, el cubo no es público, así que tenemos que hacerlo …</em></p>\n</blockquote>\n<p>Para realizar esta acción debes desmarcar la casilla de verificación que se muestra en la imagen a continuación</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*58CKm7plyopZKeuyy8vf4Q.png\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*0gyH6ORcvqSalwdQlx6dVA.png\" alt=\"\"></p>\n<p>A continuación, vaya a la <strong>política de Bucket</strong> … y pegar a continuación</p>\n<p>{<br>\n“Version”: “2012-10-17”,<br>\n“Statement”: [<br>\n{<br>\n“Sid”: “Stmt1405592139000”,<br>\n“Effect”: “Allow”,<br>\n“Principal”: ”*”,<br>\n“Action”: “s3:*”,<br>\n“Resource”: [<br>\n“arn:aws:s3:::nombredesucubo/*”,<br>\n“arn:aws:s3:::nombredesucubo”<br>\n]<br>\n}<br>\n]<br>\n}</p>\n<blockquote>\n<p><em>NOTA: Reemplace</em> <strong><em>‘NOMBRE DE SU CUBO’</em></strong> <em>por su nombre de cubo …</em></p>\n</blockquote>\n<blockquote>\n<p>Esto nos permite realizar operaciones de cualquier tipo en nuestro cubo …</p>\n</blockquote>\n<p>Advertencia este es solo un caso de demostración donde si quieres realizar una implementación en producción deberás revisar tus políticas de seguridad.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*vOJYbSEolyx6zrsJU1nSLg.png\" alt=\"\"></p>\n<h4 id=\"paso-3\">Paso 3 :</h4>\n<p>Necesitamos hacer apis para realizar operaciones en el cubo.</p>\n<p>Para hacer apis, AWS ofrece <a href=\"https://aws.amazon.com/lambda/\"><strong>Lambda</strong></a> similar a <a href=\"https://cloud.google.com/functions/\"><strong>Cloud Functions</strong></a> …</p>\n<p>Vaya a la <strong>consola de AWS</strong> y busque <strong>Lambda</strong> ..</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*pA6eVKl06njlEI0RK1YG9Q.png\" alt=\"\"></p>\n<h3 id=\"cómo-escribir-y-desplegar-lambdas\">Cómo escribir y desplegar Lambdas …</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*qBsj7DrmQ7F1Fjm3UbuoIQ.png\" alt=\"\"></p>\n<ol>\n<li>Instalar <a href=\"https://www.npmjs.com/package/serverless\"><strong>s</strong></a><strong>erverless :</strong> este es un paquete nodeJS que nos ayuda a escribir Lambdas e implementarlas en AWS-</li>\n</ol>\n<p>npm install -g serverless</p>\n<p>nota si no estas seguro de tener instalado node en tu maquina local verificarlo a través del siguiente comando node — version.</p>\n<p>Si la consola dice que no reconoce el comando es dado que no lo tienes instalado y debes proceder a instalar node.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-FvPdpESGPy2Ak1C0XZ9IQ.png\" alt=\"\"></p>\n<p>Nota importante intenta siempre instalar la versión estable LTS recomendada para la mayoría, debido a que esta tiene características probadas.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*eBUi3pwfy8Bfaw5WaAZQSA.png\" alt=\"\"></p>\n<p>una vez instalado debiera aparecer la versión correspondiente con node — version</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*D5S5g5y39poNV--DwI0rdw.png\" alt=\"\"></p>\n<p>npm install -g serverless</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kwvDLR2lPcnfCq3u5CGmjA.png\" alt=\"\"></p>\n<p><strong>2. Configure sus credenciales de AWS</strong></p>\n<p>Lo primero deben irse a gestión de identidad y acceso “IAM”</p>\n<p>¿Que es IAM?</p>\n<p><strong>AWS</strong> Identity and Access Management (<strong>IAM</strong>) es un servicio web que le ayuda a controlar de forma segura el acceso a los recursos de <strong>AWS</strong>. Utilice <strong>IAM</strong> para controlar quién está autenticado (ha iniciado sesión) y autorizado (tiene permisos) para utilizar recursos.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*OW9V5I0jx-AyXsVRBx_YXw.png\" alt=\"\"></p>\n<p>Una vez dentro dirigirte al menú de usuario</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*q4MzMDYvoEzBFQ6JsGMxJw.png\" alt=\"\"></p>\n<p>En donde crearemos un nuevo usuario.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*pmcvP3FWsWPwdaAoJvK64Q.png\" alt=\"\"></p>\n<p>Como vemos en la imagen otorgaremos un nombre de usuario y en tipo de acceso, solo marcaremos “Acceso mediante programación” el cual nos otorgara una clave de acceso secreta.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*AbSF2jn2b1erQsIXTuOl7g.png\" alt=\"\"></p>\n<p>En el wizard nos fijaremos en lo siguiente otorgar permisos de Administrador para efectos de prueba de recurso y en establecer un limite de permisos</p>\n<p>“Crear “user” sin un limite de permisos.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*i3BeXglhZlvQNzWd_1KVpw.png\" alt=\"\"></p>\n<p>Al crear el usuario podrás ver la clave de acceso secreta de 2 formas, descargando el archivo .csv y teniéndolo localmente en tu PC. (recuerda mantenerlos a mano ya que lo ocuparemos dentro de poco).</p>\n<p><strong>3. Configure sus credenciales de AWS en su pc local con npm serverless</strong></p>\n<p>una vez en tu equipo local debes ejecutar el siguiente comando en la terminal</p>\n<p>serverless config credentials —provider aws —key ‘AWS Key publica’ —secret ‘AWS Key privada’</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*lfq6Eb4qWiyAz_uU53JnYw.png\" alt=\"\"></p>\n<p><strong>3. Crea un proyecto (sin servidor)</strong></p>\n<p>Recordemos los requisitos antes de continuar</p>\n<h3 id=\"pre-requisitos\">Pre-requisitos</h3>\n<ol>\n<li>Node.js <code>v6.5.0 o posterior</code>.</li>\n<li>CLI serverless <code>v1.9.0</code>o posterior. Puede ejecutar <code>npm install -g serverless</code>para instalarlo.</li>\n<li>Una cuenta de AWS. Si aún no tiene uno, puede inscribirse para una <a href=\"https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/\">prueba gratuita</a> que incluye 1 millón de solicitudes Lambda gratuitas por mes.</li>\n<li>Configure sus <a href=\"https://serverless.com/framework/docs/providers/aws/guide/credentials\">credenciales de proveedor</a> -> <a href=\"https://www.youtube.com/watch?v=KngM5bfpttA\">Vea el video sobre la configuración de credenciales</a></li>\n</ol>\n<h3 id=\"crear-un-nuevoservicio\">Crear un nuevo servicio</h3>\n<p>Cree un nuevo servicio utilizando la plantilla Node.js, especificando un nombre único y una ruta opcional para su servicio.</p>\n<p>#   Cree un nuevo servicio / proyecto</p>\n<p>serverless create —template aws-nodejs</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*IVscuHxJHKWyPpQ5h_Zmkg.png\" alt=\"\"></p>\n<p><code>handler.js -></code> Donde escribes tu lógica<code>...</code></p>\n<p><code>serverless.yml -></code> Donde describe tu deploy<code>...</code></p>\n<p>functions:</p>\n<p>getAllFiles:<br>\nhandler: handler.getAllFiles<br>\nevents:<br>\n- http:<br>\npath: /getAllFiles<br>\nmethod: get</p>\n<p>uploadFile:<br>\nhandler: handler.uploadFile<br>\nevents:<br>\n- http:<br>\npath: /uploadFile<br>\nmethod: post</p>\n<blockquote>\n<p><em>Por ejemplo,</em> <strong><em>obtener</em></strong> <em>y</em> <strong><em>publicar los</em></strong> <em>puntos finales de url …</em></p>\n</blockquote>\n<p>En el archivo handler.js …</p>\n<p><em>Lógica para obtener todos los archivos, desde el almacenamiento de AWS .</em></p>\n<p>module.exports.getAllFiles = async (event, context) => {</p>\n<p>let files = [];</p>\n<p>let params = { <br>\n Bucket: process.env.BUCKET, / * required * / <br>\n Prefix: ‘upload’ <br>\n };</p>\n<p>let result = await s3.listObjectsV2 (params) .promise ();</p>\n<p>dejar datos = resultado. contenido; <br>\n Object.keys (data) .forEach ((key, index) => {</p>\n<p>let fileObject = data [key];</p>\n<p>files.push (`https: // $ {result.Name} .s3.us-east-2.amazonaws .com / $ {fileObject.Key} `); <br>\n });</p>\n<p>return { <br>\n statusCode: 200, <br>\n body: JSON.stringify ({ <br>\n files: files, <br>\n bucketName: `$ {result.Name}`, <br>\n subFolder: `$ {result.Prefix}`, <br>\n }, null, 2), <br>\n }; <br>\n};</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*3guQ0UUU_LnLucPOWws8dw.png\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*aaqdsXnJA5A4PeO8bPfivA.png\" alt=\"\"></p>\n<p>Espero sea de su interés hasta este momento.</p>\n<p><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\" title=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"><strong>Donate to devjaime</strong><br>\n_Help support devjaime by donating or sharing with your friends._www.paypal.com</a><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/ec31304ed06c\">July 17, 2019</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/flutter-cloud-aws-articulo-en-espa%C3%B1ol-parte-1-de-3-ec31304ed06c\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Flutter Cloud AWS articulo en español parte 1 de 3","description":"","tags":["code","Flutter","Cloud","AWS"],"time":4,"featured":true,"timestamp":"2019-07-17T12:20:31-0300","filename":"2019-07-17_Flutter-Cloud-AWS-articulo-en-espa-ol-parte-1-de-3-ec31304ed06c"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2019-07-17_Flutter-Cloud-AWS-articulo-en-espa-ol-parte-1-de-3-ec31304ed06c.md";
				const url = "/blog/2019-07-17_Flutter-Cloud-AWS-articulo-en-espa-ol-parte-1-de-3-ec31304ed06c";
				function rawContent() {
					return "   \n                                        \n                                                           \n               \n                                         \n       \n              \n                                     \n                                                                                      \n   \n\nFlutter Cloud AWS articulo en español parte 1 de 3\n==================================================\n\nEste articulo es parte de una serie de post sobre servicios Cloud y Flutter en el cual empezare con AWS e intentare ir documentando lo más…\n\n* * *\n\n### Flutter Cloud AWS articulo en español parte 1 de 3\n\nEste articulo es parte de una serie de post sobre servicios Cloud y Flutter en el cual empezare con AWS e intentare ir documentando lo más posible como poder conectarnos a los servicios de la nube de AWS\n\nLa división de este articulo se centrara en conceptos y teoría. Como configuración del backend parte 1 y 2.\n\nEn la tercera parte revisaremos como conectarlos con el api rest de los servicios AWS dentro de flutter.\n\nEste articulo empezó la semana del 16/07/2019 y pretendo terminar la tercera parte 31/07/2019 teniendo un articulo cada semana.\n\nCabe mencionar que soy muy nuevo en los servicios Cloud y mi intención es abordarlo del punto de vista del desarrollador y su implementación en casos medianamente reales.\n\nLa problemática\n\n¿Qué pasa si nuestra organización no quiere usar Firebase? Hmmm\n\n**Este artículo se infiltra en el mundo de Amazon, típicamente** [**AWS**](http://aws.amazon.com/) **…**\n\nPara la programación de esta demo, hemos utilizado\n\n1.  Amazon s3 Bucket\n2.  Funciones de Amazon Lambda\n3.  Obviamente Flutter.\n\nExplicación de conceptos\n\n¿Que es Amazon s3 Bucket?.\n\n### Conceptos básicos de Amazon S3\n\nPara sacar el máximo partido posible a Amazon S3, necesita conocer algunos conceptos básicos. Amazon S3 almacena datos a modo de objetos dentro de **buckets(cubo es lo mismo para el concepto)**. Un objeto se compone de un archivo y, de forma opcional, de cualquier metadato que describa dicho archivo.\n\nPara almacenar un objeto en Amazon S3, debe cargar en un **bucket** el archivo que quiera almacenar. Al cargar un archivo, puede configurar permisos en el objeto y cualquier tipo de metadatos.\n\n¿Que son los buckets?\n\nLos **buckets** son contenedores de objetos. Puede tener uno o más buckets. Para cada bucket, podrá controlar el acceso (quién puede crear, eliminar y enumerar objetos del bucket), consultar los logs de acceso al bucket y sus objetos y elegir la región geográfica en la que Amazon S3 almacenará el bucket y su contenido.\n\n¿Que son las funciones de Amazon Lambda?\n\nAWS Lambda es un servicio informático que permite ejecutar código sin aprovisionar ni administrar servidores. **AWS Lambda** ejecuta el código solo cuando es necesario, y se escala de manera automática, pasando de pocas solicitudes al día a miles por segundo. Solo se paga el tiempo de computación que se consume; no hay ningún cargo mientras el código no se ejecuta. Con **AWS Lambda**, puede ejecutar código para prácticamente cualquier tipo de aplicación o servicio de backend, y sin que se requiera ningún tipo de administración. AWS Lambda ejecuta el código en una infraestructura informática de alta disponibilidad y ejecuta la administración integral de los recursos informáticos, incluido el mantenimiento del servidor y del sistema operativo, el aprovisionamiento de capacidad y el escalado automático, así como la monitorización y los registros. Lo único que tiene que hacer es suministrar el código en uno de los [lenguajes que admite AWS Lambda](https://docs.aws.amazon.com/es_es/lambda/latest/dg/lambda-runtimes.html).\n\n#### Paso 1:\n\nCrear cuenta en [**Amazon Developer Console**](https://aws.amazon.com/) **…**\n\n![](https://cdn-images-1.medium.com/max/800/1*S7L59CH0olEZQ5x2Lv_Z3g.png)\n\n#### Paso 2:\n\nRecomiendo crear una cuenta gratuita\n\n![](https://cdn-images-1.medium.com/max/800/1*Qrud9sQR7wEiFtJC63kTsQ.png)\n\nBuscar **s3** en la **consola de administración …**\n\n![](https://cdn-images-1.medium.com/max/800/1*xvCaKziUlOamV191Pl2oeQ.png)\n\n**Crea un cubo según tu elección …**\n\n![](https://cdn-images-1.medium.com/max/800/1*eU4NnV6m3OYKWw39DDTqlg.png)\n\n> _Por defecto, el cubo no es público, así que tenemos que hacerlo …_\n\nPara realizar esta acción debes desmarcar la casilla de verificación que se muestra en la imagen a continuación\n\n![](https://cdn-images-1.medium.com/max/800/1*58CKm7plyopZKeuyy8vf4Q.png)\n\n![](https://cdn-images-1.medium.com/max/800/1*0gyH6ORcvqSalwdQlx6dVA.png)\n\nA continuación, vaya a la **política de Bucket** … y pegar a continuación\n\n{  \n    \"Version\": \"2012-10-17\",  \n    \"Statement\": \\[  \n        {  \n            \"Sid\": \"Stmt1405592139000\",  \n            \"Effect\": \"Allow\",  \n            \"Principal\": \"\\*\",  \n            \"Action\": \"s3:\\*\",  \n            \"Resource\": \\[  \n                \"arn:aws:s3:::nombredesucubo/\\*\",  \n                \"arn:aws:s3:::nombredesucubo\"  \n            \\]  \n        }  \n    \\]  \n}\n\n> _NOTA: Reemplace_ **_‘NOMBRE DE SU CUBO’_** _por su nombre de cubo …_\n\n> Esto nos permite realizar operaciones de cualquier tipo en nuestro cubo …\n\nAdvertencia este es solo un caso de demostración donde si quieres realizar una implementación en producción deberás revisar tus políticas de seguridad.\n\n![](https://cdn-images-1.medium.com/max/800/1*vOJYbSEolyx6zrsJU1nSLg.png)\n\n#### Paso 3 :\n\nNecesitamos hacer apis para realizar operaciones en el cubo.\n\nPara hacer apis, AWS ofrece [**Lambda**](https://aws.amazon.com/lambda/) similar a [**Cloud Functions**](https://cloud.google.com/functions/) …\n\nVaya a la **consola de AWS** y busque **Lambda** ..\n\n![](https://cdn-images-1.medium.com/max/800/1*pA6eVKl06njlEI0RK1YG9Q.png)\n\n### Cómo escribir y desplegar Lambdas …\n\n![](https://cdn-images-1.medium.com/max/800/1*qBsj7DrmQ7F1Fjm3UbuoIQ.png)\n\n1.  Instalar [**s**](https://www.npmjs.com/package/serverless)**erverless :** este es un paquete nodeJS que nos ayuda a escribir Lambdas e implementarlas en AWS-\n\nnpm install -g serverless\n\nnota si no estas seguro de tener instalado node en tu maquina local verificarlo a través del siguiente comando node — version.\n\nSi la consola dice que no reconoce el comando es dado que no lo tienes instalado y debes proceder a instalar node.\n\n![](https://cdn-images-1.medium.com/max/800/1*-FvPdpESGPy2Ak1C0XZ9IQ.png)\n\nNota importante intenta siempre instalar la versión estable LTS recomendada para la mayoría, debido a que esta tiene características probadas.\n\n![](https://cdn-images-1.medium.com/max/800/1*eBUi3pwfy8Bfaw5WaAZQSA.png)\n\nuna vez instalado debiera aparecer la versión correspondiente con node — version\n\n![](https://cdn-images-1.medium.com/max/800/1*D5S5g5y39poNV--DwI0rdw.png)\n\nnpm install -g serverless\n\n![](https://cdn-images-1.medium.com/max/800/1*kwvDLR2lPcnfCq3u5CGmjA.png)\n\n**2\\. Configure sus credenciales de AWS**\n\nLo primero deben irse a gestión de identidad y acceso “IAM”\n\n¿Que es IAM?\n\n**AWS** Identity and Access Management (**IAM**) es un servicio web que le ayuda a controlar de forma segura el acceso a los recursos de **AWS**. Utilice **IAM** para controlar quién está autenticado (ha iniciado sesión) y autorizado (tiene permisos) para utilizar recursos.\n\n![](https://cdn-images-1.medium.com/max/800/1*OW9V5I0jx-AyXsVRBx_YXw.png)\n\nUna vez dentro dirigirte al menú de usuario\n\n![](https://cdn-images-1.medium.com/max/800/1*q4MzMDYvoEzBFQ6JsGMxJw.png)\n\nEn donde crearemos un nuevo usuario.\n\n![](https://cdn-images-1.medium.com/max/800/1*pmcvP3FWsWPwdaAoJvK64Q.png)\n\nComo vemos en la imagen otorgaremos un nombre de usuario y en tipo de acceso, solo marcaremos “Acceso mediante programación” el cual nos otorgara una clave de acceso secreta.\n\n![](https://cdn-images-1.medium.com/max/800/1*AbSF2jn2b1erQsIXTuOl7g.png)\n\nEn el wizard nos fijaremos en lo siguiente otorgar permisos de Administrador para efectos de prueba de recurso y en establecer un limite de permisos\n\n“Crear “user” sin un limite de permisos.\n\n![](https://cdn-images-1.medium.com/max/800/1*i3BeXglhZlvQNzWd_1KVpw.png)\n\nAl crear el usuario podrás ver la clave de acceso secreta de 2 formas, descargando el archivo .csv y teniéndolo localmente en tu PC. (recuerda mantenerlos a mano ya que lo ocuparemos dentro de poco).\n\n**3\\. Configure sus credenciales de AWS en su pc local con npm serverless**\n\nuna vez en tu equipo local debes ejecutar el siguiente comando en la terminal\n\nserverless config credentials --provider aws --key 'AWS Key publica' --secret 'AWS Key privada'\n\n![](https://cdn-images-1.medium.com/max/800/1*lfq6Eb4qWiyAz_uU53JnYw.png)\n\n**3\\. Crea un proyecto (sin servidor)**\n\nRecordemos los requisitos antes de continuar\n\n### Pre-requisitos\n\n1.  Node.js `v6.5.0 o posterior`.\n2.  CLI serverless `v1.9.0`o posterior. Puede ejecutar `npm install -g serverless`para instalarlo.\n3.  Una cuenta de AWS. Si aún no tiene uno, puede inscribirse para una [prueba gratuita](https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/) que incluye 1 millón de solicitudes Lambda gratuitas por mes.\n4.  Configure sus [credenciales de proveedor](https://serverless.com/framework/docs/providers/aws/guide/credentials) -> [Vea el video sobre la configuración de credenciales](https://www.youtube.com/watch?v=KngM5bfpttA)\n\n### Crear un nuevo servicio\n\nCree un nuevo servicio utilizando la plantilla Node.js, especificando un nombre único y una ruta opcional para su servicio.\n\n\\#   Cree un nuevo servicio / proyecto\n\nserverless create --template aws-nodejs\n\n![](https://cdn-images-1.medium.com/max/800/1*IVscuHxJHKWyPpQ5h_Zmkg.png)\n\n`handler.js ->` Donde escribes tu lógica`...`\n\n`serverless.yml ->` Donde describe tu deploy`...`\n\nfunctions:  \n  \n  getAllFiles:  \n    handler: handler.getAllFiles  \n    events:  \n     - http:  \n         path: /getAllFiles  \n         method: get         \n  \n  uploadFile:  \n    handler: handler.uploadFile  \n    events:  \n     - http:  \n         path: /uploadFile  \n         method: post\n\n> _Por ejemplo,_ **_obtener_** _y_ **_publicar los_** _puntos finales de url …_\n\nEn el archivo handler.js …\n\n_Lógica para obtener todos los archivos, desde el almacenamiento de AWS ._\n\nmodule.exports.getAllFiles = async (event, context) => {\n\nlet files = \\[\\];\n\nlet params = {   \n Bucket: process.env.BUCKET, / \\* required \\* /   \n Prefix: ‘upload’   \n };\n\nlet result = await s3.listObjectsV2 (params) .promise ();\n\ndejar datos = resultado. contenido;   \n Object.keys (data) .forEach ((key, index) => {\n\nlet fileObject = data \\[key\\];\n\nfiles.push (\\`https: // $ {result.Name} .s3.us-east-2.amazonaws .com / $ {fileObject.Key} \\`);   \n });\n\nreturn {   \n statusCode: 200,   \n body: JSON.stringify ({   \n files: files,   \n bucketName: \\`$ {result.Name}\\`,   \n subFolder: \\`$ {result.Prefix}\\`,   \n }, null, 2),   \n };   \n};\n\n![](https://cdn-images-1.medium.com/max/800/1*3guQ0UUU_LnLucPOWws8dw.png)\n\n![](https://cdn-images-1.medium.com/max/800/1*aaqdsXnJA5A4PeO8bPfivA.png)\n\nEspero sea de su interés hasta este momento.\n\n[**Donate to devjaime**  \n_Help support devjaime by donating or sharing with your friends._www.paypal.com](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S \"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\")[](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [July 17, 2019](https://medium.com/p/ec31304ed06c).\n\n[Canonical link](https://medium.com/@devjaime/flutter-cloud-aws-articulo-en-espa%C3%B1ol-parte-1-de-3-ec31304ed06c)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"flutter-cloud-aws-articulo-en-español-parte-1-de-3","text":"Flutter Cloud AWS articulo en español parte 1 de 3"},{"depth":3,"slug":"flutter-cloud-aws-articulo-en-español-parte-1-de3","text":"Flutter Cloud AWS articulo en español parte 1 de 3"},{"depth":3,"slug":"conceptos-básicos-de-amazons3","text":"Conceptos básicos de Amazon S3"},{"depth":4,"slug":"paso-1","text":"Paso 1:"},{"depth":4,"slug":"paso-2","text":"Paso 2:"},{"depth":4,"slug":"paso-3","text":"Paso 3 :"},{"depth":3,"slug":"cómo-escribir-y-desplegar-lambdas","text":"Cómo escribir y desplegar Lambdas …"},{"depth":3,"slug":"pre-requisitos","text":"Pre-requisitos"},{"depth":3,"slug":"crear-un-nuevoservicio","text":"Crear un nuevo servicio"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
