/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"mi-primer-api-en-golang\">Mi primer API en Golang</h1>\n<p>Realice una primer “API” en golang muy simple la cual me gustaría compartir (lo más probable es que no cuente con las mejores practicas…</p>\n<hr>\n<h3 id=\"mi-primer-api-engolang\">Mi primer API en Golang</h3>\n<p>Realice una primer “API” en golang muy simple la cual me gustaría compartir (lo más probable es que no cuente con las mejores practicas pero por lo menos tiene los requisitos mínimos para escalar en algo más evolucionado).</p>\n<p>Código fuente</p>\n<p><a href=\"https://github.com/devjaime/golangrest\">https://github.com/devjaime/golangrest</a></p>\n<p>Lo primero que quería era listar los requerimientos de mi API para que sea completamente funcional para lo que necesitaba.</p>\n<ol>\n<li>- Debía ser capaz de conectarse a través de un ORM a la base de datos ya que lo más probable es que esta cambie en un futuro ( de referencia es azure sql en este momento).</li>\n<li>- Debe ser capaz de levantar en un contenedor y pasar por un proceso de integración continua para estar como una api publica</li>\n<li>.- Debe ser escalable en el tiempo en cuanto a cantidad de usuario y peticiones concurrentes.</li>\n</ol>\n<p>Diagrama de diseño de la API</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*V1mFb0wgIRT2RYPjATAk4Q.png\" alt=\"\"></p>\n<p>No quisiera entrar más en detalles pero eso es todo lo que quería implementar para la API</p>\n<p>Lo primero que investigue fue la documentación de Golang <a href=\"https://golang.org/\">https://golang.org/</a> donde lo primero es seguir muy bien las instrucciones de instalación de golang en tu maquina ya sea windows o mac <a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n<p>En mi caso cuento con mac y lo que realice fue ver si existía instalación a traves de homebrew y lo realice siguiendo unos pasos muy simples, sacados del siguiente tutorial</p>\n<p><a href=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\" title=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\"><strong>Install Go on Mac (with homebrew)</strong><br>\n_Install Brew (skip if you already did)_medium.com</a><a href=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\"></a></p>\n<p>Con go versión pueden ver si realmente funciono la instalación y que versión tienen de go</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*-YhAHN1PmULyEre102HmGg.png\" alt=\"\"></p>\n<p>Otro recurso practico que me ayudo para levantar mi primer API fue este</p>\n<p><a href=\"https://www.faztweb.com/curso/golang-restapi-crud\" title=\"https://www.faztweb.com/curso/golang-restapi-crud\"><strong>FaztWeb| Curso Completo de Golang REST API CRUD desde cero, para principiantes</strong><br>\n_En este ejemplo práctico de Go aprenderemos a crear una REST API desde cero usando Mux y conceptos basicos de este…_www.faztweb.com</a><a href=\"https://www.faztweb.com/curso/golang-restapi-crud\"></a></p>\n<p>Sin embargo faltaban conceptos como ocupar un ORM y que ORM maneja Golang</p>\n<p>De estos “googleando” llegue a <a href=\"https://gorm.io/index.html\">https://gorm.io/index.html</a> que parecía una muy buena opción.</p>\n<p>Instalación en tu proyecto</p>\n<p>go get -u gorm.io/gorm</p>\n<p>Ahora dependiendo de la base de datos a ocupar, deberas buscar un dialecto</p>\n<p>Puedes ver las distintas conexiones en</p>\n<p><a href=\"https://gorm.io/docs/connecting_to_the_database.html\" title=\"https://gorm.io/docs/connecting_to_the_database.html\"><strong>Connecting to a Database</strong><br>\n_GORM officially supports databases MySQL, PostgreSQL, SQLite, SQL Server NOTE: To handle time.Time correctly, you need…_gorm.io</a><a href=\"https://gorm.io/docs/connecting_to_the_database.html\"></a></p>\n<p>Otra dependencia importante de instalar es Fiber</p>\n<p><strong>Fiber</strong> es un <strong>marco web</strong> inspirado en <a href=\"https://github.com/expressjs/express\">Express</a> construido sobre <a href=\"https://github.com/valyala/fasthttp\">Fasthttp</a> , el motor HTTP <strong>más rápido</strong> para <a href=\"https://golang.org/doc/\">Go</a> . Diseñado para <strong>facilitar las</strong> cosas para <strong>un</strong> desarrollo <strong>rápido</strong> con <strong>cero asignación de memoria</strong> y <strong>rendimiento</strong> en mente.</p>\n<p>instalación</p>\n<p>go get github.com/gofiber/fiber/v2</p>\n<p>Luego de eso te explicare mi estructura simple de la api</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*77RNJT1iD47BLWOJo0kqrg.png\" alt=\"\"></p>\n<p>En donde la carpeta circleci, es la integración continua y los pasos para poder subir mi api a un servidor.</p>\n<p>Puedes ver este video para darte una idea de lo que realizo en ese archivo</p>\n<p>El resultado es algo como esto</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zM95A78YHlxViOvqzgVwEA.png\" alt=\"\"></p>\n<p>En .ssh están las claves privadas y publicas para subir el proyecto, que es algo como esto.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*CTgAtWP-hnOUcWVfUrzycw.png\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*DS8vVnf-sF5g0ctDISP2yg.png\" alt=\"\"></p>\n<p>Por supuesto debes crear las tuyas</p>\n<p>Terminal (también en el video de referencia aparece muy bien explicado)</p>\n<p>ssh-keygen -t rsa</p>\n<ul>\n<li>En database el archivo database.go contiene el paquete de conexión</li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*k8D57u1zeEacXbR5nnL7qQ.png\" alt=\"\"></p>\n<p>y product es el modelo que consultara la base de datos con sus respectivos verbos.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*dvAX0hrOgSDHdXCX_33Pkg.png\" alt=\"\"></p>\n<p>dependencias</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*XDFp7H0mEsgvwo2WGLf0kQ.png\" alt=\"\"></p>\n<p>Modelo</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mETS9kOSupjsNKH3oh4_gA.png\" alt=\"\"></p>\n<p>Verbos</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*JP5NiWUOm9Kmf9MbBRaCKA.png\" alt=\"\"></p>\n<p>el archivo .envexample debes reemplazarlo por .env donde estarán las variables de entorno con las tuyas.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*mQEPeGA0htmG-xgRZey_jg.png\" alt=\"\"></p>\n<p>variables de entorno</p>\n<p>El archivo docker-compose.yml puede ser reemplazado para que el orquestador sea kubernetes (de forma local es más practico orquestar la API de esta forma)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7mHcaxT7wQ_j0A9OIHkQIw.png\" alt=\"\"></p>\n<p>El archivo dockerfile es lo mínimo que requiere la api para funcionar y como se ve son pasos muy sencillos facil de replicar</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Wa7C69fzYlknnHxOOsUxJA.png\" alt=\"\"></p>\n<p>El archivo main.go contiene la mayor cantidad de lógica de la aplicación</p>\n<p>Dependencias</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zgmWcPQk7pmVo_81z5WTPw.png\" alt=\"\"></p>\n<p>Revisa la existencia de un archivo .env para las variables de entorno.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Pup96T1el8LEywyhDNn-LA.png\" alt=\"\"></p>\n<p>Seteo de las variables de entorno</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*y8r6rIfryA6vsmaMi_I7vw.png\" alt=\"\"></p>\n<p>rutas de la api</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*LVb2Rrw0m49lCHQZ2zFgIg.png\" alt=\"\"></p>\n<p>inicialización de la base de datos</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*NGDUqx9e4bTPM6xFmTpCzg.png\" alt=\"\"></p>\n<p>función principal</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*F0P5XdjC8-xs_S6b732Aqg.png\" alt=\"\"></p>\n<p>Código fuente</p>\n<p><a href=\"https://github.com/devjaime/golangrest\" title=\"https://github.com/devjaime/golangrest\"><strong>devjaime/golangrest</strong><br>\n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com</a><a href=\"https://github.com/devjaime/golangrest\"></a></p>\n<p>Espero este primer acercamiento te sirva en tus proyectos. (y en el futuro intentare realizar un video más detallado). Cualquier duda intentare contestar más seguido inclusive se que en post antiguos existen preguntas que no he contestado por lo cual intentare ponerme al día.</p>\n<p><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\" title=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"><strong>Donate to devjaime</strong><br>\n_Help support devjaime by donating or sharing with your friends._www.paypal.com</a><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/9461996753dc\">December 6, 2020</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/mi-primer-api-en-golang-9461996753dc\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Mi primer API en Golang","description":"","tags":["code","API","Golang"],"time":4,"featured":true,"timestamp":"2020-12-06T12:20:31-0300","filename":"2020-12-06_Mi-primer-API-en-Golang-9461996753dc"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2020-12-06_Mi-primer-API-en-Golang-9461996753dc.md";
				const url = "/blog/2020-12-06_Mi-primer-API-en-Golang-9461996753dc";
				function rawContent() {
					return "   \n                                        \n                                \n               \n                               \n       \n              \n                                     \n                                                           \n   \n\nMi primer API en Golang\n=======================\n\nRealice una primer “API” en golang muy simple la cual me gustaría compartir (lo más probable es que no cuente con las mejores practicas…\n\n* * *\n\n### Mi primer API en Golang\n\nRealice una primer “API” en golang muy simple la cual me gustaría compartir (lo más probable es que no cuente con las mejores practicas pero por lo menos tiene los requisitos mínimos para escalar en algo más evolucionado).\n\nCódigo fuente\n\n[https://github.com/devjaime/golangrest](https://github.com/devjaime/golangrest)\n\nLo primero que quería era listar los requerimientos de mi API para que sea completamente funcional para lo que necesitaba.\n\n1.  \\- Debía ser capaz de conectarse a través de un ORM a la base de datos ya que lo más probable es que esta cambie en un futuro ( de referencia es azure sql en este momento).\n2.  \\- Debe ser capaz de levantar en un contenedor y pasar por un proceso de integración continua para estar como una api publica\n3.  .- Debe ser escalable en el tiempo en cuanto a cantidad de usuario y peticiones concurrentes.\n\nDiagrama de diseño de la API\n\n![](https://cdn-images-1.medium.com/max/800/1*V1mFb0wgIRT2RYPjATAk4Q.png)\n\nNo quisiera entrar más en detalles pero eso es todo lo que quería implementar para la API\n\nLo primero que investigue fue la documentación de Golang [https://golang.org/](https://golang.org/) donde lo primero es seguir muy bien las instrucciones de instalación de golang en tu maquina ya sea windows o mac [https://golang.org/dl/](https://golang.org/dl/)\n\nEn mi caso cuento con mac y lo que realice fue ver si existía instalación a traves de homebrew y lo realice siguiendo unos pasos muy simples, sacados del siguiente tutorial\n\n[**Install Go on Mac (with homebrew)**  \n_Install Brew (skip if you already did)_medium.com](https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5 \"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\")[](https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5)\n\nCon go versión pueden ver si realmente funciono la instalación y que versión tienen de go\n\n![](https://cdn-images-1.medium.com/max/800/1*-YhAHN1PmULyEre102HmGg.png)\n\nOtro recurso practico que me ayudo para levantar mi primer API fue este\n\n[**FaztWeb| Curso Completo de Golang REST API CRUD desde cero, para principiantes**  \n_En este ejemplo práctico de Go aprenderemos a crear una REST API desde cero usando Mux y conceptos basicos de este…_www.faztweb.com](https://www.faztweb.com/curso/golang-restapi-crud \"https://www.faztweb.com/curso/golang-restapi-crud\")[](https://www.faztweb.com/curso/golang-restapi-crud)\n\nSin embargo faltaban conceptos como ocupar un ORM y que ORM maneja Golang\n\nDe estos “googleando” llegue a [https://gorm.io/index.html](https://gorm.io/index.html) que parecía una muy buena opción.\n\nInstalación en tu proyecto\n\ngo get -u gorm.io/gorm\n\nAhora dependiendo de la base de datos a ocupar, deberas buscar un dialecto\n\nPuedes ver las distintas conexiones en\n\n[**Connecting to a Database**  \n_GORM officially supports databases MySQL, PostgreSQL, SQLite, SQL Server NOTE: To handle time.Time correctly, you need…_gorm.io](https://gorm.io/docs/connecting_to_the_database.html \"https://gorm.io/docs/connecting_to_the_database.html\")[](https://gorm.io/docs/connecting_to_the_database.html)\n\nOtra dependencia importante de instalar es Fiber\n\n**Fiber** es un **marco web** inspirado en [Express](https://github.com/expressjs/express) construido sobre [Fasthttp](https://github.com/valyala/fasthttp) , el motor HTTP **más rápido** para [Go](https://golang.org/doc/) . Diseñado para **facilitar las** cosas para **un** desarrollo **rápido** con **cero asignación de memoria** y **rendimiento** en mente.\n\ninstalación\n\ngo get github.com/gofiber/fiber/v2\n\nLuego de eso te explicare mi estructura simple de la api\n\n![](https://cdn-images-1.medium.com/max/800/1*77RNJT1iD47BLWOJo0kqrg.png)\n\nEn donde la carpeta circleci, es la integración continua y los pasos para poder subir mi api a un servidor.\n\nPuedes ver este video para darte una idea de lo que realizo en ese archivo\n\nEl resultado es algo como esto\n\n![](https://cdn-images-1.medium.com/max/800/1*zM95A78YHlxViOvqzgVwEA.png)\n\nEn .ssh están las claves privadas y publicas para subir el proyecto, que es algo como esto.\n\n![](https://cdn-images-1.medium.com/max/800/1*CTgAtWP-hnOUcWVfUrzycw.png)\n\n![](https://cdn-images-1.medium.com/max/800/1*DS8vVnf-sF5g0ctDISP2yg.png)\n\nPor supuesto debes crear las tuyas\n\nTerminal (también en el video de referencia aparece muy bien explicado)\n\nssh-keygen -t rsa\n\n*   En database el archivo database.go contiene el paquete de conexión\n\n![](https://cdn-images-1.medium.com/max/800/1*k8D57u1zeEacXbR5nnL7qQ.png)\n\ny product es el modelo que consultara la base de datos con sus respectivos verbos.\n\n![](https://cdn-images-1.medium.com/max/800/1*dvAX0hrOgSDHdXCX_33Pkg.png)\n\ndependencias\n\n![](https://cdn-images-1.medium.com/max/800/1*XDFp7H0mEsgvwo2WGLf0kQ.png)\n\nModelo\n\n![](https://cdn-images-1.medium.com/max/800/1*mETS9kOSupjsNKH3oh4_gA.png)\n\nVerbos\n\n![](https://cdn-images-1.medium.com/max/800/1*JP5NiWUOm9Kmf9MbBRaCKA.png)\n\nel archivo .envexample debes reemplazarlo por .env donde estarán las variables de entorno con las tuyas.\n\n![](https://cdn-images-1.medium.com/max/800/1*mQEPeGA0htmG-xgRZey_jg.png)\n\nvariables de entorno\n\nEl archivo docker-compose.yml puede ser reemplazado para que el orquestador sea kubernetes (de forma local es más practico orquestar la API de esta forma)\n\n![](https://cdn-images-1.medium.com/max/800/1*7mHcaxT7wQ_j0A9OIHkQIw.png)\n\nEl archivo dockerfile es lo mínimo que requiere la api para funcionar y como se ve son pasos muy sencillos facil de replicar\n\n![](https://cdn-images-1.medium.com/max/800/1*Wa7C69fzYlknnHxOOsUxJA.png)\n\nEl archivo main.go contiene la mayor cantidad de lógica de la aplicación\n\nDependencias\n\n![](https://cdn-images-1.medium.com/max/800/1*zgmWcPQk7pmVo_81z5WTPw.png)\n\nRevisa la existencia de un archivo .env para las variables de entorno.\n\n![](https://cdn-images-1.medium.com/max/800/1*Pup96T1el8LEywyhDNn-LA.png)\n\nSeteo de las variables de entorno\n\n![](https://cdn-images-1.medium.com/max/800/1*y8r6rIfryA6vsmaMi_I7vw.png)\n\nrutas de la api\n\n![](https://cdn-images-1.medium.com/max/800/1*LVb2Rrw0m49lCHQZ2zFgIg.png)\n\ninicialización de la base de datos\n\n![](https://cdn-images-1.medium.com/max/800/1*NGDUqx9e4bTPM6xFmTpCzg.png)\n\nfunción principal\n\n![](https://cdn-images-1.medium.com/max/800/1*F0P5XdjC8-xs_S6b732Aqg.png)\n\nCódigo fuente\n\n[**devjaime/golangrest**  \n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com](https://github.com/devjaime/golangrest \"https://github.com/devjaime/golangrest\")[](https://github.com/devjaime/golangrest)\n\nEspero este primer acercamiento te sirva en tus proyectos. (y en el futuro intentare realizar un video más detallado). Cualquier duda intentare contestar más seguido inclusive se que en post antiguos existen preguntas que no he contestado por lo cual intentare ponerme al día.\n\n[**Donate to devjaime**  \n_Help support devjaime by donating or sharing with your friends._www.paypal.com](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S \"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\")[](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [December 6, 2020](https://medium.com/p/9461996753dc).\n\n[Canonical link](https://medium.com/@devjaime/mi-primer-api-en-golang-9461996753dc)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"mi-primer-api-en-golang","text":"Mi primer API en Golang"},{"depth":3,"slug":"mi-primer-api-engolang","text":"Mi primer API en Golang"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
