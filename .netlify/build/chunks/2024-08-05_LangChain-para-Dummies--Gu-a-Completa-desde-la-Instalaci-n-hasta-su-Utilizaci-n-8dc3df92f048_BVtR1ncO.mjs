/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"langchain-para-dummies-guía-completa-desde-la-instalación-hasta-su-utilización\">LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización</h1>\n<p>En esta guía, vamos a explorar LangChain, una poderosa biblioteca de Python para la creación y manejo de flujos de trabajo de IA. Si eres…</p>\n<hr>\n<h3 id=\"langchain-para-dummies-guía-completa-desde-la-instalación-hasta-su-utilización-1\">LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*3zpp7Z9eeISg_Wx3\" alt=\"\"></p>\n<p>En esta guía, vamos a explorar LangChain, una poderosa biblioteca de Python para la creación y manejo de flujos de trabajo de IA. Si eres nuevo en este campo, no te preocupes, te llevaremos paso a paso desde la instalación hasta su utilización con ejemplos prácticos. ¡Empecemos!</p>\n<h3 id=\"qué-es-langchain\">¿Qué es LangChain?</h3>\n<p>LangChain es una biblioteca de Python diseñada para facilitar la integración de modelos de lenguaje en aplicaciones. Permite a los desarrolladores crear flujos de trabajo complejos utilizando modelos de lenguaje de manera sencilla y modular. Para obtener más información, puedes visitar la <a href=\"https://python.langchain.com/v0.2/docs/introduction/\">introducción oficial de LangChain</a>.</p>\n<h3 id=\"instalación-de-langchain\">Instalación de LangChain</h3>\n<p>Lo primero que necesitamos es instalar LangChain. Puedes hacerlo utilizando pip, el gestor de paquetes de Python. Abre tu terminal y ejecuta el siguiente comando:</p>\n<p>pip install langchain</p>\n<h3 id=\"configuración-inicial\">Configuración Inicial</h3>\n<p>Una vez instalada la biblioteca, podemos comenzar a configurar nuestro entorno de trabajo. Asegúrate de tener una versión actualizada de Python instalada y un editor de texto como Visual Studio Code o PyCharm.</p>\n<h3 id=\"conceptos-básicos\">Conceptos Básicos</h3>\n<h3 id=\"1-creación-de-unprompt\">1. Creación de un Prompt</h3>\n<p>Un prompt es una entrada que damos al modelo de lenguaje para obtener una respuesta. Aquí está el código para crear un prompt básico:</p>\n<p>from langchain.prompts import Prompt<br>\n# Definir un prompt básico<br>\nprompt = Prompt(<br>\ntemplate=“¿Qué es la inteligencia artificial?“,<br>\nvariables=[]<br>\n)<br>\n# Generar el texto del prompt<br>\nprompt_text = prompt.generate({})<br>\nprint(prompt_text)</p>\n<p>Este código crea un prompt con una pregunta simple sobre inteligencia artificial. La variable <code>template</code> contiene el texto del prompt y <code>variables</code> es una lista de variables que podríamos querer sustituir, en este caso, está vacía. Para más detalles sobre los conceptos detrás de LangChain, visita la sección de <a href=\"https://python.langchain.com/v0.2/docs/concepts/\">conceptos oficiales</a>.</p>\n<h3 id=\"2-uso-de-un-modelo-delenguaje\">2. Uso de un Modelo de Lenguaje</h3>\n<p>Para generar respuestas, necesitamos un modelo de lenguaje. LangChain es compatible con muchos modelos de lenguaje, incluidos los de OpenAI. A continuación, te mostramos cómo puedes utilizar uno de estos modelos.</p>\n<p>Primero, asegúrate de tener una clave API de OpenAI. Luego, usa el siguiente código:</p>\n<p>from langchain.models import LanguageModel<br>\n# Definir el modelo de lenguaje<br>\nmodel = LanguageModel.from_pretrained(“openai/gpt-4o”)<br>\n# Generar una respuesta utilizando el modelo<br>\nresponse = model.generate(prompt_text)<br>\nprint(response)</p>\n<p>Este código define un modelo de lenguaje utilizando OpenAI GPT-4o y genera una respuesta para nuestro prompt.</p>\n<h3 id=\"ejemplos-avanzados\">Ejemplos Avanzados</h3>\n<p>Ahora que ya tenemos una idea básica, veamos algunos ejemplos más avanzados de cómo podemos utilizar LangChain en diferentes contextos.</p>\n<h3 id=\"salud-diagnóstico-médico\">Salud: Diagnóstico Médico</h3>\n<p>from langchain.prompts import Prompt<br>\n# Definir un prompt avanzado para diagnóstico médico<br>\nprompt = Prompt(<br>\ntemplate=“Eres un médico experto en {specialty}. Un paciente presenta los siguientes síntomas: {symptoms}. ¿Cuál podría ser el diagnóstico?“,<br>\nvariables=[“specialty”, “symptoms”]<br>\n)<br>\n# Usar el prompt con variables específicas<br>\nprompt_text = prompt.generate({“specialty”: “neurología”, “symptoms”: “dolor de cabeza intenso, visión borrosa y mareos”})<br>\nprint(prompt_text)</p>\n<h3 id=\"retail-descripciones-de-productos\">Retail: Descripciones de Productos</h3>\n<p>from langchain.prompts import TemplatePrompt<br>\n# Definir una plantilla de prompt para descripciones de productos<br>\ntemplate_prompt = TemplatePrompt(<br>\ntemplate=“Crea una descripción atractiva para el siguiente producto:\\n\\nNombre: {product_name}\\nCaracterísticas: {features}\\nDescripción:“,<br>\nvariables=[“product_name”, “features”]<br>\n)<br>\n# Usar la plantilla de prompt con un producto específico<br>\nproduct_name = “Zapatos Deportivos”<br>\nfeatures = “ligeros, cómodos, suela antideslizante, diseño moderno”<br>\nprompt_text = template_prompt.generate({“product_name”: product_name, “features”: features})<br>\nprint(prompt_text)</p>\n<p>Para aprender más sobre la creación de templates de prompts, revisa la documentación sobre <a href=\"https://python.langchain.com/v0.2/docs/concepts/#prompt-templates\">prompt templates</a>.</p>\n<h3 id=\"mesa-de-ayuda-respuestas-automatizadas\">Mesa de Ayuda: Respuestas Automatizadas</h3>\n<p>LangChain facilita la creación de flujos de trabajo complejos para mesas de ayuda, automatizando respuestas a preguntas frecuentes. Aquí tienes un ejemplo de un flujo de trabajo simple:</p>\n<p>from langchain.workflows import Workflow<br>\nfrom langchain.models import LanguageModel<br>\n# Definir un modelo de lenguaje<br>\nmodel = LanguageModel.from_pretrained(“openai/gpt-3”)<br>\n# Crear un flujo de trabajo que utiliza el modelo de lenguaje<br>\nworkflow = Workflow(<br>\nsteps=[<br>\n{“action”: model.generate, “input”: {“prompt”: “Responde a la siguiente pregunta frecuente: ¿Cómo puedo restablecer mi contraseña?”}},<br>\n{“action”: lambda x: x.capitalize(), “input”: {“text”: “$output”}}<br>\n]<br>\n)<br>\n# Ejecutar el flujo de trabajo<br>\nresult = workflow.run()<br>\nprint(result)</p>\n<h3 id=\"compatibilidad-conpydantic\">Compatibilidad con Pydantic</h3>\n<p>LangChain también es compatible con Pydantic, una biblioteca que ayuda a definir y validar datos. Esta compatibilidad facilita la creación de aplicaciones robustas y confiables. Para más detalles, visita la <a href=\"https://python.langchain.com/v0.2/docs/how_to/pydantic_compatibility/\">guía de compatibilidad con Pydantic</a>.</p>\n<h3 id=\"conclusión\">Conclusión</h3>\n<p>LangChain es una herramienta poderosa y flexible que facilita la creación y manejo de flujos de trabajo de IA. Desde prompts simples hasta flujos de trabajo complejos, LangChain te permite integrar modelos de lenguaje en tus aplicaciones de manera eficiente.</p>\n<p>En <strong>codeIA.cl</strong>, somos expertos en inteligencia artificial y procesamiento del lenguaje natural. Podemos ayudarte a implementar y optimizar soluciones basadas en LangChain para llevar tu empresa al siguiente nivel. Contáctanos para más información y descubre cómo podemos transformar tus ideas en realidad utilizando LangChain y otras tecnologías de inteligencia artificial.</p>\n<p>¡Esperamos que esta guía te haya sido útil! Si tienes alguna pregunta o necesitas asistencia, no dudes en comunicarte con nosotros. ¡Estamos aquí para ayudarte!</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/8dc3df92f048\">August 5, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/langchain-para-dummies-gu%C3%ADa-completa-desde-la-instalaci%C3%B3n-hasta-su-utilizaci%C3%B3n-8dc3df92f048\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización","description":"","tags":["code","LangChain"],"time":4,"featured":true,"timestamp":"2024-08-05T12:20:32-0300","filename":"2024-08-05_LangChain-para-Dummies--Gu-a-Completa-desde-la-Instalaci-n-hasta-su-Utilizaci-n-8dc3df92f048"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-08-05_LangChain-para-Dummies--Gu-a-Completa-desde-la-Instalaci-n-hasta-su-Utilizaci-n-8dc3df92f048.md";
				const url = "/blog/2024-08-05_LangChain-para-Dummies--Gu-a-Completa-desde-la-Instalaci-n-hasta-su-Utilizaci-n-8dc3df92f048";
				function rawContent() {
					return "   \n                                        \n                                                                                        \n               \n                           \n       \n              \n                                     \n                                                                                                                   \n   \n\n\nLangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización\n===============================================================================\n\nEn esta guía, vamos a explorar LangChain, una poderosa biblioteca de Python para la creación y manejo de flujos de trabajo de IA. Si eres…\n\n* * *\n\n### LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización\n\n![](https://cdn-images-1.medium.com/max/800/0*3zpp7Z9eeISg_Wx3)\n\nEn esta guía, vamos a explorar LangChain, una poderosa biblioteca de Python para la creación y manejo de flujos de trabajo de IA. Si eres nuevo en este campo, no te preocupes, te llevaremos paso a paso desde la instalación hasta su utilización con ejemplos prácticos. ¡Empecemos!\n\n### ¿Qué es LangChain?\n\nLangChain es una biblioteca de Python diseñada para facilitar la integración de modelos de lenguaje en aplicaciones. Permite a los desarrolladores crear flujos de trabajo complejos utilizando modelos de lenguaje de manera sencilla y modular. Para obtener más información, puedes visitar la [introducción oficial de LangChain](https://python.langchain.com/v0.2/docs/introduction/).\n\n### Instalación de LangChain\n\nLo primero que necesitamos es instalar LangChain. Puedes hacerlo utilizando pip, el gestor de paquetes de Python. Abre tu terminal y ejecuta el siguiente comando:\n\npip install langchain\n\n### Configuración Inicial\n\nUna vez instalada la biblioteca, podemos comenzar a configurar nuestro entorno de trabajo. Asegúrate de tener una versión actualizada de Python instalada y un editor de texto como Visual Studio Code o PyCharm.\n\n### Conceptos Básicos\n\n### 1\\. Creación de un Prompt\n\nUn prompt es una entrada que damos al modelo de lenguaje para obtener una respuesta. Aquí está el código para crear un prompt básico:\n\nfrom langchain.prompts import Prompt  \n\\# Definir un prompt básico  \nprompt = Prompt(  \n    template=\"¿Qué es la inteligencia artificial?\",  \n    variables=\\[\\]  \n)  \n\\# Generar el texto del prompt  \nprompt\\_text = prompt.generate({})  \nprint(prompt\\_text)\n\nEste código crea un prompt con una pregunta simple sobre inteligencia artificial. La variable `template` contiene el texto del prompt y `variables` es una lista de variables que podríamos querer sustituir, en este caso, está vacía. Para más detalles sobre los conceptos detrás de LangChain, visita la sección de [conceptos oficiales](https://python.langchain.com/v0.2/docs/concepts/).\n\n### 2\\. Uso de un Modelo de Lenguaje\n\nPara generar respuestas, necesitamos un modelo de lenguaje. LangChain es compatible con muchos modelos de lenguaje, incluidos los de OpenAI. A continuación, te mostramos cómo puedes utilizar uno de estos modelos.\n\nPrimero, asegúrate de tener una clave API de OpenAI. Luego, usa el siguiente código:\n\nfrom langchain.models import LanguageModel  \n\\# Definir el modelo de lenguaje  \nmodel = LanguageModel.from\\_pretrained(\"openai/gpt-4o\")  \n\\# Generar una respuesta utilizando el modelo  \nresponse = model.generate(prompt\\_text)  \nprint(response)\n\nEste código define un modelo de lenguaje utilizando OpenAI GPT-4o y genera una respuesta para nuestro prompt.\n\n### Ejemplos Avanzados\n\nAhora que ya tenemos una idea básica, veamos algunos ejemplos más avanzados de cómo podemos utilizar LangChain en diferentes contextos.\n\n### Salud: Diagnóstico Médico\n\nfrom langchain.prompts import Prompt  \n\\# Definir un prompt avanzado para diagnóstico médico  \nprompt = Prompt(  \n    template=\"Eres un médico experto en {specialty}. Un paciente presenta los siguientes síntomas: {symptoms}. ¿Cuál podría ser el diagnóstico?\",  \n    variables=\\[\"specialty\", \"symptoms\"\\]  \n)  \n\\# Usar el prompt con variables específicas  \nprompt\\_text = prompt.generate({\"specialty\": \"neurología\", \"symptoms\": \"dolor de cabeza intenso, visión borrosa y mareos\"})  \nprint(prompt\\_text)\n\n### Retail: Descripciones de Productos\n\nfrom langchain.prompts import TemplatePrompt  \n\\# Definir una plantilla de prompt para descripciones de productos  \ntemplate\\_prompt = TemplatePrompt(  \n    template=\"Crea una descripción atractiva para el siguiente producto:\\\\n\\\\nNombre: {product\\_name}\\\\nCaracterísticas: {features}\\\\nDescripción:\",  \n    variables=\\[\"product\\_name\", \"features\"\\]  \n)  \n\\# Usar la plantilla de prompt con un producto específico  \nproduct\\_name = \"Zapatos Deportivos\"  \nfeatures = \"ligeros, cómodos, suela antideslizante, diseño moderno\"  \nprompt\\_text = template\\_prompt.generate({\"product\\_name\": product\\_name, \"features\": features})  \nprint(prompt\\_text)\n\nPara aprender más sobre la creación de templates de prompts, revisa la documentación sobre [prompt templates](https://python.langchain.com/v0.2/docs/concepts/#prompt-templates).\n\n### Mesa de Ayuda: Respuestas Automatizadas\n\nLangChain facilita la creación de flujos de trabajo complejos para mesas de ayuda, automatizando respuestas a preguntas frecuentes. Aquí tienes un ejemplo de un flujo de trabajo simple:\n\nfrom langchain.workflows import Workflow  \nfrom langchain.models import LanguageModel  \n\\# Definir un modelo de lenguaje  \nmodel = LanguageModel.from\\_pretrained(\"openai/gpt-3\")  \n\\# Crear un flujo de trabajo que utiliza el modelo de lenguaje  \nworkflow = Workflow(  \n    steps=\\[  \n        {\"action\": model.generate, \"input\": {\"prompt\": \"Responde a la siguiente pregunta frecuente: ¿Cómo puedo restablecer mi contraseña?\"}},  \n        {\"action\": lambda x: x.capitalize(), \"input\": {\"text\": \"$output\"}}  \n    \\]  \n)  \n\\# Ejecutar el flujo de trabajo  \nresult = workflow.run()  \nprint(result)\n\n### Compatibilidad con Pydantic\n\nLangChain también es compatible con Pydantic, una biblioteca que ayuda a definir y validar datos. Esta compatibilidad facilita la creación de aplicaciones robustas y confiables. Para más detalles, visita la [guía de compatibilidad con Pydantic](https://python.langchain.com/v0.2/docs/how_to/pydantic_compatibility/).\n\n### Conclusión\n\nLangChain es una herramienta poderosa y flexible que facilita la creación y manejo de flujos de trabajo de IA. Desde prompts simples hasta flujos de trabajo complejos, LangChain te permite integrar modelos de lenguaje en tus aplicaciones de manera eficiente.\n\nEn **codeIA.cl**, somos expertos en inteligencia artificial y procesamiento del lenguaje natural. Podemos ayudarte a implementar y optimizar soluciones basadas en LangChain para llevar tu empresa al siguiente nivel. Contáctanos para más información y descubre cómo podemos transformar tus ideas en realidad utilizando LangChain y otras tecnologías de inteligencia artificial.\n\n¡Esperamos que esta guía te haya sido útil! Si tienes alguna pregunta o necesitas asistencia, no dudes en comunicarte con nosotros. ¡Estamos aquí para ayudarte!\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [August 5, 2024](https://medium.com/p/8dc3df92f048).\n\n[Canonical link](https://medium.com/@devjaime/langchain-para-dummies-gu%C3%ADa-completa-desde-la-instalaci%C3%B3n-hasta-su-utilizaci%C3%B3n-8dc3df92f048)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"langchain-para-dummies-guía-completa-desde-la-instalación-hasta-su-utilización","text":"LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización"},{"depth":3,"slug":"langchain-para-dummies-guía-completa-desde-la-instalación-hasta-su-utilización-1","text":"LangChain para Dummies: Guía Completa desde la Instalación hasta su Utilización"},{"depth":3,"slug":"qué-es-langchain","text":"¿Qué es LangChain?"},{"depth":3,"slug":"instalación-de-langchain","text":"Instalación de LangChain"},{"depth":3,"slug":"configuración-inicial","text":"Configuración Inicial"},{"depth":3,"slug":"conceptos-básicos","text":"Conceptos Básicos"},{"depth":3,"slug":"1-creación-de-unprompt","text":"1. Creación de un Prompt"},{"depth":3,"slug":"2-uso-de-un-modelo-delenguaje","text":"2. Uso de un Modelo de Lenguaje"},{"depth":3,"slug":"ejemplos-avanzados","text":"Ejemplos Avanzados"},{"depth":3,"slug":"salud-diagnóstico-médico","text":"Salud: Diagnóstico Médico"},{"depth":3,"slug":"retail-descripciones-de-productos","text":"Retail: Descripciones de Productos"},{"depth":3,"slug":"mesa-de-ayuda-respuestas-automatizadas","text":"Mesa de Ayuda: Respuestas Automatizadas"},{"depth":3,"slug":"compatibilidad-conpydantic","text":"Compatibilidad con Pydantic"},{"depth":3,"slug":"conclusión","text":"Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
