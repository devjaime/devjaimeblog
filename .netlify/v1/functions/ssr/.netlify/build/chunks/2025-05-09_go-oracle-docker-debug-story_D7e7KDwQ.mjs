/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h2 id=\"Ô∏è-introducci√≥n\">üõ§Ô∏è Introducci√≥n</h2>\n<p>A veces, lo que parece un simple ‚Äúconecta tu app a la base de datos‚Äù se convierte en una historia √©pica de errores, frustraciones, caf√© y aprendizaje t√©cnico real. En esta historia, te cuento paso a paso c√≥mo logr√© conectar una aplicaci√≥n Go con una base de datos Oracle XE dentro de un contenedor Docker, y c√≥mo llegu√© a depurarla exitosamente desde VSCode‚Ä¶ en un Mac M1.</p>\n<hr>\n<h2 id=\"-el-reto\">üöß El reto</h2>\n<p>Quer√≠a algo simple:</p>\n<ul>\n<li>Conectar Go a Oracle XE</li>\n<li>Usar Docker para no instalar nada directamente en mi sistema</li>\n<li>Depurar la aplicaci√≥n con Delve desde VSCode</li>\n</ul>\n<p>Pero si est√°s en un Mac con chip M1, ya sabes que nada es tan directo como parece‚Ä¶</p>\n<hr>\n<h2 id=\"-primeros-pasos\">üß± Primeros pasos</h2>\n<p>Comenc√© descargando la imagen oficial <code>gvenzl/oracle-xe:21-slim</code>. Sab√≠a que no exist√≠a soporte nativo ARM64 para Oracle XE en Docker, as√≠ que obligatoriamente ten√≠a que usar la imagen AMD64 bajo emulaci√≥n con Rosetta o Colima.</p>\n<p>Cre√© este <code>docker-compose.yml</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">services</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  oracle-xe</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    image</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">gvenzl/oracle-xe:21-slim</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    ports</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#9ECBFF\">\"1521:1521\"</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    environment</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      ORACLE_PASSWORD</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">test123</span></span></code></pre>\n<p>Todo se ve√≠a bien‚Ä¶ hasta que no lo fue.</p>\n<hr>\n<h2 id=\"-primeros-errores\">üî• Primeros errores</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">ORA-12547:</span><span style=\"color:#9ECBFF\"> TNS:lost</span><span style=\"color:#9ECBFF\"> contact</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">DPI-1047:</span><span style=\"color:#9ECBFF\"> Cannot</span><span style=\"color:#9ECBFF\"> locate</span><span style=\"color:#9ECBFF\"> a</span><span style=\"color:#9ECBFF\"> 64-bit</span><span style=\"color:#9ECBFF\"> Oracle</span><span style=\"color:#9ECBFF\"> Client</span><span style=\"color:#9ECBFF\"> library</span></span></code></pre>\n<p>Investigu√© y descubr√≠ que para que Go pueda conectar a Oracle, se necesita el Oracle Instant Client y que est√© correctamente vinculado al runtime de Go.</p>\n<p>As√≠ que tuve que preparar un <code>Dockerfile</code> con Oracle Instant Client:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>COPY instantclient-basiclite-linux.x64-19.27.0.0.0dbru.zip /opt/oracle/instantclient.zip</span></span>\n<span class=\"line\"><span>...</span></span>\n<span class=\"line\"><span>ENV LD_LIBRARY_PATH=/opt/oracle/instantclient</span></span></code></pre>\n<p>¬°Pero sorpresa! El archivo ZIP no era descargable directamente con <code>curl</code>. Tuve que descargarlo manualmente desde el sitio de Oracle, porque exige login.</p>\n<hr>\n<h2 id=\"-ajustes-ajustes-m√°s-ajustes\">üîß Ajustes, ajustes, m√°s ajustes‚Ä¶</h2>\n<p>Agregu√© Delve para depurar:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>RUN go install github.com/go-delve/delve/cmd/dlv@latest</span></span></code></pre>\n<p>Luego prepar√© un <code>launch.json</code> en VSCode para hacer attach:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"type\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"go\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"request\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"attach\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"remotePath\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"/app\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"port\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">40000</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"host\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"localhost\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Y ¬°funcion√≥!‚Ä¶ en teor√≠a. Porque cuando lanc√© la app con:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">CMD</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#9ECBFF\">\"dlv\"</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#9ECBFF\">\"exec\",</span><span style=\"color:#9ECBFF\"> \"./app\",</span><span style=\"color:#9ECBFF\"> \"--headless\",</span><span style=\"color:#9ECBFF\"> \"--listen=:40000\"]</span></span></code></pre>\n<p>Apareci√≥ el cl√°sico error:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">could</span><span style=\"color:#9ECBFF\"> not</span><span style=\"color:#9ECBFF\"> launch</span><span style=\"color:#9ECBFF\"> process:</span><span style=\"color:#9ECBFF\"> open</span><span style=\"color:#9ECBFF\"> /app/app:</span><span style=\"color:#9ECBFF\"> no</span><span style=\"color:#9ECBFF\"> such</span><span style=\"color:#9ECBFF\"> file</span><span style=\"color:#9ECBFF\"> or</span><span style=\"color:#9ECBFF\"> directory</span></span></code></pre>\n<p>¬øLa causa? Estaba olvidando compilar el binario antes. Agregu√© <code>go build -o app .</code> en el Dockerfile y finalmente el ejecutable fue creado y detectado.</p>\n<hr>\n<h2 id=\"-probar-la-conexi√≥n\">üß™ Probar la conexi√≥n</h2>\n<p>C√≥digo Go:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">dsn </span><span style=\"color:#F97583\">:=</span><span style=\"color:#9ECBFF\"> \"system/test123@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oracle-xe)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)))\"</span></span></code></pre>\n<p>Usar <code>localhost</code> no funcion√≥ dentro del contenedor, pero usar el nombre del servicio Docker s√≠.</p>\n<p>Finalmente, ejecut√© esta query de prueba:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">db.</span><span style=\"color:#B392F0\">Query</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"SELECT 1 FROM DUAL\"</span><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<p>Y‚Ä¶ üéâ ¬°Conexi√≥n exitosa!</p>\n<hr>\n<h2 id=\"-aprendizajes-clave\">üí° Aprendizajes clave</h2>\n<ul>\n<li>En Mac M1/M2, usa im√°genes <code>amd64</code> con <code>--platform linux/amd64</code></li>\n<li>No intentes bajar el ZIP del Instant Client con <code>curl</code>: Oracle lo bloquea</li>\n<li>El binario debe estar en <code>/app/app</code> si usas <code>dlv exec</code></li>\n<li>Usa el nombre del servicio Docker, no <code>localhost</code>, para acceder a Oracle desde otro contenedor</li>\n</ul>\n<hr>\n<h2 id=\"-resultado-final\">‚úÖ Resultado final</h2>\n<p>Mi aplicaci√≥n Go se conect√≥ exitosamente a Oracle XE en Docker, y pude depurar paso a paso desde VSCode usando Delve.</p>\n<p>S√≠, me tom√≥ m√°s de lo planeado. S√≠, me top√© con errores oscuros. Pero ahora puedo repetir este entorno en minutos‚Ä¶ y t√∫ tambi√©n.</p>\n<hr>\n<h2 id=\"-quieres-el-c√≥digo-base-listo-para-usar\">üß† ¬øQuieres el c√≥digo base listo para usar?</h2>\n<p>Cont√°ctame o revisa la versi√≥n empaquetada de este proyecto con Docker Compose + Oracle XE + Go + Debug en VSCode.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"üìò Historia T√©cnica: C√≥mo Conect√© Go a Oracle XE en Docker y Logr√© Depurar en VSCode (Apple Silicon)","description":"Un relato detallado y real sobre el proceso, errores, soluciones y aprendizajes al conectar una app Go con Oracle XE en contenedor Docker y debugearla desde VSCode en un Mac M1.","tags":["Go","Oracle","Docker","Historia","VSCode","Apple Silicon"],"time":45,"timestamp":"2025-05-09T00:00:00-0400","featured":true,"filename":"2025-05-09_go-oracle-docker-debug-story"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-05-09_go-oracle-docker-debug-story.md";
				const url = "/blog/2025-05-09_go-oracle-docker-debug-story";
				function rawContent() {
					return "   \n                                        \n                                                                                                             \n                                                                                                                                                                                                \n                                                                       \n        \n                                     \n              \n                                                   \n   \n\n## üõ§Ô∏è Introducci√≥n\n\nA veces, lo que parece un simple \"conecta tu app a la base de datos\" se convierte en una historia √©pica de errores, frustraciones, caf√© y aprendizaje t√©cnico real. En esta historia, te cuento paso a paso c√≥mo logr√© conectar una aplicaci√≥n Go con una base de datos Oracle XE dentro de un contenedor Docker, y c√≥mo llegu√© a depurarla exitosamente desde VSCode‚Ä¶ en un Mac M1.\n\n---\n\n## üöß El reto\n\nQuer√≠a algo simple:\n\n- Conectar Go a Oracle XE\n- Usar Docker para no instalar nada directamente en mi sistema\n- Depurar la aplicaci√≥n con Delve desde VSCode\n\nPero si est√°s en un Mac con chip M1, ya sabes que nada es tan directo como parece‚Ä¶\n\n---\n\n## üß± Primeros pasos\n\nComenc√© descargando la imagen oficial `gvenzl/oracle-xe:21-slim`. Sab√≠a que no exist√≠a soporte nativo ARM64 para Oracle XE en Docker, as√≠ que obligatoriamente ten√≠a que usar la imagen AMD64 bajo emulaci√≥n con Rosetta o Colima.\n\nCre√© este `docker-compose.yml`:\n\n```yaml\nservices:\n  oracle-xe:\n    image: gvenzl/oracle-xe:21-slim\n    ports:\n      - \"1521:1521\"\n    environment:\n      ORACLE_PASSWORD: test123\n```\n\nTodo se ve√≠a bien‚Ä¶ hasta que no lo fue.\n\n---\n\n## üî• Primeros errores\n\n```bash\nORA-12547: TNS:lost contact\nDPI-1047: Cannot locate a 64-bit Oracle Client library\n```\n\nInvestigu√© y descubr√≠ que para que Go pueda conectar a Oracle, se necesita el Oracle Instant Client y que est√© correctamente vinculado al runtime de Go.\n\nAs√≠ que tuve que preparar un `Dockerfile` con Oracle Instant Client:\n\n```Dockerfile\nCOPY instantclient-basiclite-linux.x64-19.27.0.0.0dbru.zip /opt/oracle/instantclient.zip\n...\nENV LD_LIBRARY_PATH=/opt/oracle/instantclient\n```\n\n¬°Pero sorpresa! El archivo ZIP no era descargable directamente con `curl`. Tuve que descargarlo manualmente desde el sitio de Oracle, porque exige login.\n\n---\n\n## üîß Ajustes, ajustes, m√°s ajustes‚Ä¶\n\nAgregu√© Delve para depurar:\n\n```Dockerfile\nRUN go install github.com/go-delve/delve/cmd/dlv@latest\n```\n\nLuego prepar√© un `launch.json` en VSCode para hacer attach:\n\n```json\n{\n  \"type\": \"go\",\n  \"request\": \"attach\",\n  \"remotePath\": \"/app\",\n  \"port\": 40000,\n  \"host\": \"localhost\"\n}\n```\n\nY ¬°funcion√≥!... en teor√≠a. Porque cuando lanc√© la app con:\n\n```bash\nCMD [\"dlv\", \"exec\", \"./app\", \"--headless\", \"--listen=:40000\"]\n```\n\nApareci√≥ el cl√°sico error:\n\n```bash\ncould not launch process: open /app/app: no such file or directory\n```\n\n¬øLa causa? Estaba olvidando compilar el binario antes. Agregu√© `go build -o app .` en el Dockerfile y finalmente el ejecutable fue creado y detectado.\n\n---\n\n## üß™ Probar la conexi√≥n\n\nC√≥digo Go:\n\n```go\ndsn := \"system/test123@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oracle-xe)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)))\"\n```\n\nUsar `localhost` no funcion√≥ dentro del contenedor, pero usar el nombre del servicio Docker s√≠.\n\nFinalmente, ejecut√© esta query de prueba:\n\n```go\ndb.Query(\"SELECT 1 FROM DUAL\")\n```\n\nY‚Ä¶ üéâ ¬°Conexi√≥n exitosa!\n\n---\n\n## üí° Aprendizajes clave\n\n- En Mac M1/M2, usa im√°genes `amd64` con `--platform linux/amd64`\n- No intentes bajar el ZIP del Instant Client con `curl`: Oracle lo bloquea\n- El binario debe estar en `/app/app` si usas `dlv exec`\n- Usa el nombre del servicio Docker, no `localhost`, para acceder a Oracle desde otro contenedor\n\n---\n\n## ‚úÖ Resultado final\n\nMi aplicaci√≥n Go se conect√≥ exitosamente a Oracle XE en Docker, y pude depurar paso a paso desde VSCode usando Delve.\n\nS√≠, me tom√≥ m√°s de lo planeado. S√≠, me top√© con errores oscuros. Pero ahora puedo repetir este entorno en minutos‚Ä¶ y t√∫ tambi√©n.\n\n---\n\n## üß† ¬øQuieres el c√≥digo base listo para usar?\n\nCont√°ctame o revisa la versi√≥n empaquetada de este proyecto con Docker Compose + Oracle XE + Go + Debug en VSCode.\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"Ô∏è-introducci√≥n","text":"üõ§Ô∏è Introducci√≥n"},{"depth":2,"slug":"-el-reto","text":"üöß El reto"},{"depth":2,"slug":"-primeros-pasos","text":"üß± Primeros pasos"},{"depth":2,"slug":"-primeros-errores","text":"üî• Primeros errores"},{"depth":2,"slug":"-ajustes-ajustes-m√°s-ajustes","text":"üîß Ajustes, ajustes, m√°s ajustes‚Ä¶"},{"depth":2,"slug":"-probar-la-conexi√≥n","text":"üß™ Probar la conexi√≥n"},{"depth":2,"slug":"-aprendizajes-clave","text":"üí° Aprendizajes clave"},{"depth":2,"slug":"-resultado-final","text":"‚úÖ Resultado final"},{"depth":2,"slug":"-quieres-el-c√≥digo-base-listo-para-usar","text":"üß† ¬øQuieres el c√≥digo base listo para usar?"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
