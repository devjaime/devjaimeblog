/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"fastmcp-construye-servidores-mcp-en-python-de-forma-inteligente\">FastMCP: Construye Servidores MCP en Python de Forma Inteligente 🚀</h1>\n<h2 id=\"-introducción-una-historia-sobre-componentes-inteligentes\">📖 Introducción: Una Historia sobre Componentes Inteligentes</h2>\n<p>Imagínate que eres un desarrollador en una startup llamada “TechInsights”. Un día tu jefe llega con un reto:</p>\n<blockquote>\n<p>“Necesitamos una aplicación inteligente que pueda responder preguntas sobre el clima, generar reportes automáticos, y almacenar historial para consultas futuras. Ah, y por cierto, tiene que estar lista para ayer.”</p>\n</blockquote>\n<p>¿Suena familiar? Este escenario, que podría parecer sacado de una serie de comedia techie, es parte de mi día a día en proyectos como los que desarrollo en <a href=\"https://codeia.cl\">CodeIA.cl</a>, donde construimos soluciones basadas en inteligencia artificial, APIs conectadas y componentes que se pueden reutilizar y combinar como piezas de LEGO. 🌐🤖</p>\n<p>Aquí es donde entra FastMCP: una herramienta increíblemente útil que simplifica la creación de servidores MCP (Model Context Protocol), permitiéndote crear rápidamente aplicaciones inteligentes y modulares en Python.</p>\n<hr>\n<h2 id=\"-por-qué-elegir-fastmcp\">🌟 ¿Por qué Elegir FastMCP?</h2>\n<p>FastMCP simplifica considerablemente la creación y gestión de contextos en aplicaciones inteligentes. Algunas razones para elegirlo:</p>\n<ul>\n<li>🔄 Fácil integración con IA y APIs externas.</li>\n<li>📦 Componentes modulares reutilizables.</li>\n<li>🚀 Rápido desarrollo basado en FastAPI.</li>\n<li>🧠 Compatible con arquitecturas como LangChain, RAG o agentes de Ollama.</li>\n<li>🎯 Optimización del flujo de trabajo para equipos ágiles y soluciones que requieren adaptabilidad.</li>\n</ul>\n<h3 id=\"en-palabras-simples\">En palabras simples:</h3>\n<p>Si alguna vez has querido crear una app modular donde puedas decir “conéctame este servicio de clima a este generador de PDFs y mándalo por correo si las ventas bajan”, <strong>FastMCP te permite hacerlo</strong>. Lo uso en proyectos como <code>FlipReady</code>, donde automatizamos check-in y limpieza de hospedajes tipo Airbnb con agentes MCP conectados.</p>\n<hr>\n<h2 id=\"️-manos-a-la-obra-ejemplos-claros-y-divertidos\">🛠️ Manos a la Obra: Ejemplos Claros y Divertidos</h2>\n<h3 id=\"-ejemplo-simple-obteniendo-el-clima-en-segundos\">📌 Ejemplo Simple: Obteniendo el Clima en Segundos</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#F97583\">from</span><span style=\"color:#E1E4E8\"> fastmcp </span><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> FastMCP</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> requests</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">app </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> FastMCP(</span><span style=\"color:#9ECBFF\">\"WeatherAssistant\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@app.tool</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> obtener_clima</span><span style=\"color:#E1E4E8\">(ciudad: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    API_KEY</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"tu_api_key\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    url </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"https://api.openweathermap.org/data/2.5/weather?q=</span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">ciudad</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">&#x26;appid=</span><span style=\"color:#79B8FF\">{API_KEY}</span><span style=\"color:#9ECBFF\">&#x26;units=metric\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    respuesta </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> requests.get(url).json()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"temperatura\"</span><span style=\"color:#E1E4E8\">: respuesta[</span><span style=\"color:#9ECBFF\">\"main\"</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#9ECBFF\">\"temp\"</span><span style=\"color:#E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        \"descripcion\"</span><span style=\"color:#E1E4E8\">: respuesta[</span><span style=\"color:#9ECBFF\">\"weather\"</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#79B8FF\">0</span><span style=\"color:#E1E4E8\">][</span><span style=\"color:#9ECBFF\">\"description\"</span><span style=\"color:#E1E4E8\">]</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    }</span></span></code></pre>\n<h3 id=\"-ejemplo-avanzado-generación-automática-de-reportes\">🚀 Ejemplo Avanzado: Generación Automática de Reportes</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\"><code><span class=\"line\"><span style=\"color:#B392F0\">@app.resource</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"reporte://</span><span style=\"color:#79B8FF\">{fecha}</span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> generar_reporte</span><span style=\"color:#E1E4E8\">(fecha: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"Reporte para </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">fecha</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">: Se lograron ventas por $15,000.\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#B392F0\">@app.tool</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">def</span><span style=\"color:#B392F0\"> enviar_reporte</span><span style=\"color:#E1E4E8\">(fecha: </span><span style=\"color:#79B8FF\">str</span><span style=\"color:#E1E4E8\">):</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    reporte </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> generar_reporte(fecha)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#F97583\"> f</span><span style=\"color:#9ECBFF\">\"Reporte enviado: </span><span style=\"color:#79B8FF\">{</span><span style=\"color:#E1E4E8\">reporte</span><span style=\"color:#79B8FF\">}</span><span style=\"color:#9ECBFF\">\"</span></span></code></pre>\n<hr>\n<h2 id=\"-aplicación-real-fake-news-verifier-con-langflow-y-fastmcp\">💡 Aplicación Real: Fake News Verifier con Langflow y FastMCP</h2>\n<p>Uno de mis proyectos favoritos en <a href=\"https://langflow.org\">Langflow</a> fue construir un verificador de fake news con múltiples nodos MCP.</p>\n<hr>\n<h2 id=\"-caso-práctico-dashboard-modular-con-fastmcp\">🧩 Caso Práctico: Dashboard Modular con FastMCP</h2>\n<p>En CodeIA usamos FastMCP para alimentar dashboards en tiempo real que miden métricas clave.</p>\n<hr>\n<h2 id=\"️-integración-con-ollama-rag-langchain-y-más\">⚙️ Integración con Ollama, RAG, LangChain y más</h2>\n<p>FastMCP no vive en una isla. Se lleva bien con herramientas modernas de IA.</p>\n<hr>\n<h2 id=\"-ideas-para-proyectos-reales-usando-fastmcp\">🧪 Ideas para Proyectos Reales Usando FastMCP</h2>\n<ol>\n<li>Asistente de correos, diagnósticos IA, gestores de limpieza, asistentes educativos y más.</li>\n</ol>\n<hr>\n<h2 id=\"-beneficios-tangibles-para-desarrolladores\">📈 Beneficios Tangibles para Desarrolladores</h2>\n<ul>\n<li>Modularidad, escalabilidad, compatibilidad, rapidez.</li>\n</ul>\n<hr>\n<h2 id=\"-conclusión-extendida\">🧠 Conclusión Extendida</h2>\n<p>FastMCP representa una forma moderna, rápida y divertida de construir servidores inteligentes. Úsalo en tus MVPs, sistemas backend o experimentos IA.</p>\n<hr>\n<h2 id=\"-recursos-recomendados\">📎 Recursos Recomendados</h2>\n<ul>\n<li>🔗 Documentación en PyPI: <a href=\"https://pypi.org/project/fastmcp/1.0/\">https://pypi.org/project/fastmcp/1.0/</a></li>\n<li>📰 Artículo de introducción en DEV.to: <a href=\"https://dev.to/mayankcse/fastmcp-simplifying-ai-context-management-with-the-model-context-protocol-37l9\">https://dev.to/mayankcse/fastmcp-simplifying-ai-context-management-with-the-model-context-protocol-37l9</a></li>\n<li>💡 Proyecto en desarrollo: <a href=\"https://codeia.cl\">CodeIA.cl</a> — Ideas y demos en evolución.</li>\n</ul>\n<hr>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"⚙️ Historia Técnica: Cómo Usé FastMCP para Crear Servidores MCP Inteligentes en Python (Casos Reales)","description":"Un relato práctico y entretenido sobre cómo FastMCP permitió construir servidores MCP conectados a inteligencia artificial, microservicios y reportes en tiempo real con Python, incluyendo ejemplos reales como FlipReady y CodeIA.","tags":["Python","FastMCP","Inteligencia Artificial","Microservicios","Historias Técnicas","Langflow"],"time":12,"timestamp":"2025-05-12T00:00:00-0400","featured":true,"filename":"2025-05-12_fastmcp-servidores-python-inteligentes"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-05-12_fastmcp-servidores-python-inteligentes.md";
				const url = "/blog/2025-05-12_fastmcp-servidores-python-inteligentes";
				function rawContent() {
					return "   \n                                        \n                                                                                                              \n                                                                                                                                                                                                                                                   \n                                                                                                          \n        \n                                     \n              \n                                                             \n   \n\n# FastMCP: Construye Servidores MCP en Python de Forma Inteligente 🚀\n\n## 📖 Introducción: Una Historia sobre Componentes Inteligentes\n\nImagínate que eres un desarrollador en una startup llamada \"TechInsights\". Un día tu jefe llega con un reto:\n\n> \"Necesitamos una aplicación inteligente que pueda responder preguntas sobre el clima, generar reportes automáticos, y almacenar historial para consultas futuras. Ah, y por cierto, tiene que estar lista para ayer.\"\n\n¿Suena familiar? Este escenario, que podría parecer sacado de una serie de comedia techie, es parte de mi día a día en proyectos como los que desarrollo en [CodeIA.cl](https://codeia.cl), donde construimos soluciones basadas en inteligencia artificial, APIs conectadas y componentes que se pueden reutilizar y combinar como piezas de LEGO. 🌐🤖\n\nAquí es donde entra FastMCP: una herramienta increíblemente útil que simplifica la creación de servidores MCP (Model Context Protocol), permitiéndote crear rápidamente aplicaciones inteligentes y modulares en Python.\n\n---\n\n## 🌟 ¿Por qué Elegir FastMCP?\n\nFastMCP simplifica considerablemente la creación y gestión de contextos en aplicaciones inteligentes. Algunas razones para elegirlo:\n\n- 🔄 Fácil integración con IA y APIs externas.\n- 📦 Componentes modulares reutilizables.\n- 🚀 Rápido desarrollo basado en FastAPI.\n- 🧠 Compatible con arquitecturas como LangChain, RAG o agentes de Ollama.\n- 🎯 Optimización del flujo de trabajo para equipos ágiles y soluciones que requieren adaptabilidad.\n\n### En palabras simples:\nSi alguna vez has querido crear una app modular donde puedas decir \"conéctame este servicio de clima a este generador de PDFs y mándalo por correo si las ventas bajan\", **FastMCP te permite hacerlo**. Lo uso en proyectos como `FlipReady`, donde automatizamos check-in y limpieza de hospedajes tipo Airbnb con agentes MCP conectados.\n\n---\n\n## 🛠️ Manos a la Obra: Ejemplos Claros y Divertidos\n\n### 📌 Ejemplo Simple: Obteniendo el Clima en Segundos\n\n```python\nfrom fastmcp import FastMCP\nimport requests\n\napp = FastMCP(\"WeatherAssistant\")\n\n@app.tool()\ndef obtener_clima(ciudad: str):\n    API_KEY = \"tu_api_key\"\n    url = f\"https://api.openweathermap.org/data/2.5/weather?q={ciudad}&appid={API_KEY}&units=metric\"\n    respuesta = requests.get(url).json()\n    return {\n        \"temperatura\": respuesta[\"main\"][\"temp\"],\n        \"descripcion\": respuesta[\"weather\"][0][\"description\"]\n    }\n```\n\n### 🚀 Ejemplo Avanzado: Generación Automática de Reportes\n\n```python\n@app.resource(\"reporte://{fecha}\")\ndef generar_reporte(fecha: str):\n    return f\"Reporte para {fecha}: Se lograron ventas por $15,000.\"\n\n@app.tool()\ndef enviar_reporte(fecha: str):\n    reporte = generar_reporte(fecha)\n    return f\"Reporte enviado: {reporte}\"\n```\n\n---\n\n## 💡 Aplicación Real: Fake News Verifier con Langflow y FastMCP\n\nUno de mis proyectos favoritos en [Langflow](https://langflow.org) fue construir un verificador de fake news con múltiples nodos MCP.\n\n---\n\n## 🧩 Caso Práctico: Dashboard Modular con FastMCP\n\nEn CodeIA usamos FastMCP para alimentar dashboards en tiempo real que miden métricas clave.\n\n---\n\n## ⚙️ Integración con Ollama, RAG, LangChain y más\n\nFastMCP no vive en una isla. Se lleva bien con herramientas modernas de IA.\n\n---\n\n## 🧪 Ideas para Proyectos Reales Usando FastMCP\n\n1. Asistente de correos, diagnósticos IA, gestores de limpieza, asistentes educativos y más.\n\n---\n\n## 📈 Beneficios Tangibles para Desarrolladores\n\n- Modularidad, escalabilidad, compatibilidad, rapidez.\n\n---\n\n## 🧠 Conclusión Extendida\n\nFastMCP representa una forma moderna, rápida y divertida de construir servidores inteligentes. Úsalo en tus MVPs, sistemas backend o experimentos IA.\n\n---\n\n## 📎 Recursos Recomendados\n\n- 🔗 Documentación en PyPI: [https://pypi.org/project/fastmcp/1.0/](https://pypi.org/project/fastmcp/1.0/)\n- 📰 Artículo de introducción en DEV.to: [https://dev.to/mayankcse/fastmcp-simplifying-ai-context-management-with-the-model-context-protocol-37l9](https://dev.to/mayankcse/fastmcp-simplifying-ai-context-management-with-the-model-context-protocol-37l9)\n- 💡 Proyecto en desarrollo: [CodeIA.cl](https://codeia.cl) — Ideas y demos en evolución.\n\n---\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"fastmcp-construye-servidores-mcp-en-python-de-forma-inteligente","text":"FastMCP: Construye Servidores MCP en Python de Forma Inteligente 🚀"},{"depth":2,"slug":"-introducción-una-historia-sobre-componentes-inteligentes","text":"📖 Introducción: Una Historia sobre Componentes Inteligentes"},{"depth":2,"slug":"-por-qué-elegir-fastmcp","text":"🌟 ¿Por qué Elegir FastMCP?"},{"depth":3,"slug":"en-palabras-simples","text":"En palabras simples:"},{"depth":2,"slug":"️-manos-a-la-obra-ejemplos-claros-y-divertidos","text":"🛠️ Manos a la Obra: Ejemplos Claros y Divertidos"},{"depth":3,"slug":"-ejemplo-simple-obteniendo-el-clima-en-segundos","text":"📌 Ejemplo Simple: Obteniendo el Clima en Segundos"},{"depth":3,"slug":"-ejemplo-avanzado-generación-automática-de-reportes","text":"🚀 Ejemplo Avanzado: Generación Automática de Reportes"},{"depth":2,"slug":"-aplicación-real-fake-news-verifier-con-langflow-y-fastmcp","text":"💡 Aplicación Real: Fake News Verifier con Langflow y FastMCP"},{"depth":2,"slug":"-caso-práctico-dashboard-modular-con-fastmcp","text":"🧩 Caso Práctico: Dashboard Modular con FastMCP"},{"depth":2,"slug":"️-integración-con-ollama-rag-langchain-y-más","text":"⚙️ Integración con Ollama, RAG, LangChain y más"},{"depth":2,"slug":"-ideas-para-proyectos-reales-usando-fastmcp","text":"🧪 Ideas para Proyectos Reales Usando FastMCP"},{"depth":2,"slug":"-beneficios-tangibles-para-desarrolladores","text":"📈 Beneficios Tangibles para Desarrolladores"},{"depth":2,"slug":"-conclusión-extendida","text":"🧠 Conclusión Extendida"},{"depth":2,"slug":"-recursos-recomendados","text":"📎 Recursos Recomendados"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
