/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"bff-con-go-parte-5-observabilidad-feature-flags-y-entornos-️️\">BFF con Go (Parte 5): Observabilidad, Feature Flags y Entornos 👁️‍🗨️🚩🌍</h1>\n<p>Después de asegurar, testear, documentar y desplegar nuestro BFF en Go, en esta quinta parte nos enfocamos en <strong>cómo mantenerlo operativo, flexible y adaptable en producción</strong>.</p>\n<p>Veremos cómo:</p>\n<ul>\n<li>👁️‍🗨️ Añadir observabilidad con logs estructurados y trazas</li>\n<li>🚩 Aplicar feature flags sin redeploys</li>\n<li>🌍 Separar entornos de forma segura con archivos <code>.env</code> y variables de entorno</li>\n</ul>\n<hr>\n<h2 id=\"️️-1-observabilidad-con-logs-estructurados-y-trazabilidad\">👁️‍🗨️ 1. Observabilidad con logs estructurados y trazabilidad</h2>\n<p>Usa <code>logrus</code> o <code>zap</code> para logging estructurado:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> github.com/sirupsen/logrus</span></span></code></pre>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> log </span><span style=\"color:#9ECBFF\">\"</span><span style=\"color:#B392F0\">github.com/sirupsen/logrus</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">log.</span><span style=\"color:#B392F0\">SetFormatter</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#F97583\">&#x26;</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">JSONFormatter</span><span style=\"color:#E1E4E8\">{})</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">log.</span><span style=\"color:#B392F0\">WithFields</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#B392F0\">log</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Fields</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"endpoint\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"/users\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"status\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">200</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}).</span><span style=\"color:#B392F0\">Info</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"Request procesado\"</span><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<p>Para trazabilidad distribuida, puedes integrar OpenTelemetry:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> go.opentelemetry.io/otel/sdk</span></span></code></pre>\n<p>Y propagar <code>trace_id</code> por headers para seguir requests entre microservicios.</p>\n<hr>\n<h2 id=\"-2-feature-flags\">🚩 2. Feature Flags</h2>\n<p>Utiliza herramientas como <a href=\"https://www.getunleash.io/\">Unleash</a> o <a href=\"https://flagsmith.com/\">Flagsmith</a> para activar o desactivar funcionalidades dinámicamente:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> featureFlags.</span><span style=\"color:#B392F0\">IsEnabled</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"nueva_pagina\"</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  renderNewPage</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">} </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  renderOldPage</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>También puedes hacerlo con simples variables de entorno mientras creces:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> os.</span><span style=\"color:#B392F0\">Getenv</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"FEATURE_NUEVA_PAGINA\"</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#F97583\">==</span><span style=\"color:#9ECBFF\"> \"true\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D\">  // Activar nueva funcionalidad</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Esto evita redeploys y permite pruebas A/B.</p>\n<hr>\n<h2 id=\"-3-separación-de-entornos-con-env\">🌍 3. Separación de entornos con <code>.env</code></h2>\n<p>Usa <a href=\"https://github.com/joho/godotenv\"><code>github.com/joho/godotenv</code></a> para cargar variables de entorno:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> github.com/joho/godotenv</span></span></code></pre>\n<p>Crea un archivo <code>.env</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>ENV=development</span></span>\n<span class=\"line\"><span>PORT=8080</span></span>\n<span class=\"line\"><span>JWT_SECRET=superclave</span></span></code></pre>\n<p>Y cárgalo en <code>main.go</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#9ECBFF\"> \"</span><span style=\"color:#B392F0\">github.com/joho/godotenv</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">dotenv.</span><span style=\"color:#B392F0\">Load</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">port </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> os.</span><span style=\"color:#B392F0\">Getenv</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"PORT\"</span><span style=\"color:#E1E4E8\">)</span></span></code></pre>\n<p>Esto permite tener <code>.env.development</code>, <code>.env.production</code>, etc., y cargar según el entorno.</p>\n<hr>\n<h2 id=\"-cierre\">🚀 Cierre</h2>\n<p>Tu BFF ahora es:</p>\n<ul>\n<li>🔍 Observable</li>\n<li>⚙️ Configurable por entorno</li>\n<li>🚩 Flexible con feature flags</li>\n</ul>\n<p>Ya tienes una base profesional para operar en producción y escalar funcionalidad de forma segura.</p>\n<p>¿Te gustaría una Parte 6 conectando con frontend en React o Flutter? Escríbeme en <a href=\"https://codeia.cl\">codeIA.cl</a> o déjame tu comentario. 👨‍💻✨</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"BFF con Go (Parte 5): Observabilidad, Feature Flags y Entornos","description":"En esta quinta parte exploramos cómo mejorar la observabilidad de tu BFF en Go, manejar entornos de forma segura y aplicar feature flags.","tags":["golang","bff","observabilidad","feature flags","entornos","configuración"],"time":10,"featured":true,"timestamp":"2025-04-02T10:00:00-0300","filename":"2025-04-02_BFF-Golang-Parte5"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-04-02_BFF-Golang-Parte5.md";
				const url = "/blog/2025-04-02_BFF-Golang-Parte5";
				function rawContent() {
					return "   \n                                        \n                                                                       \n                                                                                                                                                        \n                                                                                       \n        \n              \n                                     \n                                        \n   \n\n# BFF con Go (Parte 5): Observabilidad, Feature Flags y Entornos 👁️‍🗨️🚩🌍\n\nDespués de asegurar, testear, documentar y desplegar nuestro BFF en Go, en esta quinta parte nos enfocamos en **cómo mantenerlo operativo, flexible y adaptable en producción**.\n\nVeremos cómo:\n\n- 👁️‍🗨️ Añadir observabilidad con logs estructurados y trazas\n- 🚩 Aplicar feature flags sin redeploys\n- 🌍 Separar entornos de forma segura con archivos `.env` y variables de entorno\n\n---\n\n## 👁️‍🗨️ 1. Observabilidad con logs estructurados y trazabilidad\n\nUsa `logrus` o `zap` para logging estructurado:\n\n```bash\ngo get github.com/sirupsen/logrus\n```\n\n```go\nimport log \"github.com/sirupsen/logrus\"\n\nlog.SetFormatter(&log.JSONFormatter{})\nlog.WithFields(log.Fields{\n  \"endpoint\": \"/users\",\n  \"status\": 200,\n}).Info(\"Request procesado\")\n```\n\nPara trazabilidad distribuida, puedes integrar OpenTelemetry:\n\n```bash\ngo get go.opentelemetry.io/otel/sdk\n```\n\nY propagar `trace_id` por headers para seguir requests entre microservicios.\n\n---\n\n## 🚩 2. Feature Flags\n\nUtiliza herramientas como [Unleash](https://www.getunleash.io/) o [Flagsmith](https://flagsmith.com/) para activar o desactivar funcionalidades dinámicamente:\n\n```go\nif featureFlags.IsEnabled(\"nueva_pagina\") {\n  renderNewPage()\n} else {\n  renderOldPage()\n}\n```\n\nTambién puedes hacerlo con simples variables de entorno mientras creces:\n\n```go\nif os.Getenv(\"FEATURE_NUEVA_PAGINA\") == \"true\" {\n  // Activar nueva funcionalidad\n}\n```\n\nEsto evita redeploys y permite pruebas A/B.\n\n---\n\n## 🌍 3. Separación de entornos con `.env`\n\nUsa [`github.com/joho/godotenv`](https://github.com/joho/godotenv) para cargar variables de entorno:\n\n```bash\ngo get github.com/joho/godotenv\n```\n\nCrea un archivo `.env`:\n\n```\nENV=development\nPORT=8080\nJWT_SECRET=superclave\n```\n\nY cárgalo en `main.go`:\n\n```go\nimport \"github.com/joho/godotenv\"\n\ndotenv.Load()\nport := os.Getenv(\"PORT\")\n```\n\nEsto permite tener `.env.development`, `.env.production`, etc., y cargar según el entorno.\n\n---\n\n## 🚀 Cierre\n\nTu BFF ahora es:\n- 🔍 Observable\n- ⚙️ Configurable por entorno\n- 🚩 Flexible con feature flags\n\nYa tienes una base profesional para operar en producción y escalar funcionalidad de forma segura.\n\n¿Te gustaría una Parte 6 conectando con frontend en React o Flutter? Escríbeme en [codeIA.cl](https://codeia.cl) o déjame tu comentario. 👨‍💻✨\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"bff-con-go-parte-5-observabilidad-feature-flags-y-entornos-️️","text":"BFF con Go (Parte 5): Observabilidad, Feature Flags y Entornos 👁️‍🗨️🚩🌍"},{"depth":2,"slug":"️️-1-observabilidad-con-logs-estructurados-y-trazabilidad","text":"👁️‍🗨️ 1. Observabilidad con logs estructurados y trazabilidad"},{"depth":2,"slug":"-2-feature-flags","text":"🚩 2. Feature Flags"},{"depth":2,"slug":"-3-separación-de-entornos-con-env","text":"🌍 3. Separación de entornos con .env"},{"depth":2,"slug":"-cierre","text":"🚀 Cierre"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
