/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"angular-arquitectura-hexagonal-hipotesis\">Angular Arquitectura Hexagonal: {hipotesis}</h1>\n<p>Llevo aproximadamente un mes pensando como podr√≠a organizar una aplicaci√≥n Angular que ha tenido un crecimiento acelerado, buscando‚Ä¶</p>\n<hr>\n<h3 id=\"angular-arquitectura-hexagonal-hipotesis-1\">Angular Arquitectura Hexagonal: {hipotesis}</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*HfAODU-S9wFn0Ws1.jpg\" alt=\"\"></p>\n<p>Llevo aproximadamente un mes pensando como podr√≠a organizar una aplicaci√≥n Angular que ha tenido un crecimiento acelerado, buscando t√©cnicas para manejar de mejor forma el estado, como implementar alg√∫n patr√≥n como Redux, y solucionar la arquitectura de esta para que pueda escalar f√°cilmente.</p>\n<p>Si est√°s familiarizado con el Framework Angular, entonces sabr√°s que desde las primeras versiones (Angular 2), el framework y su CLI ayuda bastante en la organizaci√≥n del c√≥digo fuente. Esto fue mejorando cada vez m√°s a medida que avanzaban las versiones. Entonces, ¬øpor qu√© diablos deber√≠a preocuparse por utilizar un patr√≥n de arquitectura aplicaciones web?¬Ø\\_( Õ°‚ùõ Õú ñ Õ°‚ùõ)_/¬Ø Primero explicare de que se tratan todos los rumores sobre arquitectura limpia (Clean Code).</p>\n<h3 id=\"qu√©-es-la-arquitectura-limpia\">¬øQu√© es la arquitectura limpia?</h3>\n<p>En resumen: Clean Architecture es un patr√≥n para estructurar la arquitectura de una aplicaci√≥n en general. Fue introducido originalmente por Robert C Martin, tambi√©n conocido como el t√≠o Bob, quien tambi√©n public√≥ muchos art√≠culos y libros sobre c√≥mo escribir c√≥digo limpio y reutilizable. Su libro, Arquitectura limpia, resume sus pensamientos y sugerencias sobre c√≥mo mejorar la estructura de su aplicaci√≥n en un nivel superior al c√≥digo limpio.</p>\n<p>El investig√≥ sobre el dise√±o de arquitectura en com√∫n y descubri√≥ que los principios de arquitectura m√°s populares (por ejemplo, solo por nombrar algunos: Arquitectura hexagonal, Arquitectura de capas) tienen un objetivo principal: construir alg√∫n tipo de capas de aplicaci√≥n y crear una separaci√≥n de responsabilidades. Tambi√©n vio que cada arquitectura intenta al menos separar la l√≥gica empresarial del resto de la aplicaci√≥n y que estas arquitecturas producen sistemas que son:</p>\n<ol>\n<li><strong>Independiente de los framework:</strong> tu aplicaci√≥n no debe ser impulsada por el framework que utiliza.</li>\n<li><strong>Comprobable:</strong> tu aplicaci√≥n y la l√≥gica empresarial deben poder comprobarse sin depender de la interfaz de usuario, la base de datos o la API web.(en lo personal sufro constantemente del fuerte acoplamiento en aplicaciones¬Ø\\_( Õ°üëÅÔ∏è Õú ñ Õ°üëÅÔ∏è)_/¬Ø)</li>\n<li><strong>Independiente de la interfaz de usuario: la interfaz de usuario de</strong> sus aplicaciones debe controlar la l√≥gica de su negocio, pero no debe controlar c√≥mo se estructura el flujo de datos.</li>\n<li><strong>Independiente de la base de datos:</strong> su aplicaci√≥n no debe estar dise√±ada por el tipo de base de datos que est√° utilizando. A tu l√≥gica empresarial no le importa si sus entidades de datos se almacenan en un almac√©n de documentos, una base de datos relacional o en la memoria.</li>\n<li><strong>Independiente de cualquier agente externo:</strong> tus reglas de negocio solo deben preocuparse por su propia tarea y no por cualquier otra cosa que posiblemente viva en su aplicaci√≥n.</li>\n</ol>\n<p>Entonces, ¬øqu√© significa esto para nuestro desarrollo de aplicaciones web con Angular? Intentemos aplicar estos puntos a nuestro framework Angular:</p>\n<ol>\n<li><strong>Independiente de los framework:</strong> nuestra l√≥gica y reglas de negocio no deber√≠an verse afectadas por ninguna funcionalidad o estructura del framework angular. Esto logra m√°s flexibilidad al actualizar a nuevas versiones (que pueden introducir una nueva ‚Äúarquitectura‚Äù / estructura de proyecto) o cambiar a un framework completamente diferente, porque no tenemos que depender de ning√∫n elemento espec√≠fico del framework. Y tambi√©n se dirige al siguiente punto: ¬°Testeabilidad!</li>\n<li><strong>Comprobable:</strong> Considerado <strong><em>ingenuamente</em></strong>, solo tenemos que probar nuestra l√≥gica y reglas de negocio, lo que hace que las pruebas sean mucho m√°s f√°ciles. Entonces, para probar la funcionalidad principal de nuestra aplicaci√≥n, no se necesitan pruebas unitarias de Angular con Karma o Jest (en teor√≠a).</li>\n<li><strong>Independiente de la interfaz de usuario:</strong> las reglas de negocio no se preocupan por c√≥mo se activan o controlan. Por lo tanto, no se debe colocar ninguna l√≥gica comercial dentro de ning√∫n controlador de interfaz de usuario.</li>\n<li><strong>Independiente de la base de datos:</strong> en general, a las aplicaciones web no les importa mucho el uso de bases de datos, porque en su mayor√≠a se alimentan a trav√©s de API. Pero al observar el patr√≥n de los repositorios, la mayor√≠a de las aplicaciones realizan alg√∫n tipo de operaciones CRUD en alg√∫n momento. Estos tambi√©n se pueden resumir en repositorios. M√°s adelante en este art√≠culo, ver√°s c√≥mo los repositorios y las API se integran perfectamente.</li>\n<li><strong>Independiente de cualquier agente externo:</strong> como ya se mencion√≥, nuestra l√≥gica de aplicaci√≥n central no deber√≠a depender de la funcionalidad del framework Angular.</li>\n</ol>\n<hr>\n<h3 id=\"estructurar-el-proyectoenteor√≠a\">Estructurar el proyecto‚Ää‚Äî‚Ääen¬†teor√≠a</h3>\n<p>Si ya has le√≠do sobre la creaci√≥n de aplicaciones con el patr√≥n Arquitectura limpia, definitivamente deber√≠a haber visto el siguiente diagrama que explica la estructura general.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*iOuclFm8Yyu7CkYX.jpeg\" alt=\"\"></p>\n<p>Diagrama cl√°sico de arquitectura limpia</p>\n<p>Solo para resumir los conceptos b√°sicos, el esp√≠ritu de la arquitectura limpia se basa en la construcci√≥n de capas de aplicaci√≥n que dan forma, como ya se mencion√≥, una separaci√≥n de preocupaciones. Adem√°s, existen algunas reglas sobre c√≥mo estas capas deben interactuar entre s√≠:</p>\n<ol>\n<li><strong>Entidades centrales</strong>: Estos son modelos de datos simples que son esencialmente necesarios para representar nuestra l√≥gica central, construir un flujo de datos y hacer que nuestra reglas de negocios funcione.</li>\n<li><strong>Casos de uso</strong>: se basan en las entidades principales e implementan toda la l√≥gica de negocio de la aplicaci√≥n. Los casos de uso deben <strong>‚Äúvivir en su propio mundo‚Äù</strong> y solo hacer lo que se supone que deben hacer.</li>\n<li><strong>Regla de dependencia</strong>: cada capa solo debe tener acceso a la capa inferior. Por lo tanto, la capa de casos de uso solo debe usar entidades que est√°n especificadas en la capa de entidades, y el controlador solo debe usar casos de uso de la capa de casos de uso a continuaci√≥n. Comprenderas mejor c√≥mo funciona esto cuando eche un vistazo al art√≠culo pr√°ctico.</li>\n<li><strong>Adaptadores de interfaz</strong>: para obtener una arquitectura funcional m√°s all√° del borde de cada capa, la mejor manera es trabajar con adaptadores de interfaz desde el n√∫cleo (capa de entidad y caso de uso) para garantizar una estructura homog√©nea en todos los proyectos, que encaja como un rompecabezas en el final.</li>\n</ol>\n<hr>\n<h3 id=\"estructurar-el-proyectoen-lapr√°ctica\">Estructurar el proyecto‚Ää‚Äî‚Ääen la¬†pr√°ctica</h3>\n<blockquote>\n<p>Debido a que el diagrama de Arquitectura limpia y las reglas son muy generales, intentemos desglosarlo y ponerlo m√°s en nuestro contexto de desarrollo web. Al principio, me gusta aclarar que la Arquitectura Limpia es un patr√≥n general que se supone que funciona en diferentes plataformas y va desde el backend al m√≥vil hasta las aplicaciones web. Eso significa que no existe la mejor manera de implementarlo. El enfoque mostrado en esta serie de art√≠culos se inspir√≥ principalmente en un art√≠culo sobre <strong>Speakerdeck de Marko Milos</strong>.</p>\n</blockquote>\n<p>La mejor manera de mapear el principio de capa en un proyecto y estructura de c√≥digo es mediante el uso de alg√∫n tipo de paquetes y agrupar todas las clases e interfaces relacionadas con la capa. Recuerda, solo las capas superiores pueden acceder a las capas inferiores, no al rev√©s. Para garantizar la interoperabilidad entre las capas, tambi√©n es una buena idea especificar interfaces (por ejemplo, repositorios) en una capa muy baja.</p>\n<p>La mayor√≠a de las aplicaciones web son alg√∫n tipo de aplicaciones CRUD, por lo que nos centraremos en los repositorios / API CRUD en esta serie. As√≠ que supongamos que tenemos las siguientes capas de paquetes:</p>\n<ol>\n<li><strong>N√∫cleo:</strong> el paquete central agrega entidades centrales, casos de uso y definiciones de interfaz, porque est√°n estrechamente vinculadas. Los casos de uso acceden a las entidades directamente y tambi√©n tienen que trabajar con interfaces dentro de la l√≥gica de negocio, como guardar datos en repositorios. Dado que nuestro paquete principal, de acuerdo con la regla de dependencia, no debe tener ning√∫n conocimiento sobre la l√≥gica del repositorio real, pero debe saber c√≥mo llamar a una interacci√≥n con un repositorio, debe representarse como una interfaz independiente.</li>\n<li><strong>Datos:</strong> esta capa se ocupa de implementar las interfaces de datos reales y vincula la l√≥gica de ahorro de datos espec√≠fica del marco (por ejemplo, guardar datos en un almacenamiento local o enviarlos a una API) a un adaptador interactiva para nuestro caso de uso especificado en la capa subyacente.</li>\n<li><strong>Presentaci√≥n:</strong> La capa de presentaci√≥n contiene la estructura angular cl√°sica con componentes y vistas como ya los conoce. Cada componente ahora puede hacer uso de los casos de uso previamente definidos para llenar los componentes con l√≥gica empresarial.</li>\n<li><strong>Configuraci√≥n:</strong> en contextos no angulares, podr√≠amos hacer uso de una capa de configuraci√≥n, que proporciona una abstracci√≥n de la inyecci√≥n de dependencias y otros elementos configurables. Pero como queremos simplificar las cosas en esta introducci√≥n, usaremos directamente m√≥dulos Angular para estructurar nuestra aplicaci√≥n y manejar la inyecci√≥n de dependencias.</li>\n</ol>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*DdowTcRcnZ3GBK6a.png\" alt=\"\"></p>\n<p>Distribuci√≥n de clases y entidades en tres capas.</p>\n<h3 id=\"mapeadores-y-objetos-de-datos-espec√≠ficos-de-lacapa\">Mapeadores y objetos de datos espec√≠ficos de la¬†capa</h3>\n<p>Hasta ahora todo va bien, ahora sabemos c√≥mo se puede estructurar nuestro proyecto. Una √∫ltima cosa a mencionar es la importancia de los objetos de datos en toda la arquitectura: dado que nuestro paquete principal abstrae la l√≥gica empresarial a trav√©s de casos de uso y entidades, cada capa de aplicaci√≥n tiene que manejarlos. Pero los objetos de datos en la capa de datos o presentaci√≥n no son en su mayor√≠a los mismos que se utilizan en la l√≥gica de negocio. Esto se debe a que las API a menudo brindan m√°s informaci√≥n, los repositorios de datos necesitan alguna funcionalidad de mapeo para miembros de objetos o los objetos de datos de presentaci√≥n necesitan algunos campos m√°s para mostrar los datos seg√∫n sea necesario. Para hacer frente a esto, se recomienda encarecidamente hacer uso de objetos de datos espec√≠ficos de la capa y mapearlos desde y hacia las entidades centrales al transferir datos de casos de uso a repositorios o capas de presentaci√≥n.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*XgPryww6mUFUFiXp\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*x0xPdToPBaWqtC6P.png\" alt=\"\"></p>\n<p>Proceso de mapeo al guardar y leer una entidad de la capa de presentaci√≥n en una base de datos o API.</p>\n<p>Despu√©s de haber visto en teor√≠a c√≥mo se puede estructurar un proyecto de aplicaci√≥n web seg√∫n la Arquitectura Limpia, veamos c√≥mo podemos implementar este patr√≥n en la pr√°ctica. Revisaremos todas las capas y veremos qu√© se implementa all√≠. Espero que hayas disfrutado de mi peque√±a introducci√≥n al mundo de la Arquitectura Limpia y que te ayude al menos con el √∫ltimo punto en contra: ¬°Minimiza la curva de aprendizaje! üòä En un proximo articulo veremos un peque√±o proyecto con esta implementaci√≥n (tal vez sea un video)</p>\n<p><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\" title=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"><strong>Donate to devjaime</strong><br>\n_Help support devjaime by donating or sharing with your friends._www.paypal.com</a><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hern√°ndez</a> on <a href=\"https://medium.com/p/a2cfa0b94a07\">April 6, 2021</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/angular-arquitectura-hexagonal-hipotesis-a2cfa0b94a07\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Angular Arquitectura Hexagonal: {hipotesis}","description":"","tags":["code","html","Angular","javascript"],"time":4,"featured":true,"timestamp":"2021-04-06T12:20:31-0300","filename":"2021-04-06_Angular-Arquitectura-Hexagonal---hipotesis--a2cfa0b94a07"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2021-04-06_Angular-Arquitectura-Hexagonal---hipotesis--a2cfa0b94a07.md";
				const url = "/blog/2021-04-06_Angular-Arquitectura-Hexagonal---hipotesis--a2cfa0b94a07";
				function rawContent() {
					return "   \n                                        \n                                                    \n               \n                                               \n       \n              \n                                     \n                                                                               \n   \n\nAngular Arquitectura Hexagonal: {hipotesis}\n===========================================\n\nLlevo aproximadamente un mes pensando como podr√≠a organizar una aplicaci√≥n Angular que ha tenido un crecimiento acelerado, buscando‚Ä¶\n\n* * *\n\n### Angular Arquitectura Hexagonal: {hipotesis}\n\n![](https://cdn-images-1.medium.com/max/800/0*HfAODU-S9wFn0Ws1.jpg)\n\nLlevo aproximadamente un mes pensando como podr√≠a organizar una aplicaci√≥n Angular que ha tenido un crecimiento acelerado, buscando t√©cnicas para manejar de mejor forma el estado, como implementar alg√∫n patr√≥n como Redux, y solucionar la arquitectura de esta para que pueda escalar f√°cilmente.\n\nSi est√°s familiarizado con el Framework Angular, entonces sabr√°s que desde las primeras versiones (Angular 2), el framework y su CLI ayuda bastante en la organizaci√≥n del c√≥digo fuente. Esto fue mejorando cada vez m√°s a medida que avanzaban las versiones. Entonces, ¬øpor qu√© diablos deber√≠a preocuparse por utilizar un patr√≥n de arquitectura aplicaciones web?¬Ø\\\\\\_( Õ°‚ùõ Õú ñ Õ°‚ùõ)\\_/¬Ø Primero explicare de que se tratan todos los rumores sobre arquitectura limpia (Clean Code).\n\n### ¬øQu√© es la arquitectura limpia?\n\nEn resumen: Clean Architecture es un patr√≥n para estructurar la arquitectura de una aplicaci√≥n en general. Fue introducido originalmente por Robert C Martin, tambi√©n conocido como el t√≠o Bob, quien tambi√©n public√≥ muchos art√≠culos y libros sobre c√≥mo escribir c√≥digo limpio y reutilizable. Su libro, Arquitectura limpia, resume sus pensamientos y sugerencias sobre c√≥mo mejorar la estructura de su aplicaci√≥n en un nivel superior al c√≥digo limpio.\n\nEl investig√≥ sobre el dise√±o de arquitectura en com√∫n y descubri√≥ que los principios de arquitectura m√°s populares (por ejemplo, solo por nombrar algunos: Arquitectura hexagonal, Arquitectura de capas) tienen un objetivo principal: construir alg√∫n tipo de capas de aplicaci√≥n y crear una separaci√≥n de responsabilidades. Tambi√©n vio que cada arquitectura intenta al menos separar la l√≥gica empresarial del resto de la aplicaci√≥n y que estas arquitecturas producen sistemas que son:\n\n1.  **Independiente de los framework:** tu aplicaci√≥n no debe ser impulsada por el framework que utiliza.\n2.  **Comprobable:** tu aplicaci√≥n y la l√≥gica empresarial deben poder comprobarse sin depender de la interfaz de usuario, la base de datos o la API web.(en lo personal sufro constantemente del fuerte acoplamiento en aplicaciones¬Ø\\\\\\_( Õ°üëÅÔ∏è Õú ñ Õ°üëÅÔ∏è)\\_/¬Ø)\n3.  **Independiente de la interfaz de usuario: la interfaz de usuario de** sus aplicaciones debe controlar la l√≥gica de su negocio, pero no debe controlar c√≥mo se estructura el flujo de datos.\n4.  **Independiente de la base de datos:** su aplicaci√≥n no debe estar dise√±ada por el tipo de base de datos que est√° utilizando. A tu l√≥gica empresarial no le importa si sus entidades de datos se almacenan en un almac√©n de documentos, una base de datos relacional o en la memoria.\n5.  **Independiente de cualquier agente externo:** tus reglas de negocio solo deben preocuparse por su propia tarea y no por cualquier otra cosa que posiblemente viva en su aplicaci√≥n.\n\nEntonces, ¬øqu√© significa esto para nuestro desarrollo de aplicaciones web con Angular? Intentemos aplicar estos puntos a nuestro framework Angular:\n\n1.  **Independiente de los framework:** nuestra l√≥gica y reglas de negocio no deber√≠an verse afectadas por ninguna funcionalidad o estructura del framework angular. Esto logra m√°s flexibilidad al actualizar a nuevas versiones (que pueden introducir una nueva ‚Äúarquitectura‚Äù / estructura de proyecto) o cambiar a un framework completamente diferente, porque no tenemos que depender de ning√∫n elemento espec√≠fico del framework. Y tambi√©n se dirige al siguiente punto: ¬°Testeabilidad!\n2.  **Comprobable:** Considerado **_ingenuamente_**, solo tenemos que probar nuestra l√≥gica y reglas de negocio, lo que hace que las pruebas sean mucho m√°s f√°ciles. Entonces, para probar la funcionalidad principal de nuestra aplicaci√≥n, no se necesitan pruebas unitarias de Angular con Karma o Jest (en teor√≠a).\n3.  **Independiente de la interfaz de usuario:** las reglas de negocio no se preocupan por c√≥mo se activan o controlan. Por lo tanto, no se debe colocar ninguna l√≥gica comercial dentro de ning√∫n controlador de interfaz de usuario.\n4.  **Independiente de la base de datos:** en general, a las aplicaciones web no les importa mucho el uso de bases de datos, porque en su mayor√≠a se alimentan a trav√©s de API. Pero al observar el patr√≥n de los repositorios, la mayor√≠a de las aplicaciones realizan alg√∫n tipo de operaciones CRUD en alg√∫n momento. Estos tambi√©n se pueden resumir en repositorios. M√°s adelante en este art√≠culo, ver√°s c√≥mo los repositorios y las API se integran perfectamente.\n5.  **Independiente de cualquier agente externo:** como ya se mencion√≥, nuestra l√≥gica de aplicaci√≥n central no deber√≠a depender de la funcionalidad del framework Angular.\n\n* * *\n\n### Estructurar el proyecto‚Ää‚Äî‚Ääen¬†teor√≠a\n\nSi ya has le√≠do sobre la creaci√≥n de aplicaciones con el patr√≥n Arquitectura limpia, definitivamente deber√≠a haber visto el siguiente diagrama que explica la estructura general.\n\n![](https://cdn-images-1.medium.com/max/800/0*iOuclFm8Yyu7CkYX.jpeg)\n\nDiagrama cl√°sico de arquitectura limpia\n\nSolo para resumir los conceptos b√°sicos, el esp√≠ritu de la arquitectura limpia se basa en la construcci√≥n de capas de aplicaci√≥n que dan forma, como ya se mencion√≥, una separaci√≥n de preocupaciones. Adem√°s, existen algunas reglas sobre c√≥mo estas capas deben interactuar entre s√≠:\n\n1.  **Entidades centrales**: Estos son modelos de datos simples que son esencialmente necesarios para representar nuestra l√≥gica central, construir un flujo de datos y hacer que nuestra reglas de negocios funcione.\n2.  **Casos de uso**: se basan en las entidades principales e implementan toda la l√≥gica de negocio de la aplicaci√≥n. Los casos de uso deben **‚Äúvivir en su propio mundo‚Äù** y solo hacer lo que se supone que deben hacer.\n3.  **Regla de dependencia**: cada capa solo debe tener acceso a la capa inferior. Por lo tanto, la capa de casos de uso solo debe usar entidades que est√°n especificadas en la capa de entidades, y el controlador solo debe usar casos de uso de la capa de casos de uso a continuaci√≥n. Comprenderas mejor c√≥mo funciona esto cuando eche un vistazo al art√≠culo pr√°ctico.\n4.  **Adaptadores de interfaz**: para obtener una arquitectura funcional m√°s all√° del borde de cada capa, la mejor manera es trabajar con adaptadores de interfaz desde el n√∫cleo (capa de entidad y caso de uso) para garantizar una estructura homog√©nea en todos los proyectos, que encaja como un rompecabezas en el final.\n\n* * *\n\n### Estructurar el proyecto‚Ää‚Äî‚Ääen la¬†pr√°ctica\n\n> Debido a que el diagrama de Arquitectura limpia y las reglas son muy generales, intentemos desglosarlo y ponerlo m√°s en nuestro contexto de desarrollo web. Al principio, me gusta aclarar que la Arquitectura Limpia es un patr√≥n general que se supone que funciona en diferentes plataformas y va desde el backend al m√≥vil hasta las aplicaciones web. Eso significa que no existe la mejor manera de implementarlo. El enfoque mostrado en esta serie de art√≠culos se inspir√≥ principalmente en un art√≠culo sobre **Speakerdeck de Marko Milos**.\n\nLa mejor manera de mapear el principio de capa en un proyecto y estructura de c√≥digo es mediante el uso de alg√∫n tipo de paquetes y agrupar todas las clases e interfaces relacionadas con la capa. Recuerda, solo las capas superiores pueden acceder a las capas inferiores, no al rev√©s. Para garantizar la interoperabilidad entre las capas, tambi√©n es una buena idea especificar interfaces (por ejemplo, repositorios) en una capa muy baja.\n\nLa mayor√≠a de las aplicaciones web son alg√∫n tipo de aplicaciones CRUD, por lo que nos centraremos en los repositorios / API CRUD en esta serie. As√≠ que supongamos que tenemos las siguientes capas de paquetes:\n\n1.  **N√∫cleo:** el paquete central agrega entidades centrales, casos de uso y definiciones de interfaz, porque est√°n estrechamente vinculadas. Los casos de uso acceden a las entidades directamente y tambi√©n tienen que trabajar con interfaces dentro de la l√≥gica de negocio, como guardar datos en repositorios. Dado que nuestro paquete principal, de acuerdo con la regla de dependencia, no debe tener ning√∫n conocimiento sobre la l√≥gica del repositorio real, pero debe saber c√≥mo llamar a una interacci√≥n con un repositorio, debe representarse como una interfaz independiente.\n2.  **Datos:** esta capa se ocupa de implementar las interfaces de datos reales y vincula la l√≥gica de ahorro de datos espec√≠fica del marco (por ejemplo, guardar datos en un almacenamiento local o enviarlos a una API) a un adaptador interactiva para nuestro caso de uso especificado en la capa subyacente.\n3.  **Presentaci√≥n:** La capa de presentaci√≥n contiene la estructura angular cl√°sica con componentes y vistas como ya los conoce. Cada componente ahora puede hacer uso de los casos de uso previamente definidos para llenar los componentes con l√≥gica empresarial.\n4.  **Configuraci√≥n:** en contextos no angulares, podr√≠amos hacer uso de una capa de configuraci√≥n, que proporciona una abstracci√≥n de la inyecci√≥n de dependencias y otros elementos configurables. Pero como queremos simplificar las cosas en esta introducci√≥n, usaremos directamente m√≥dulos Angular para estructurar nuestra aplicaci√≥n y manejar la inyecci√≥n de dependencias.\n\n![](https://cdn-images-1.medium.com/max/800/0*DdowTcRcnZ3GBK6a.png)\n\nDistribuci√≥n de clases y entidades en tres capas.\n\n### Mapeadores y objetos de datos espec√≠ficos de la¬†capa\n\nHasta ahora todo va bien, ahora sabemos c√≥mo se puede estructurar nuestro proyecto. Una √∫ltima cosa a mencionar es la importancia de los objetos de datos en toda la arquitectura: dado que nuestro paquete principal abstrae la l√≥gica empresarial a trav√©s de casos de uso y entidades, cada capa de aplicaci√≥n tiene que manejarlos. Pero los objetos de datos en la capa de datos o presentaci√≥n no son en su mayor√≠a los mismos que se utilizan en la l√≥gica de negocio. Esto se debe a que las API a menudo brindan m√°s informaci√≥n, los repositorios de datos necesitan alguna funcionalidad de mapeo para miembros de objetos o los objetos de datos de presentaci√≥n necesitan algunos campos m√°s para mostrar los datos seg√∫n sea necesario. Para hacer frente a esto, se recomienda encarecidamente hacer uso de objetos de datos espec√≠ficos de la capa y mapearlos desde y hacia las entidades centrales al transferir datos de casos de uso a repositorios o capas de presentaci√≥n.\n\n![](https://cdn-images-1.medium.com/max/800/0*XgPryww6mUFUFiXp)\n\n![](https://cdn-images-1.medium.com/max/800/0*x0xPdToPBaWqtC6P.png)\n\nProceso de mapeo al guardar y leer una entidad de la capa de presentaci√≥n en una base de datos o API.\n\nDespu√©s de haber visto en teor√≠a c√≥mo se puede estructurar un proyecto de aplicaci√≥n web seg√∫n la Arquitectura Limpia, veamos c√≥mo podemos implementar este patr√≥n en la pr√°ctica. Revisaremos todas las capas y veremos qu√© se implementa all√≠. Espero que hayas disfrutado de mi peque√±a introducci√≥n al mundo de la Arquitectura Limpia y que te ayude al menos con el √∫ltimo punto en contra: ¬°Minimiza la curva de aprendizaje! üòä En un proximo articulo veremos un peque√±o proyecto con esta implementaci√≥n (tal vez sea un video)\n\n[**Donate to devjaime**  \n_Help support devjaime by donating or sharing with your friends._www.paypal.com](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S \"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\")[](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S)\n\nBy [Jaime Hern√°ndez](https://medium.com/@devjaime) on [April 6, 2021](https://medium.com/p/a2cfa0b94a07).\n\n[Canonical link](https://medium.com/@devjaime/angular-arquitectura-hexagonal-hipotesis-a2cfa0b94a07)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"angular-arquitectura-hexagonal-hipotesis","text":"Angular Arquitectura Hexagonal: ${hipotesis}"},{"depth":3,"slug":"angular-arquitectura-hexagonal-hipotesis-1","text":"Angular Arquitectura Hexagonal: ${hipotesis}"},{"depth":3,"slug":"qu√©-es-la-arquitectura-limpia","text":"¬øQu√© es la arquitectura limpia?"},{"depth":3,"slug":"estructurar-el-proyectoenteor√≠a","text":"Estructurar el proyecto‚Ää‚Äî‚Ääen¬†teor√≠a"},{"depth":3,"slug":"estructurar-el-proyectoen-lapr√°ctica","text":"Estructurar el proyecto‚Ää‚Äî‚Ääen la¬†pr√°ctica"},{"depth":3,"slug":"mapeadores-y-objetos-de-datos-espec√≠ficos-de-lacapa","text":"Mapeadores y objetos de datos espec√≠ficos de la¬†capa"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
