/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"bff-con-go-parte-4-métricas-cicd-y-control-de-acceso\">BFF con Go (Parte 4): Métricas, CI/CD y Control de Acceso 📊🔄🔐</h1>\n<p>Ya tienes un BFF en Go documentado, seguro y dockerizado. En esta cuarta parte, te mostraré cómo llevarlo al siguiente nivel:</p>\n<ul>\n<li>📊 Exponer métricas con Prometheus</li>\n<li>🔄 Automatizar despliegues con GitHub Actions</li>\n<li>🔐 Validar roles y scopes en JWT para control de acceso</li>\n</ul>\n<hr>\n<h2 id=\"-1-exponer-métricas-con-prometheus\">📊 1. Exponer métricas con Prometheus</h2>\n<p>Instala Prometheus middleware para Go:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> get</span><span style=\"color:#9ECBFF\"> github.com/prometheus/client_golang/prometheus/promhttp</span></span></code></pre>\n<p>Agrega el endpoint <code>/metrics</code> en <code>main.go</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#9ECBFF\"> \"</span><span style=\"color:#B392F0\">github.com/prometheus/client_golang/prometheus/promhttp</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">r.</span><span style=\"color:#B392F0\">Handle</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/metrics\"</span><span style=\"color:#E1E4E8\">, promhttp.</span><span style=\"color:#B392F0\">Handler</span><span style=\"color:#E1E4E8\">())</span></span></code></pre>\n<p>Esto permite que Prometheus scrapee métricas de tu app, como:</p>\n<ul>\n<li>Requests totales</li>\n<li>Latencias</li>\n<li>Uso de memoria</li>\n</ul>\n<p>Puedes agregar tus propias métricas:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">var</span><span style=\"color:#E1E4E8\"> totalUsers </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> prometheus.</span><span style=\"color:#B392F0\">NewCounter</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">  prometheus</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">CounterOpts</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    Name: </span><span style=\"color:#9ECBFF\">\"total_user_requests\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    Help: </span><span style=\"color:#9ECBFF\">\"Total de requests a /users\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> init</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  prometheus.</span><span style=\"color:#B392F0\">MustRegister</span><span style=\"color:#E1E4E8\">(totalUsers)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<hr>\n<h2 id=\"-2-cicd-con-github-actions\">🔄 2. CI/CD con GitHub Actions</h2>\n<p>Crea el archivo <code>.github/workflows/deploy.yml</code>:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Build and Deploy BFF</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">on</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  push</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    branches</span><span style=\"color:#E1E4E8\">: [ </span><span style=\"color:#9ECBFF\">main</span><span style=\"color:#E1E4E8\"> ]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">jobs</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  build</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">uses</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">actions/checkout@v3</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">uses</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">actions/setup-go@v4</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        with</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          go-version</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">'1.21'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">go build -o bff ./cmd/main.go</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  docker</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    runs-on</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">ubuntu-latest</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    needs</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">build</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    steps</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">uses</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">actions/checkout@v3</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">docker build -t bff-go .</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      - </span><span style=\"color:#85E89D\">run</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">echo \"Desplegado exitosamente 🎉\"</span></span></code></pre>\n<p>Esto automatiza el build en cada push a <code>main</code>. Puedes extenderlo para publicar en un registro de contenedores o desplegar a GCP/AWS.</p>\n<hr>\n<h2 id=\"-3-control-de-acceso-con-roles-en-jwt\">🔐 3. Control de acceso con Roles en JWT</h2>\n<p>Supongamos que tu JWT incluye un <code>role</code> en los claims:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"sub\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"user123\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"role\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"admin\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Puedes validar así:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">claims </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> token.Claims.(</span><span style=\"color:#B392F0\">jwt</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">MapClaims</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">role </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> claims[</span><span style=\"color:#9ECBFF\">\"role\"</span><span style=\"color:#E1E4E8\">].(</span><span style=\"color:#F97583\">string</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> role </span><span style=\"color:#F97583\">!=</span><span style=\"color:#9ECBFF\"> \"admin\"</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  http.</span><span style=\"color:#B392F0\">Error</span><span style=\"color:#E1E4E8\">(w, </span><span style=\"color:#9ECBFF\">\"No autorizado\"</span><span style=\"color:#E1E4E8\">, http.StatusForbidden)</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<p>Esto te permite proteger rutas específicas según el tipo de usuario:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">r.</span><span style=\"color:#B392F0\">With</span><span style=\"color:#E1E4E8\">(JWTMiddleware, AdminOnly).</span><span style=\"color:#B392F0\">Get</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"/admin/dashboard\"</span><span style=\"color:#E1E4E8\">, handler.AdminDashboard)</span></span></code></pre>\n<hr>\n<h2 id=\"-qué-sigue\">🚀 ¿Qué sigue?</h2>\n<p>Tu BFF ya está:</p>\n<ul>\n<li>🧪 Testeado</li>\n<li>🔁 Concurrencia optimizada</li>\n<li>🔐 Seguro con JWT</li>\n<li>📄 Documentado con Swagger</li>\n<li>📦 Dockerizado</li>\n<li>📊 Monitoreado con Prometheus</li>\n<li>🔄 Automatizado con CI/CD</li>\n</ul>\n<p>💡 Puedes integrarlo ahora con frontend React, Flutter o aplicaciones móviles.</p>\n<hr>\n<p>Sígueme en <a href=\"https://codeia.cl\">codeIA.cl</a> para más contenido práctico de arquitectura con Go y microservicios. ¿Quieres una Parte 5 enfocada en monitoreo avanzado o feature flags? ¡Te leo!</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"BFF con Go (Parte 4): Métricas, CI/CD y Control de Acceso","description":"Completa tu Backend For Frontend con monitoreo, despliegue continuo y control de roles usando Go.","tags":["golang","bff","prometheus","jwt","ci/cd","roles"],"time":10,"featured":true,"timestamp":"2025-04-01T10:00:00-0300","filename":"2025-04-01_BFF-Golang-Parte4"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-04-01_BFF-Golang-Parte4.md";
				const url = "/blog/2025-04-01_BFF-Golang-Parte4";
				function rawContent() {
					return "   \n                                        \n                                                                  \n                                                                                                                \n                                                              \n        \n              \n                                     \n                                        \n   \n\n# BFF con Go (Parte 4): Métricas, CI/CD y Control de Acceso 📊🔄🔐\n\nYa tienes un BFF en Go documentado, seguro y dockerizado. En esta cuarta parte, te mostraré cómo llevarlo al siguiente nivel:\n\n- 📊 Exponer métricas con Prometheus\n- 🔄 Automatizar despliegues con GitHub Actions\n- 🔐 Validar roles y scopes en JWT para control de acceso\n\n---\n\n## 📊 1. Exponer métricas con Prometheus\n\nInstala Prometheus middleware para Go:\n\n```bash\ngo get github.com/prometheus/client_golang/prometheus/promhttp\n```\n\nAgrega el endpoint `/metrics` en `main.go`:\n\n```go\nimport \"github.com/prometheus/client_golang/prometheus/promhttp\"\n\nr.Handle(\"/metrics\", promhttp.Handler())\n```\n\nEsto permite que Prometheus scrapee métricas de tu app, como:\n- Requests totales\n- Latencias\n- Uso de memoria\n\nPuedes agregar tus propias métricas:\n\n```go\nvar totalUsers = prometheus.NewCounter(\n  prometheus.CounterOpts{\n    Name: \"total_user_requests\",\n    Help: \"Total de requests a /users\",\n  },\n)\n\nfunc init() {\n  prometheus.MustRegister(totalUsers)\n}\n```\n\n---\n\n## 🔄 2. CI/CD con GitHub Actions\n\nCrea el archivo `.github/workflows/deploy.yml`:\n\n```yaml\nname: Build and Deploy BFF\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n      - run: go build -o bff ./cmd/main.go\n\n  docker:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n      - uses: actions/checkout@v3\n      - run: docker build -t bff-go .\n      - run: echo \"Desplegado exitosamente 🎉\"\n```\n\nEsto automatiza el build en cada push a `main`. Puedes extenderlo para publicar en un registro de contenedores o desplegar a GCP/AWS.\n\n---\n\n## 🔐 3. Control de acceso con Roles en JWT\n\nSupongamos que tu JWT incluye un `role` en los claims:\n\n```json\n{\n  \"sub\": \"user123\",\n  \"role\": \"admin\"\n}\n```\n\nPuedes validar así:\n\n```go\nclaims := token.Claims.(jwt.MapClaims)\nrole := claims[\"role\"].(string)\nif role != \"admin\" {\n  http.Error(w, \"No autorizado\", http.StatusForbidden)\n  return\n}\n```\n\nEsto te permite proteger rutas específicas según el tipo de usuario:\n\n```go\nr.With(JWTMiddleware, AdminOnly).Get(\"/admin/dashboard\", handler.AdminDashboard)\n```\n\n---\n\n## 🚀 ¿Qué sigue?\n\nTu BFF ya está:\n- 🧪 Testeado\n- 🔁 Concurrencia optimizada\n- 🔐 Seguro con JWT\n- 📄 Documentado con Swagger\n- 📦 Dockerizado\n- 📊 Monitoreado con Prometheus\n- 🔄 Automatizado con CI/CD\n\n💡 Puedes integrarlo ahora con frontend React, Flutter o aplicaciones móviles.\n\n---\n\nSígueme en [codeIA.cl](https://codeia.cl) para más contenido práctico de arquitectura con Go y microservicios. ¿Quieres una Parte 5 enfocada en monitoreo avanzado o feature flags? ¡Te leo!\n\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"bff-con-go-parte-4-métricas-cicd-y-control-de-acceso","text":"BFF con Go (Parte 4): Métricas, CI/CD y Control de Acceso 📊🔄🔐"},{"depth":2,"slug":"-1-exponer-métricas-con-prometheus","text":"📊 1. Exponer métricas con Prometheus"},{"depth":2,"slug":"-2-cicd-con-github-actions","text":"🔄 2. CI/CD con GitHub Actions"},{"depth":2,"slug":"-3-control-de-acceso-con-roles-en-jwt","text":"🔐 3. Control de acceso con Roles en JWT"},{"depth":2,"slug":"-qué-sigue","text":"🚀 ¿Qué sigue?"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
