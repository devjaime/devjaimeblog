/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"guía-definitiva-para-la-organización-de-proyectos-en-golang\">Guía Definitiva para la Organización de Proyectos en Golang</h1>\n<p>Introducción</p>\n<hr>\n<h3 id=\"guía-definitiva-para-la-organización-de-proyectos-engolang\">Guía Definitiva para la Organización de Proyectos en Golang</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*bgBEoy4UH5JEbASD\" alt=\"\"></p>\n<h4 id=\"introducción\">Introducción</h4>\n<p>Organizar un proyecto de software puede ser un desafío, especialmente cuando se trabaja en un lenguaje tan versátil como Go. Afortunadamente, la comunidad de Golang ha desarrollado un estándar para la estructura de proyectos que puede ayudarte a mantener tu código limpio, modular y escalable. En este artículo, exploraremos la estructura recomendada para proyectos en Golang según el <a href=\"https://github.com/golang-standards/project-layout\">golang-standards/project-layout</a>.</p>\n<h4 id=\"estructura-delproyecto\">Estructura del Proyecto</h4>\n<p>La estructura recomendada para un proyecto en Golang es la siguiente:</p>\n<p>.<br>\n├── cmd<br>\n├── internal<br>\n├── pkg<br>\n├── api<br>\n├── web<br>\n├── configs<br>\n├── scripts<br>\n├── build<br>\n├── deployments<br>\n├── test<br>\n├── docs<br>\n└── tools</p>\n<p>Veamos cada uno de estos directorios en detalle.</p>\n<h4 id=\"cmd-comandos-principales\">cmd: Comandos Principales</h4>\n<p>El directorio <code>cmd</code> contiene los archivos principales para ejecutar tu aplicación. Cada subdirectorio bajo <code>cmd</code> representa un ejecutable separado. El nombre del subdirectorio debe coincidir con el nombre del ejecutable deseado.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>cmd/<br>\nmyapp/<br>\nmain.go<br>\nmyapp-helper/<br>\nmain.go</p>\n<h4 id=\"internal-códigointerno\">internal: Código Interno</h4>\n<p>El directorio <code>internal</code> se utiliza para el código que no debe ser importado por otros proyectos. Es una forma de encapsular la lógica que solo debe ser usada dentro de tu proyecto.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>internal/<br>\napp/<br>\napp.go<br>\npkg/<br>\nutil.go</p>\n<h4 id=\"pkg-paquetes-reutilizables\">pkg: Paquetes Reutilizables</h4>\n<p>El directorio <code>pkg</code> contiene el código que puede ser reutilizado por otros proyectos. Es una buena práctica mantener aquí las bibliotecas que son genéricas y pueden ser compartidas.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>pkg/<br>\nutils/<br>\nstringutils.go</p>\n<h4 id=\"api-definiciones-de-laapi\">api: Definiciones de la API</h4>\n<p>El directorio <code>api</code> se utiliza para almacenar las definiciones de tu API. Esto puede incluir archivos Protobuf, Swagger, o simplemente definiciones de endpoints.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>api/<br>\nv1/<br>\nuser.proto<br>\nuser.swagger.json</p>\n<h4 id=\"web-archivosweb\">web: Archivos Web</h4>\n<p>El directorio <code>web</code> contiene los archivos estáticos para la parte web de tu aplicación, como HTML, CSS y JavaScript.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>web/<br>\nstatic/<br>\nindex.html<br>\ntemplates/<br>\nlayout.html</p>\n<h4 id=\"configs-archivos-de-configuración\">configs: Archivos de Configuración</h4>\n<p>El directorio <code>configs</code> almacena archivos de configuración para tu aplicación. Esto puede incluir configuraciones para diferentes entornos (desarrollo, producción, etc.).</p>\n<p><strong>Ejemplo:</strong></p>\n<p>configs/<br>\ndev/<br>\nconfig.yaml<br>\nprod/<br>\nconfig.yaml</p>\n<h4 id=\"scripts-scripts-de-automatización\">scripts: Scripts de Automatización</h4>\n<p>El directorio <code>scripts</code> contiene scripts para automatizar tareas repetitivas, como despliegues, compilaciones, etc.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>scripts/<br>\nbuild.sh<br>\ndeploy.sh</p>\n<h4 id=\"build-archivos-de-compilación\">build: Archivos de Compilación</h4>\n<p>El directorio <code>build</code> se utiliza para almacenar archivos relacionados con la construcción de tu aplicación, como Dockerfiles, scripts de compilación, etc.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>build/<br>\ndocker/<br>\nDockerfile</p>\n<h4 id=\"deployments-archivos-de-despliegue\">deployments: Archivos de Despliegue</h4>\n<p>El directorio <code>deployments</code> contiene los archivos necesarios para desplegar tu aplicación en diferentes entornos. Esto puede incluir configuraciones de Kubernetes, Docker Compose, etc.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>deployments/<br>\nkubernetes/<br>\ndeployment.yaml<br>\ndocker-compose.yaml</p>\n<h4 id=\"test-pruebas\">test: Pruebas</h4>\n<p>El directorio <code>test</code> se utiliza para almacenar archivos de pruebas adicionales que no encajan en el directorio de paquetes o en otros lugares.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>test/<br>\nintegration/<br>\nintegration_test.go<br>\ne2e/<br>\ne2e_test.go</p>\n<h4 id=\"docs-documentación\">docs: Documentación</h4>\n<p>El directorio <code>docs</code> contiene la documentación de tu proyecto. Esto puede incluir documentos técnicos, manuales de usuario, etc.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>docs/<br>\narchitecture.md<br>\nuser-guide.md</p>\n<h4 id=\"tools-herramientas\">tools: Herramientas</h4>\n<p>El directorio <code>tools</code> se utiliza para almacenar herramientas y dependencias que no son parte del código principal pero que son necesarias para el desarrollo y la compilación.</p>\n<p><strong>Ejemplo:</strong></p>\n<p>tools/<br>\nlint/<br>\nlinter.go<br>\ncodegen/<br>\ncodegen.go</p>\n<h3 id=\"recuerda-estos-12tips\">Recuerda estos 12 tips</h3>\n<h3 id=\"transmisión-1-introducción-al-proyecto\">Transmisión 1: Introducción al Proyecto 🚀</h3>\n<p><strong>Título:</strong> Introducción a los Estándares de Proyecto en Golang 🚀 <strong>Descripción:</strong> Conoce la estructura recomendada para proyectos en Golang y por qué es crucial seguir estándares. <strong>Tip 1:</strong> 📂 Mantén una estructura clara en tu proyecto. <strong>Tip 2:</strong> 📜 Documenta siempre tu código.</p>\n<h3 id=\"transmisión-2-configuración-inicial-del-proyecto\">Transmisión 2: Configuración Inicial del Proyecto 🔧</h3>\n<p><strong>Título:</strong> Configuración Inicial y Estructura de Directorios en Golang 🔧 <strong>Descripción:</strong> Configura tu proyecto Golang desde cero siguiendo las mejores prácticas. <strong>Tip 3:</strong> 🏗️ Usa <code>go mod</code> para gestionar dependencias. <strong>Tip 4:</strong> 📑 Crea un <code>README.md</code> detallado.</p>\n<h3 id=\"transmisión-3-manejo-de-dependencias\">Transmisión 3: Manejo de Dependencias 📦</h3>\n<p><strong>Título:</strong> Gestión de Dependencias en Golang 📦 <strong>Descripción:</strong> Aprende a manejar las dependencias de tu proyecto de forma eficiente. <strong>Tip 5:</strong> 🔄 Actualiza tus dependencias regularmente. <strong>Tip 6:</strong> 🚫 Evita dependencias innecesarias.</p>\n<h3 id=\"transmisión-4-organización-del-código-en-cmd-y-pkg️\">Transmisión 4: Organización del Código en <code>cmd</code> y <code>pkg</code> 🗂️</h3>\n<p><strong>Título:</strong> Organización del Código en los Directorios <code>cmd</code> y <code>pkg</code> 🗂️ <strong>Descripción:</strong> Organiza tu código de manera eficiente usando <code>cmd</code> y <code>pkg</code>. <strong>Tip 7:</strong> 🗃️ Usa <code>cmd</code> para entradas principales. <strong>Tip 8:</strong> 📦 Usa <code>pkg</code> para bibliotecas reutilizables.</p>\n<h3 id=\"transmisión-5-testing-y-calidad-de-código\">Transmisión 5: Testing y Calidad de Código 🧪</h3>\n<p><strong>Título:</strong> Pruebas y Calidad de Código en Golang 🧪 <strong>Descripción:</strong> Asegura la calidad de tu código con buenas prácticas de testing. <strong>Tip 9:</strong> ✅ Escribe pruebas unitarias y de integración. <strong>Tip 10:</strong> 🧹 Mantén tu código limpio y bien documentado.</p>\n<h3 id=\"transmisión-6-uso-del-directorio-internal\">Transmisión 6: Uso del Directorio <code>internal</code> 🔒</h3>\n<p><strong>Título:</strong> Usando el Directorio <code>internal</code> para Código Privado 🔒 <strong>Descripción:</strong> Protege tu código sensible usando el directorio <code>internal</code>. <strong>Tip 11:</strong> 🔐 Usa <code>internal</code> para código privado. <strong>Tip 12:</strong> 📛 Evita exponer implementaciones internas.</p>\n<h3 id=\"transmisión-7-integración-continua\">Transmisión 7: Integración Continua 🔄</h3>\n<p><strong>Título:</strong> Implementando Integración Continua en Golang 🔄 <strong>Descripción:</strong> Configura CI/CD para tus proyectos en Golang. <strong>Tip 13:</strong> 🤖 Usa GitHub Actions para CI. <strong>Tip 14:</strong> 🧪 Ejecuta pruebas automáticas en cada commit.</p>\n<h3 id=\"transmisión-8-documentación-del-proyecto\">Transmisión 8: Documentación del Proyecto 📝</h3>\n<p><strong>Título:</strong> Documentación Efectiva para Proyectos en Golang 📝 <strong>Descripción:</strong> Aprende a documentar tu proyecto de manera clara y profesional. <strong>Tip 15:</strong> 📚 Usa comentarios y <code>godoc</code>. <strong>Tip 16:</strong> 📑 Mantén la documentación actualizada.</p>\n<h3 id=\"transmisión-9-manejo-de-configuraciones-️\">Transmisión 9: Manejo de Configuraciones ⚙️</h3>\n<p><strong>Título:</strong> Manejo de Configuraciones en Golang ⚙️ <strong>Descripción:</strong> Implementa configuraciones flexibles y seguras en tu proyecto. <strong>Tip 17:</strong> 🔧 Usa archivos de configuración y variables de entorno. <strong>Tip 18:</strong> 🔍 Valida configuraciones al inicio.</p>\n<h3 id=\"transmisión-10-logging-y-monitoreo\">Transmisión 10: Logging y Monitoreo 📊</h3>\n<p><strong>Título:</strong> Logging y Monitoreo en Golang 📊 <strong>Descripción:</strong> Implementa logging y monitoreo efectivos en tus aplicaciones. <strong>Tip 19:</strong> 📜 Usa una biblioteca de logging estructurado. <strong>Tip 20:</strong> 📡 Implementa monitoreo para detectar problemas.</p>\n<h3 id=\"transmisión-11-seguridad-en-aplicaciones-golang️\">Transmisión 11: Seguridad en Aplicaciones Golang 🛡️</h3>\n<p><strong>Título:</strong> Seguridad en Aplicaciones de Golang 🛡️ <strong>Descripción:</strong> Aplica mejores prácticas de seguridad en el desarrollo de aplicaciones Golang. <strong>Tip 21:</strong> 🔒 Valida y sanitiza entradas. <strong>Tip 22:</strong> 🔑 Maneja secretos de forma segura.</p>\n<h3 id=\"transmisión-12-despliegue-de-aplicaciones-golang\">Transmisión 12: Despliegue de Aplicaciones Golang 🚀</h3>\n<p><strong>Título:</strong> Despliegue de Aplicaciones en Golang 🚀 <strong>Descripción:</strong> Aprende a desplegar tus aplicaciones de Golang de manera eficiente. <strong>Tip 23:</strong> 🌐 Usa contenedores para desplegar. <strong>Tip 24:</strong> 📦 Automatiza el despliegue con CI/CD.</p>\n<h3 id=\"conclusión\">Conclusión</h3>\n<p>Seguir una estructura de proyecto estándar en Golang no solo facilita la organización de tu código, sino que también ayuda a otros desarrolladores a entender y contribuir a tu proyecto más fácilmente. La estructura propuesta por <code>golang-standards/project-layout</code> es un excelente punto de partida para cualquier proyecto en Golang, proporcionando un marco claro y eficiente para el desarrollo de software.</p>\n<p>Implementar esta estructura puede parecer un esfuerzo adicional al principio, pero los beneficios en términos de escalabilidad, mantenibilidad y colaboración justifican el esfuerzo. ¡Esperamos que esta guía te sea útil en tus futuros proyectos con Golang!</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/65d666e06ab4\">July 26, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/gu%C3%ADa-definitiva-para-la-organizaci%C3%B3n-de-proyectos-en-golang-65d666e06ab4\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Guía Definitiva para la Organización de Proyectos en Golang","description":"","tags":["code","Golang"],"time":4,"featured":true,"timestamp":"2024-07-26T12:20:32-0300","filename":"2024-07-26_Gu-a-Definitiva-para-la-Organizaci-n-de-Proyectos-en-Golang-65d666e06ab4"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-07-26_Gu-a-Definitiva-para-la-Organizaci-n-de-Proyectos-en-Golang-65d666e06ab4.md";
				const url = "/blog/2024-07-26_Gu-a-Definitiva-para-la-Organizaci-n-de-Proyectos-en-Golang-65d666e06ab4";
				function rawContent() {
					return "   \n                                        \n                                                                    \n               \n                        \n       \n              \n                                     \n                                                                                               \n   \n\nGuía Definitiva para la Organización de Proyectos en Golang\n===========================================================\n\nIntroducción\n\n* * *\n\n### Guía Definitiva para la Organización de Proyectos en Golang\n\n![](https://cdn-images-1.medium.com/max/800/0*bgBEoy4UH5JEbASD)\n\n#### Introducción\n\nOrganizar un proyecto de software puede ser un desafío, especialmente cuando se trabaja en un lenguaje tan versátil como Go. Afortunadamente, la comunidad de Golang ha desarrollado un estándar para la estructura de proyectos que puede ayudarte a mantener tu código limpio, modular y escalable. En este artículo, exploraremos la estructura recomendada para proyectos en Golang según el [golang-standards/project-layout](https://github.com/golang-standards/project-layout).\n\n#### Estructura del Proyecto\n\nLa estructura recomendada para un proyecto en Golang es la siguiente:\n\n.  \n├── cmd  \n├── internal  \n├── pkg  \n├── api  \n├── web  \n├── configs  \n├── scripts  \n├── build  \n├── deployments  \n├── test  \n├── docs  \n└── tools\n\nVeamos cada uno de estos directorios en detalle.\n\n#### cmd: Comandos Principales\n\nEl directorio `cmd` contiene los archivos principales para ejecutar tu aplicación. Cada subdirectorio bajo `cmd` representa un ejecutable separado. El nombre del subdirectorio debe coincidir con el nombre del ejecutable deseado.\n\n**Ejemplo:**\n\ncmd/  \n    myapp/  \n        main.go  \n    myapp-helper/  \n        main.go\n\n#### internal: Código Interno\n\nEl directorio `internal` se utiliza para el código que no debe ser importado por otros proyectos. Es una forma de encapsular la lógica que solo debe ser usada dentro de tu proyecto.\n\n**Ejemplo:**\n\ninternal/  \n    app/  \n        app.go  \n    pkg/  \n        util.go\n\n#### pkg: Paquetes Reutilizables\n\nEl directorio `pkg` contiene el código que puede ser reutilizado por otros proyectos. Es una buena práctica mantener aquí las bibliotecas que son genéricas y pueden ser compartidas.\n\n**Ejemplo:**\n\npkg/  \n    utils/  \n        stringutils.go\n\n#### api: Definiciones de la API\n\nEl directorio `api` se utiliza para almacenar las definiciones de tu API. Esto puede incluir archivos Protobuf, Swagger, o simplemente definiciones de endpoints.\n\n**Ejemplo:**\n\napi/  \n    v1/  \n        user.proto  \n        user.swagger.json\n\n#### web: Archivos Web\n\nEl directorio `web` contiene los archivos estáticos para la parte web de tu aplicación, como HTML, CSS y JavaScript.\n\n**Ejemplo:**\n\nweb/  \n    static/  \n        index.html  \n    templates/  \n        layout.html\n\n#### configs: Archivos de Configuración\n\nEl directorio `configs` almacena archivos de configuración para tu aplicación. Esto puede incluir configuraciones para diferentes entornos (desarrollo, producción, etc.).\n\n**Ejemplo:**\n\nconfigs/  \n    dev/  \n        config.yaml  \n    prod/  \n        config.yaml\n\n#### scripts: Scripts de Automatización\n\nEl directorio `scripts` contiene scripts para automatizar tareas repetitivas, como despliegues, compilaciones, etc.\n\n**Ejemplo:**\n\nscripts/  \n    build.sh  \n    deploy.sh\n\n#### build: Archivos de Compilación\n\nEl directorio `build` se utiliza para almacenar archivos relacionados con la construcción de tu aplicación, como Dockerfiles, scripts de compilación, etc.\n\n**Ejemplo:**\n\nbuild/  \n    docker/  \n        Dockerfile\n\n#### deployments: Archivos de Despliegue\n\nEl directorio `deployments` contiene los archivos necesarios para desplegar tu aplicación en diferentes entornos. Esto puede incluir configuraciones de Kubernetes, Docker Compose, etc.\n\n**Ejemplo:**\n\ndeployments/  \n    kubernetes/  \n        deployment.yaml  \n    docker-compose.yaml\n\n#### test: Pruebas\n\nEl directorio `test` se utiliza para almacenar archivos de pruebas adicionales que no encajan en el directorio de paquetes o en otros lugares.\n\n**Ejemplo:**\n\ntest/  \n    integration/  \n        integration\\_test.go  \n    e2e/  \n        e2e\\_test.go\n\n#### docs: Documentación\n\nEl directorio `docs` contiene la documentación de tu proyecto. Esto puede incluir documentos técnicos, manuales de usuario, etc.\n\n**Ejemplo:**\n\ndocs/  \n    architecture.md  \n    user\\-guide.md\n\n#### tools: Herramientas\n\nEl directorio `tools` se utiliza para almacenar herramientas y dependencias que no son parte del código principal pero que son necesarias para el desarrollo y la compilación.\n\n**Ejemplo:**\n\ntools/  \n    lint/  \n        linter.go  \n    codegen/  \n        codegen.go\n\n### Recuerda estos 12 tips\n\n### Transmisión 1: Introducción al Proyecto 🚀\n\n**Título:** Introducción a los Estándares de Proyecto en Golang 🚀 **Descripción:** Conoce la estructura recomendada para proyectos en Golang y por qué es crucial seguir estándares. **Tip 1:** 📂 Mantén una estructura clara en tu proyecto. **Tip 2:** 📜 Documenta siempre tu código.\n\n### Transmisión 2: Configuración Inicial del Proyecto 🔧\n\n**Título:** Configuración Inicial y Estructura de Directorios en Golang 🔧 **Descripción:** Configura tu proyecto Golang desde cero siguiendo las mejores prácticas. **Tip 3:** 🏗️ Usa `go mod` para gestionar dependencias. **Tip 4:** 📑 Crea un `README.md` detallado.\n\n### Transmisión 3: Manejo de Dependencias 📦\n\n**Título:** Gestión de Dependencias en Golang 📦 **Descripción:** Aprende a manejar las dependencias de tu proyecto de forma eficiente. **Tip 5:** 🔄 Actualiza tus dependencias regularmente. **Tip 6:** 🚫 Evita dependencias innecesarias.\n\n### Transmisión 4: Organización del Código en `cmd` y `pkg` 🗂️\n\n**Título:** Organización del Código en los Directorios `cmd` y `pkg` 🗂️ **Descripción:** Organiza tu código de manera eficiente usando `cmd` y `pkg`. **Tip 7:** 🗃️ Usa `cmd` para entradas principales. **Tip 8:** 📦 Usa `pkg` para bibliotecas reutilizables.\n\n### Transmisión 5: Testing y Calidad de Código 🧪\n\n**Título:** Pruebas y Calidad de Código en Golang 🧪 **Descripción:** Asegura la calidad de tu código con buenas prácticas de testing. **Tip 9:** ✅ Escribe pruebas unitarias y de integración. **Tip 10:** 🧹 Mantén tu código limpio y bien documentado.\n\n### Transmisión 6: Uso del Directorio `internal` 🔒\n\n**Título:** Usando el Directorio `internal` para Código Privado 🔒 **Descripción:** Protege tu código sensible usando el directorio `internal`. **Tip 11:** 🔐 Usa `internal` para código privado. **Tip 12:** 📛 Evita exponer implementaciones internas.\n\n### Transmisión 7: Integración Continua 🔄\n\n**Título:** Implementando Integración Continua en Golang 🔄 **Descripción:** Configura CI/CD para tus proyectos en Golang. **Tip 13:** 🤖 Usa GitHub Actions para CI. **Tip 14:** 🧪 Ejecuta pruebas automáticas en cada commit.\n\n### Transmisión 8: Documentación del Proyecto 📝\n\n**Título:** Documentación Efectiva para Proyectos en Golang 📝 **Descripción:** Aprende a documentar tu proyecto de manera clara y profesional. **Tip 15:** 📚 Usa comentarios y `godoc`. **Tip 16:** 📑 Mantén la documentación actualizada.\n\n### Transmisión 9: Manejo de Configuraciones ⚙️\n\n**Título:** Manejo de Configuraciones en Golang ⚙️ **Descripción:** Implementa configuraciones flexibles y seguras en tu proyecto. **Tip 17:** 🔧 Usa archivos de configuración y variables de entorno. **Tip 18:** 🔍 Valida configuraciones al inicio.\n\n### Transmisión 10: Logging y Monitoreo 📊\n\n**Título:** Logging y Monitoreo en Golang 📊 **Descripción:** Implementa logging y monitoreo efectivos en tus aplicaciones. **Tip 19:** 📜 Usa una biblioteca de logging estructurado. **Tip 20:** 📡 Implementa monitoreo para detectar problemas.\n\n### Transmisión 11: Seguridad en Aplicaciones Golang 🛡️\n\n**Título:** Seguridad en Aplicaciones de Golang 🛡️ **Descripción:** Aplica mejores prácticas de seguridad en el desarrollo de aplicaciones Golang. **Tip 21:** 🔒 Valida y sanitiza entradas. **Tip 22:** 🔑 Maneja secretos de forma segura.\n\n### Transmisión 12: Despliegue de Aplicaciones Golang 🚀\n\n**Título:** Despliegue de Aplicaciones en Golang 🚀 **Descripción:** Aprende a desplegar tus aplicaciones de Golang de manera eficiente. **Tip 23:** 🌐 Usa contenedores para desplegar. **Tip 24:** 📦 Automatiza el despliegue con CI/CD.\n\n### Conclusión\n\nSeguir una estructura de proyecto estándar en Golang no solo facilita la organización de tu código, sino que también ayuda a otros desarrolladores a entender y contribuir a tu proyecto más fácilmente. La estructura propuesta por `golang-standards/project-layout` es un excelente punto de partida para cualquier proyecto en Golang, proporcionando un marco claro y eficiente para el desarrollo de software.\n\nImplementar esta estructura puede parecer un esfuerzo adicional al principio, pero los beneficios en términos de escalabilidad, mantenibilidad y colaboración justifican el esfuerzo. ¡Esperamos que esta guía te sea útil en tus futuros proyectos con Golang!\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [July 26, 2024](https://medium.com/p/65d666e06ab4).\n\n[Canonical link](https://medium.com/@devjaime/gu%C3%ADa-definitiva-para-la-organizaci%C3%B3n-de-proyectos-en-golang-65d666e06ab4)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"guía-definitiva-para-la-organización-de-proyectos-en-golang","text":"Guía Definitiva para la Organización de Proyectos en Golang"},{"depth":3,"slug":"guía-definitiva-para-la-organización-de-proyectos-engolang","text":"Guía Definitiva para la Organización de Proyectos en Golang"},{"depth":4,"slug":"introducción","text":"Introducción"},{"depth":4,"slug":"estructura-delproyecto","text":"Estructura del Proyecto"},{"depth":4,"slug":"cmd-comandos-principales","text":"cmd: Comandos Principales"},{"depth":4,"slug":"internal-códigointerno","text":"internal: Código Interno"},{"depth":4,"slug":"pkg-paquetes-reutilizables","text":"pkg: Paquetes Reutilizables"},{"depth":4,"slug":"api-definiciones-de-laapi","text":"api: Definiciones de la API"},{"depth":4,"slug":"web-archivosweb","text":"web: Archivos Web"},{"depth":4,"slug":"configs-archivos-de-configuración","text":"configs: Archivos de Configuración"},{"depth":4,"slug":"scripts-scripts-de-automatización","text":"scripts: Scripts de Automatización"},{"depth":4,"slug":"build-archivos-de-compilación","text":"build: Archivos de Compilación"},{"depth":4,"slug":"deployments-archivos-de-despliegue","text":"deployments: Archivos de Despliegue"},{"depth":4,"slug":"test-pruebas","text":"test: Pruebas"},{"depth":4,"slug":"docs-documentación","text":"docs: Documentación"},{"depth":4,"slug":"tools-herramientas","text":"tools: Herramientas"},{"depth":3,"slug":"recuerda-estos-12tips","text":"Recuerda estos 12 tips"},{"depth":3,"slug":"transmisión-1-introducción-al-proyecto","text":"Transmisión 1: Introducción al Proyecto 🚀"},{"depth":3,"slug":"transmisión-2-configuración-inicial-del-proyecto","text":"Transmisión 2: Configuración Inicial del Proyecto 🔧"},{"depth":3,"slug":"transmisión-3-manejo-de-dependencias","text":"Transmisión 3: Manejo de Dependencias 📦"},{"depth":3,"slug":"transmisión-4-organización-del-código-en-cmd-y-pkg️","text":"Transmisión 4: Organización del Código en cmd y pkg 🗂️"},{"depth":3,"slug":"transmisión-5-testing-y-calidad-de-código","text":"Transmisión 5: Testing y Calidad de Código 🧪"},{"depth":3,"slug":"transmisión-6-uso-del-directorio-internal","text":"Transmisión 6: Uso del Directorio internal 🔒"},{"depth":3,"slug":"transmisión-7-integración-continua","text":"Transmisión 7: Integración Continua 🔄"},{"depth":3,"slug":"transmisión-8-documentación-del-proyecto","text":"Transmisión 8: Documentación del Proyecto 📝"},{"depth":3,"slug":"transmisión-9-manejo-de-configuraciones-️","text":"Transmisión 9: Manejo de Configuraciones ⚙️"},{"depth":3,"slug":"transmisión-10-logging-y-monitoreo","text":"Transmisión 10: Logging y Monitoreo 📊"},{"depth":3,"slug":"transmisión-11-seguridad-en-aplicaciones-golang️","text":"Transmisión 11: Seguridad en Aplicaciones Golang 🛡️"},{"depth":3,"slug":"transmisión-12-despliegue-de-aplicaciones-golang","text":"Transmisión 12: Despliegue de Aplicaciones Golang 🚀"},{"depth":3,"slug":"conclusión","text":"Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
