/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"visual-studio-code-para-el-desarrollo-de-flutter\">Visual Studio Code para el desarrollo de flutter</h1>\n<p>Una lista seleccionada de accesos directos, extensiones y configuraciones populares de VSCode para acelerar tu flujo de trabajo de…</p>\n<hr>\n<h3 id=\"visual-studio-code-para-el-desarrollo-deflutter\">Visual Studio Code para el desarrollo de flutter</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Qu8Dfj18ynX3eoyg\" alt=\"\"></p>\n<p>Una lista seleccionada de accesos directos, extensiones y configuraciones populares de VSCode para acelerar tu flujo de trabajo de desarrollo de Flutter y codificar como un profesional.</p>\n<hr>\n<p>VSCode es un excelente IDE para el desarrollo de Flutter.</p>\n<p>Una vez que haya completado los <a href=\"https://docs.flutter.dev/get-started/install\">pasos básicos de configuración</a> , lo mejor que puedes hacer, es personalizarlo para mejorar tu flujo de trabajo.</p>\n<p>Entonces, en este artículo, te mostraré todos los <strong>accesos directos</strong> , <strong>extensiones</strong> y <strong>configuraciones</strong> que uso para el desarrollo diario de Flutter.</p>\n<p>¿Listo? ¡Vamos!</p>\n<h3 id=\"accesos-directos-de-vscode-para-el-desarrollo-deflutter\">Accesos directos de VSCode para el desarrollo de Flutter</h3>\n<p>YouTube ya tiene muchos videos excelentes sobre los atajos de VSCode, y vincularé los mejores al final.</p>\n<p>Pero por ahora, aquí hay una lista corta de mis favoritos:</p>\n<h3 id=\"1-soluciónrápida\">1. Solución rápida</h3>\n<ul>\n<li>Mac OS:<code>CMD+.</code></li>\n<li>Ventanas:<code>CTRL+.</code></li>\n</ul>\n<p>Use esto en cualquier parte del editor para obtener una lista <strong>contextual</strong> de acciones de código .</p>\n<p>Puede usarlo para <strong>envolver</strong> , <strong>extraer</strong> , <strong>eliminar</strong> widgets, etc.:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*BwWz4MjmAk_1jeQl.png\" alt=\"\"></p>\n<p>O para importar archivos cuando sea necesario:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*QdK39DLtZHvk935h.png\" alt=\"\"></p>\n<p>O para crear un constructor (o incluso todos los métodos de <strong>clase de datos ) a partir de propiedades existentes en una clase.</strong></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*t8c-pmXtoZA7vb85.png\" alt=\"\"></p>\n<h3 id=\"2-mostrar-paleta-decomandos\">2. Mostrar paleta de comandos</h3>\n<ul>\n<li>Mac OS:<code>CMD+Shift+P</code></li>\n<li>Ventanas:<code>CTRL+Shift+P</code></li>\n</ul>\n<p>Esto abrirá un cuadro de búsqueda donde puede ver todos los comandos usados ​​recientemente y escribir para buscar nuevos:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*kGrCGEqDS_1khcjS.png\" alt=\"\"></p>\n<h3 id=\"3-buscar-archivos-pornombre\">3. Buscar archivos por nombre</h3>\n<ul>\n<li>Mac OS:<code>CMD+P</code></li>\n<li>Ventanas:<code>CTRL+P</code></li>\n</ul>\n<p>Esto es excelente para abrir cualquier archivo en tu proyecto sin salir del teclado:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*YlR0qRgmntTYUHjH.png\" alt=\"\"></p>\n<h3 id=\"4-dart-agregar-dependencias\">4. Dart: agregar dependencias</h3>\n<p>Primero, abre la paleta de comandos y escriba “Dart: Add Dependency” o “Dart: Add Dev Dependency”:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*5ZPVRBklSkCb2pHR.png\" alt=\"\"></p>\n<p>Luego mostrará una lista de búsqueda de paquetes que están disponibles en <a href=\"http://pub.dev/\">pub.dev</a> :</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*J4Ng3213Y7Pk3id3.png\" alt=\"\"></p>\n<p>Una vez que seleccione una dependencia, se agregará a su archivo <code>pubspec.yaml</code> y se instalará automáticamente.</p>\n<h3 id=\"5-fragmentos-de-flutter-dart\">5. Fragmentos de Flutter &#x26; Dart</h3>\n<p>Los complementos Dart y Flutter incluyen muchos fragmentos que puede usar para agregar widgets comunes de Flutter rápidamente.</p>\n<p>Es posible que ya estés familiarizado con estos:</p>\n<ul>\n<li><code>stless</code>: Insertar un<code>StatelessWidget</code></li>\n<li><code>stful</code>: Insertar un<code>StatefulWidget</code></li>\n<li><code>stanim</code>: Inserte un <code>StatefulWidget</code>con un<code>AnimationController</code></li>\n</ul>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*ItZGE3V0JBagCddJ.png\" alt=\"\"></p>\n<p>Estos son excelentes porque generan todo el código repetitivo para tí, y todo lo que le queda por hacer es nombrar su widget:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*jZOuT-vgwoAOn5MD.png\" alt=\"\"></p>\n<p>Pero también puede usar fragmentos para generar bloques de código comunes , como if/else, bucles for, definiciones de funciones, etc.:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*iDEKVNFEJRxNwuDZ.png\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*VkVh7RXj5ojjGE-c.png\" alt=\"\"></p>\n<p>Para ver todos los fragmentos de Dart disponibles, <a href=\"https://github.com/Dart-Code/Dart-Code/blob/master/snippets/dart.json\">consulta este archivo</a> .</p>\n<blockquote>\n<p><em>Si deseas llevar esto más lejos, puede instalar la extensión</em> <a href=\"https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets\"><em>Awesome Flutter Snippets</em></a> <em>, que ofrece muchos otros fragmentos útiles.</em></p>\n</blockquote>\n<h3 id=\"6-lista-de-métodos-abreviados-deteclado\">6. Lista de métodos abreviados de teclado</h3>\n<ul>\n<li>Mac OS:<code>CMD+K CMD+S</code></li>\n<li>Ventanas:<code>CTRL+K CTRL+S</code></li>\n</ul>\n<p>VSCode tiene un montón de atajos. Si desea verlos todos y personalizar las combinaciones de teclas, este es el que debe usar:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*nuDH5b_rjk7KONUz.png\" alt=\"\"></p>\n<h3 id=\"extensiones-de-vscode-para-el-desarrollo-deflutter\">Extensiones de VSCode para el desarrollo de Flutter</h3>\n<p>Usar las extensiones correctas te ahorrará mucho tiempo y te dará <strong>superpoderes</strong> . Estos son mis favoritos:</p>\n<h3 id=\"3-error-delens\">3. Error de lens</h3>\n<p>¿Quieres saber si cometes errores <strong>mientras escribes</strong> ?</p>\n<p>La extensión <a href=\"https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens\">Error Lens</a> mejora el resaltado de errores, advertencias y otros diagnósticos de idiomas, y la encuentro inmensamente útil:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*ISR91qi3DQaWryT1.png\" alt=\"\"></p>\n<h3 id=\"4-mejores-comentarios\">4. Mejores comentarios</h3>\n<p>Mejore los comentarios de su código resaltando alertas, notas, TODO y más:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*NeINDjUS6JBiLrpA.png\" alt=\"\"></p>\n<p>Descarga aquí:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments\">mejores comentarios</a></li>\n</ul>\n<h3 id=\"5-eliminar-comentarios\">5. Eliminar comentarios</h3>\n<p>Esto es bastante útil para eliminar todos los comentarios predeterminados cuando creas un nuevo proyecto de Flutter:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*wke8g5z_ZJIoTZ3Q.png\" alt=\"\"></p>\n<p>Descarga aquí:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=plibither8.remove-comments\">Eliminar comentarios</a></li>\n</ul>\n<h3 id=\"6-advanced-newfile\">6. Advanced New File</h3>\n<p>La forma habitual de crear archivos es seleccionar la carpeta que desea en la barra lateral y luego hacer clic en “Nuevo archivo”.</p>\n<p>Esto es lento ya que te obliga a usar el mouse. Y para grandes proyectos, encontrar la carpeta correcta puede ser un desafío.</p>\n<p>La extensión <strong>Advanced New File</strong> te permite crear archivos en cualquier lugar de su espacio de trabajo, usando solo su teclado.</p>\n<p>Puede ejecutar esto desde la paleta de comandos:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Jj69IOOj5Qp-4-FF.png\" alt=\"\"></p>\n<p>Luego, la extensión utilizará la coincidencia de patrones para ayudarte a encontrar la carpeta que necesita <strong>mientras escribe</strong> :</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*YJvFfg84RYntFtqV.png\" alt=\"\"></p>\n<p>Finalmente, escribe el nombre del archivo en la carpeta elegida:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*4eVdG7wv3a9NsB_G.png\" alt=\"\"></p>\n<p>Como resultado, la extensión creará un archivo vacío en el lugar correcto y lo abrirá por ti:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*udusUHNNiQ9PfoUn.png\" alt=\"\"></p>\n<p>Descarga aquí:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file\">advanced-new-file</a></li>\n</ul>\n<h3 id=\"7-githubcopilot\">7. GitHub copilot</h3>\n<p>GitHub Copilot es un programador de pares de IA que sugiere terminaciones de línea y cuerpos de funciones completos a medida que escribe:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*bmmq5cyD9-5qNDBV.png\" alt=\"\"></p>\n<p>Si bien no siempre lo hace bien, ¡me ha sorprendido cuánto tiempo me ha ahorrado hasta ahora!</p>\n<p>¡Me ha ayudado a escribir documentación, e incluso parte de la copia de la página de destino!</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*AM2gP4r6r4tUXVDm.png\" alt=\"\"></p>\n<p>Descarga aquí:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.copilot\">Github copilot</a></li>\n</ul>\n<h3 id=\"9-explorador-firebase\">9. Explorador Firebase</h3>\n<p>Si desea ver todos sus proyectos de Firebase, datos de Firestore, Cloud Functions y más sin salir de VSCode, este es para usted:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*QhEulpPUPveNSAoF.png\" alt=\"\"></p>\n<p>Descarga aquí:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=jsayol.firebase-explorer\">firebase explored</a></li>\n</ul>\n<h3 id=\"extensiones-útiles-para-trabajar-con-apirest\">Extensiones útiles para trabajar con API REST</h3>\n<p>Si su aplicación Flutter se conecta a algunas API REST, estas extensiones también serán útiles:</p>\n<ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=humao.rest-client\">Rest Client</a> : envíe una solicitud HTTP y vea la respuesta en Visual Studio Code directamente.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client\">Thunder Client</a>: una buena alternativa a Postman para administrar todas tus llamadas API REST en VSCode.</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\">Live Server</a>: inicie un servidor de desarrollo local con función de recarga en vivo para páginas estáticas y dinámicas.</li>\n</ul>\n<h3 id=\"configuración-de-vscode-para-el-desarrollo-deflutter\">Configuración de VSCode para el desarrollo de Flutter</h3>\n<p>Además de todos los excelentes atajos y extensiones, ¡hay algunas configuraciones específicas de Flutter que te ayudarán mucho!</p>\n<p>Estos se pueden configurar abriendo <strong>Preferencias: Configuración abierta (JSON)</strong> en la paleta de comandos:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*ZTiC433zH-BC-06P.png\" alt=\"\"></p>\n<p>Las que encuentro más útiles son las opciones para <strong>corregir todos los errores</strong> y <strong>formatear el código</strong> al guardar.</p>\n<h3 id=\"1-solucione-todos-los-errores-enguardar\">1. Solucione todos los errores en Guardar</h3>\n<p>Estoy seguro de que te molestó que el linter te dijera que usaras <code>const</code>una y otra vez:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*28-ae2auHiusEtd4.png\" alt=\"\"></p>\n<p>Bueno, en lugar de corregir todas estas advertencias a mano, simplemente agregue esto a su archivo de configuración:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>\"editor.codeActionsOnSave\": {    \"source.fixAll\": true}</span></span></code></pre>\n<p>¡Y todos los errores constantes (junto con muchos otros) desaparecerán cuando guardes!</p>\n<h3 id=\"2-formatear-alguardar\">2. Formatear al guardar</h3>\n<p>Al crear un diseño declarativo, a menudo terminamos con un código desequilibrado o líneas muy largas:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Q4NNPQzcEQPnvcpW.png\" alt=\"\"></p>\n<p>Para solucionar esto, todo lo que tenemos que hacer es <strong>agregar todas las comas en los lugares correctos</strong> y luego guardar el archivo:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*OCuzQfcETglVlgHK.png\" alt=\"\"></p>\n<p>Para habilitar el formato al guardar, agregue esto a la configuración:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>{   \"editor.formatOnSave\": true}</span></span></code></pre>\n<h3 id=\"3-colorización-de-par-entre-corchetes\">3. Colorización de par entre corchetes</h3>\n<p>Una versión reciente de VSCode ha introducido <strong>la colorización de par de corchetes de alto rendimiento</strong> , una característica que es especialmente útil en Flutter.</p>\n<p>Todo lo que tienes que hacer es habilitarlo:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>{    \"editor.bracketPairColorization.enabled\": true}</span></span></code></pre>\n<p>Y luego podrás disfrutar de todos los corchetes de colores:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*XHQn9efp1ijZzgPn.png\" alt=\"\"></p>\n<h3 id=\"4-vista-previa-de-las-guías-de-interfaz-de-usuario-deflutter\">4. Vista previa de las guías de interfaz de usuario de Flutter</h3>\n<p>Otra configuración que me gusta mucho se llama <code>previewFlutterUiGuides</code>, que se puede habilitar así:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>{    \"dart.previewFlutterUiGuides\": true}</span></span></code></pre>\n<p>Con esto en su lugar, el editor mostrará algunas guías de interfaz de usuario junto a nuestros widgets:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*a4wndIt4_FZgU-PK.png\" alt=\"\"></p>\n<h3 id=\"mi-archivo-settingsjson\">Mi archivo settings.json</h3>\n<p>Siéntase libre de tomar mi propia configuración y personalizarla según sus necesidades:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>{    \"security.workspace.trust.enabled\": false,    \"[dart]\": {        \"editor.codeActionsOnSave\": {            \"source.fixAll\": true        },        \"editor.rulers\": [            80        ],        \"editor.selectionHighlight\": false,        \"editor.suggest.snippetsPreventQuickSuggestions\": false,        \"editor.suggestSelection\": \"first\",        \"editor.tabCompletion\": \"onlySnippets\",        \"editor.wordBasedSuggestions\": false,    },    \"dart.warnWhenEditingFilesOutsideWorkspace\": false,    \"window.zoomLevel\": 1,    \"workbench.colorTheme\": \"Dracula\",    \"editor.bracketPairColorization.enabled\": true,    \"editor.inlineSuggest.enabled\": true,    \"editor.formatOnSave\": true}</span></span></code></pre>\n<h3 id=\"bonificación\">Bonificación</h3>\n<p>¿Alguna vez regresaste a un proyecto de Flutter que no habías tocado durante uno o dos años y encontraste un montón de advertencias obsoletas? (¡Te estoy mirando, <code>FlatButton</code>y <code>RaisedButton</code>!)</p>\n<p>No temas, porque no tienes que arreglarlos todos a mano.</p>\n<p>En su lugar, todo lo que tienes que hacer es ejecutar <code>dart fix</code>en la terminal:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>dart fix --dry-run # preview of the proposed changesdart fix --apply # apply the changes</span></span></code></pre>\n<p>Más información <a href=\"https://dart.dev/tools/dart-fix\">en esta página</a> .</p>\n<p>¡Espero que todos los accesos directos, extensiones y configuraciones anteriores aumenten tu productividad!</p>\n<p>Por supuesto, hay muchos más consejos y trucos que podría aprender sobre VSCode.</p>\n<p>Para eso, recomiendo este video de Fireship.io:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ifTF3ags0XI\">25 consejos de productividad de VS Code y trucos rápidos</a></li>\n</ul>\n<p>¡ Feliz codificación !</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/256dbd13b453\">May 29, 2022</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/visual-studio-code-para-el-desarrollo-de-flutter-256dbd13b453\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Visual Studio Code para el desarrollo de flutter","description":"","tags":["code","vscode","Flutter"],"time":4,"featured":true,"timestamp":"2022-05-29T12:20:31-0300","filename":"2022-05-29_Visual-Studio-Code-para-el-desarrollo-de-flutter-256dbd13b453"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2022-05-29_Visual-Studio-Code-para-el-desarrollo-de-flutter-256dbd13b453.md";
				const url = "/blog/2022-05-29_Visual-Studio-Code-para-el-desarrollo-de-flutter-256dbd13b453";
				function rawContent() {
					return "   \n                                        \n                                                         \n               \n                                   \n       \n              \n                                     \n                                                                                    \n   \n\nVisual Studio Code para el desarrollo de flutter\n================================================\n\nUna lista seleccionada de accesos directos, extensiones y configuraciones populares de VSCode para acelerar tu flujo de trabajo de…\n\n* * *\n\n### Visual Studio Code para el desarrollo de flutter\n\n![](https://cdn-images-1.medium.com/max/800/0*Qu8Dfj18ynX3eoyg)\n\nUna lista seleccionada de accesos directos, extensiones y configuraciones populares de VSCode para acelerar tu flujo de trabajo de desarrollo de Flutter y codificar como un profesional.\n\n* * *\n\nVSCode es un excelente IDE para el desarrollo de Flutter.\n\nUna vez que haya completado los [pasos básicos de configuración](https://docs.flutter.dev/get-started/install) , lo mejor que puedes hacer, es personalizarlo para mejorar tu flujo de trabajo.\n\nEntonces, en este artículo, te mostraré todos los **accesos directos** , **extensiones** y **configuraciones** que uso para el desarrollo diario de Flutter.\n\n¿Listo? ¡Vamos!\n\n### Accesos directos de VSCode para el desarrollo de Flutter\n\nYouTube ya tiene muchos videos excelentes sobre los atajos de VSCode, y vincularé los mejores al final.\n\nPero por ahora, aquí hay una lista corta de mis favoritos:\n\n### 1\\. Solución rápida\n\n*   Mac OS:`CMD+.`\n*   Ventanas:`CTRL+.`\n\nUse esto en cualquier parte del editor para obtener una lista **contextual** de acciones de código .\n\nPuede usarlo para **envolver** , **extraer** , **eliminar** widgets, etc.:\n\n![](https://cdn-images-1.medium.com/max/800/0*BwWz4MjmAk_1jeQl.png)\n\nO para importar archivos cuando sea necesario:\n\n![](https://cdn-images-1.medium.com/max/800/0*QdK39DLtZHvk935h.png)\n\nO para crear un constructor (o incluso todos los métodos de **clase de datos ) a partir de propiedades existentes en una clase.**\n\n![](https://cdn-images-1.medium.com/max/800/0*t8c-pmXtoZA7vb85.png)\n\n### 2\\. Mostrar paleta de comandos\n\n*   Mac OS:`CMD+Shift+P`\n*   Ventanas:`CTRL+Shift+P`\n\nEsto abrirá un cuadro de búsqueda donde puede ver todos los comandos usados ​​recientemente y escribir para buscar nuevos:\n\n![](https://cdn-images-1.medium.com/max/800/0*kGrCGEqDS_1khcjS.png)\n\n### 3\\. Buscar archivos por nombre\n\n*   Mac OS:`CMD+P`\n*   Ventanas:`CTRL+P`\n\nEsto es excelente para abrir cualquier archivo en tu proyecto sin salir del teclado:\n\n![](https://cdn-images-1.medium.com/max/800/0*YlR0qRgmntTYUHjH.png)\n\n### 4\\. Dart: agregar dependencias\n\nPrimero, abre la paleta de comandos y escriba “Dart: Add Dependency” o “Dart: Add Dev Dependency”:\n\n![](https://cdn-images-1.medium.com/max/800/0*5ZPVRBklSkCb2pHR.png)\n\nLuego mostrará una lista de búsqueda de paquetes que están disponibles en [pub.dev](http://pub.dev/) :\n\n![](https://cdn-images-1.medium.com/max/800/0*J4Ng3213Y7Pk3id3.png)\n\nUna vez que seleccione una dependencia, se agregará a su archivo `pubspec.yaml` y se instalará automáticamente.\n\n### 5\\. Fragmentos de Flutter & Dart\n\nLos complementos Dart y Flutter incluyen muchos fragmentos que puede usar para agregar widgets comunes de Flutter rápidamente.\n\nEs posible que ya estés familiarizado con estos:\n\n*   `stless`: Insertar un`StatelessWidget`\n*   `stful`: Insertar un`StatefulWidget`\n*   `stanim`: Inserte un `StatefulWidget`con un`AnimationController`\n\n![](https://cdn-images-1.medium.com/max/800/0*ItZGE3V0JBagCddJ.png)\n\nEstos son excelentes porque generan todo el código repetitivo para tí, y todo lo que le queda por hacer es nombrar su widget:\n\n![](https://cdn-images-1.medium.com/max/800/0*jZOuT-vgwoAOn5MD.png)\n\nPero también puede usar fragmentos para generar bloques de código comunes , como if/else, bucles for, definiciones de funciones, etc.:\n\n![](https://cdn-images-1.medium.com/max/800/0*iDEKVNFEJRxNwuDZ.png)\n\n![](https://cdn-images-1.medium.com/max/800/0*VkVh7RXj5ojjGE-c.png)\n\nPara ver todos los fragmentos de Dart disponibles, [consulta este archivo](https://github.com/Dart-Code/Dart-Code/blob/master/snippets/dart.json) .\n\n> _Si deseas llevar esto más lejos, puede instalar la extensión_ [_Awesome Flutter Snippets_](https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets) _, que ofrece muchos otros fragmentos útiles._\n\n### 6\\. Lista de métodos abreviados de teclado\n\n*   Mac OS:`CMD+K CMD+S`\n*   Ventanas:`CTRL+K CTRL+S`\n\nVSCode tiene un montón de atajos. Si desea verlos todos y personalizar las combinaciones de teclas, este es el que debe usar:\n\n![](https://cdn-images-1.medium.com/max/800/0*nuDH5b_rjk7KONUz.png)\n\n### Extensiones de VSCode para el desarrollo de Flutter\n\nUsar las extensiones correctas te ahorrará mucho tiempo y te dará **superpoderes** . Estos son mis favoritos:\n\n### 3\\. Error de lens\n\n¿Quieres saber si cometes errores **mientras escribes** ?\n\nLa extensión [Error Lens](https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens) mejora el resaltado de errores, advertencias y otros diagnósticos de idiomas, y la encuentro inmensamente útil:\n\n![](https://cdn-images-1.medium.com/max/800/0*ISR91qi3DQaWryT1.png)\n\n### 4\\. Mejores comentarios\n\nMejore los comentarios de su código resaltando alertas, notas, TODO y más:\n\n![](https://cdn-images-1.medium.com/max/800/0*NeINDjUS6JBiLrpA.png)\n\nDescarga aquí:\n\n*   [mejores comentarios](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments)\n\n### 5\\. Eliminar comentarios\n\nEsto es bastante útil para eliminar todos los comentarios predeterminados cuando creas un nuevo proyecto de Flutter:\n\n![](https://cdn-images-1.medium.com/max/800/0*wke8g5z_ZJIoTZ3Q.png)\n\nDescarga aquí:\n\n*   [Eliminar comentarios](https://marketplace.visualstudio.com/items?itemName=plibither8.remove-comments)\n\n### 6\\. Advanced New File\n\nLa forma habitual de crear archivos es seleccionar la carpeta que desea en la barra lateral y luego hacer clic en “Nuevo archivo”.\n\nEsto es lento ya que te obliga a usar el mouse. Y para grandes proyectos, encontrar la carpeta correcta puede ser un desafío.\n\nLa extensión **Advanced New File** te permite crear archivos en cualquier lugar de su espacio de trabajo, usando solo su teclado.\n\nPuede ejecutar esto desde la paleta de comandos:\n\n![](https://cdn-images-1.medium.com/max/800/0*Jj69IOOj5Qp-4-FF.png)\n\nLuego, la extensión utilizará la coincidencia de patrones para ayudarte a encontrar la carpeta que necesita **mientras escribe** :\n\n![](https://cdn-images-1.medium.com/max/800/0*YJvFfg84RYntFtqV.png)\n\nFinalmente, escribe el nombre del archivo en la carpeta elegida:\n\n![](https://cdn-images-1.medium.com/max/800/0*4eVdG7wv3a9NsB_G.png)\n\nComo resultado, la extensión creará un archivo vacío en el lugar correcto y lo abrirá por ti:\n\n![](https://cdn-images-1.medium.com/max/800/0*udusUHNNiQ9PfoUn.png)\n\nDescarga aquí:\n\n*   [advanced-new-file](https://marketplace.visualstudio.com/items?itemName=patbenatar.advanced-new-file)\n\n### 7\\. GitHub copilot\n\nGitHub Copilot es un programador de pares de IA que sugiere terminaciones de línea y cuerpos de funciones completos a medida que escribe:\n\n![](https://cdn-images-1.medium.com/max/800/0*bmmq5cyD9-5qNDBV.png)\n\nSi bien no siempre lo hace bien, ¡me ha sorprendido cuánto tiempo me ha ahorrado hasta ahora!\n\n¡Me ha ayudado a escribir documentación, e incluso parte de la copia de la página de destino!\n\n![](https://cdn-images-1.medium.com/max/800/0*AM2gP4r6r4tUXVDm.png)\n\nDescarga aquí:\n\n*   [Github copilot](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)\n\n### 9\\. Explorador Firebase\n\nSi desea ver todos sus proyectos de Firebase, datos de Firestore, Cloud Functions y más sin salir de VSCode, este es para usted:\n\n![](https://cdn-images-1.medium.com/max/800/0*QhEulpPUPveNSAoF.png)\n\nDescarga aquí:\n\n*   [firebase explored](https://marketplace.visualstudio.com/items?itemName=jsayol.firebase-explorer)\n\n### Extensiones útiles para trabajar con API REST\n\nSi su aplicación Flutter se conecta a algunas API REST, estas extensiones también serán útiles:\n\n*   [Rest Client](https://marketplace.visualstudio.com/items?itemName=humao.rest-client) : envíe una solicitud HTTP y vea la respuesta en Visual Studio Code directamente.\n*   [Thunder Client](https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client): una buena alternativa a Postman para administrar todas tus llamadas API REST en VSCode.\n*   [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer): inicie un servidor de desarrollo local con función de recarga en vivo para páginas estáticas y dinámicas.\n\n### Configuración de VSCode para el desarrollo de Flutter\n\nAdemás de todos los excelentes atajos y extensiones, ¡hay algunas configuraciones específicas de Flutter que te ayudarán mucho!\n\nEstos se pueden configurar abriendo **Preferencias: Configuración abierta (JSON)** en la paleta de comandos:\n\n![](https://cdn-images-1.medium.com/max/800/0*ZTiC433zH-BC-06P.png)\n\nLas que encuentro más útiles son las opciones para **corregir todos los errores** y **formatear el código** al guardar.\n\n### 1\\. Solucione todos los errores en Guardar\n\nEstoy seguro de que te molestó que el linter te dijera que usaras `const`una y otra vez:\n\n![](https://cdn-images-1.medium.com/max/800/0*28-ae2auHiusEtd4.png)\n\nBueno, en lugar de corregir todas estas advertencias a mano, simplemente agregue esto a su archivo de configuración:\n\n    \"editor.codeActionsOnSave\": {    \"source.fixAll\": true}\n\n¡Y todos los errores constantes (junto con muchos otros) desaparecerán cuando guardes!\n\n### 2\\. Formatear al guardar\n\nAl crear un diseño declarativo, a menudo terminamos con un código desequilibrado o líneas muy largas:\n\n![](https://cdn-images-1.medium.com/max/800/0*Q4NNPQzcEQPnvcpW.png)\n\nPara solucionar esto, todo lo que tenemos que hacer es **agregar todas las comas en los lugares correctos** y luego guardar el archivo:\n\n![](https://cdn-images-1.medium.com/max/800/0*OCuzQfcETglVlgHK.png)\n\nPara habilitar el formato al guardar, agregue esto a la configuración:\n\n    {   \"editor.formatOnSave\": true}\n\n### 3\\. Colorización de par entre corchetes\n\nUna versión reciente de VSCode ha introducido **la colorización de par de corchetes de alto rendimiento** , una característica que es especialmente útil en Flutter.\n\nTodo lo que tienes que hacer es habilitarlo:\n\n    {    \"editor.bracketPairColorization.enabled\": true}\n\nY luego podrás disfrutar de todos los corchetes de colores:\n\n![](https://cdn-images-1.medium.com/max/800/0*XHQn9efp1ijZzgPn.png)\n\n### 4\\. Vista previa de las guías de interfaz de usuario de Flutter\n\nOtra configuración que me gusta mucho se llama `previewFlutterUiGuides`, que se puede habilitar así:\n\n    {    \"dart.previewFlutterUiGuides\": true}\n\nCon esto en su lugar, el editor mostrará algunas guías de interfaz de usuario junto a nuestros widgets:\n\n![](https://cdn-images-1.medium.com/max/800/0*a4wndIt4_FZgU-PK.png)\n\n### Mi archivo settings.json\n\nSiéntase libre de tomar mi propia configuración y personalizarla según sus necesidades:\n\n    {    \"security.workspace.trust.enabled\": false,    \"[dart]\": {        \"editor.codeActionsOnSave\": {            \"source.fixAll\": true        },        \"editor.rulers\": [            80        ],        \"editor.selectionHighlight\": false,        \"editor.suggest.snippetsPreventQuickSuggestions\": false,        \"editor.suggestSelection\": \"first\",        \"editor.tabCompletion\": \"onlySnippets\",        \"editor.wordBasedSuggestions\": false,    },    \"dart.warnWhenEditingFilesOutsideWorkspace\": false,    \"window.zoomLevel\": 1,    \"workbench.colorTheme\": \"Dracula\",    \"editor.bracketPairColorization.enabled\": true,    \"editor.inlineSuggest.enabled\": true,    \"editor.formatOnSave\": true}\n\n### Bonificación\n\n¿Alguna vez regresaste a un proyecto de Flutter que no habías tocado durante uno o dos años y encontraste un montón de advertencias obsoletas? (¡Te estoy mirando, `FlatButton`y `RaisedButton`!)\n\nNo temas, porque no tienes que arreglarlos todos a mano.\n\nEn su lugar, todo lo que tienes que hacer es ejecutar `dart fix`en la terminal:\n\n    dart fix --dry-run # preview of the proposed changesdart fix --apply # apply the changes\n\nMás información [en esta página](https://dart.dev/tools/dart-fix) .\n\n¡Espero que todos los accesos directos, extensiones y configuraciones anteriores aumenten tu productividad!\n\nPor supuesto, hay muchos más consejos y trucos que podría aprender sobre VSCode.\n\nPara eso, recomiendo este video de Fireship.io:\n\n*   [25 consejos de productividad de VS Code y trucos rápidos](https://www.youtube.com/watch?v=ifTF3ags0XI)\n\n¡ Feliz codificación !\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [May 29, 2022](https://medium.com/p/256dbd13b453).\n\n[Canonical link](https://medium.com/@devjaime/visual-studio-code-para-el-desarrollo-de-flutter-256dbd13b453)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"visual-studio-code-para-el-desarrollo-de-flutter","text":"Visual Studio Code para el desarrollo de flutter"},{"depth":3,"slug":"visual-studio-code-para-el-desarrollo-deflutter","text":"Visual Studio Code para el desarrollo de flutter"},{"depth":3,"slug":"accesos-directos-de-vscode-para-el-desarrollo-deflutter","text":"Accesos directos de VSCode para el desarrollo de Flutter"},{"depth":3,"slug":"1-soluciónrápida","text":"1. Solución rápida"},{"depth":3,"slug":"2-mostrar-paleta-decomandos","text":"2. Mostrar paleta de comandos"},{"depth":3,"slug":"3-buscar-archivos-pornombre","text":"3. Buscar archivos por nombre"},{"depth":3,"slug":"4-dart-agregar-dependencias","text":"4. Dart: agregar dependencias"},{"depth":3,"slug":"5-fragmentos-de-flutter-dart","text":"5. Fragmentos de Flutter & Dart"},{"depth":3,"slug":"6-lista-de-métodos-abreviados-deteclado","text":"6. Lista de métodos abreviados de teclado"},{"depth":3,"slug":"extensiones-de-vscode-para-el-desarrollo-deflutter","text":"Extensiones de VSCode para el desarrollo de Flutter"},{"depth":3,"slug":"3-error-delens","text":"3. Error de lens"},{"depth":3,"slug":"4-mejores-comentarios","text":"4. Mejores comentarios"},{"depth":3,"slug":"5-eliminar-comentarios","text":"5. Eliminar comentarios"},{"depth":3,"slug":"6-advanced-newfile","text":"6. Advanced New File"},{"depth":3,"slug":"7-githubcopilot","text":"7. GitHub copilot"},{"depth":3,"slug":"9-explorador-firebase","text":"9. Explorador Firebase"},{"depth":3,"slug":"extensiones-útiles-para-trabajar-con-apirest","text":"Extensiones útiles para trabajar con API REST"},{"depth":3,"slug":"configuración-de-vscode-para-el-desarrollo-deflutter","text":"Configuración de VSCode para el desarrollo de Flutter"},{"depth":3,"slug":"1-solucione-todos-los-errores-enguardar","text":"1. Solucione todos los errores en Guardar"},{"depth":3,"slug":"2-formatear-alguardar","text":"2. Formatear al guardar"},{"depth":3,"slug":"3-colorización-de-par-entre-corchetes","text":"3. Colorización de par entre corchetes"},{"depth":3,"slug":"4-vista-previa-de-las-guías-de-interfaz-de-usuario-deflutter","text":"4. Vista previa de las guías de interfaz de usuario de Flutter"},{"depth":3,"slug":"mi-archivo-settingsjson","text":"Mi archivo settings.json"},{"depth":3,"slug":"bonificación","text":"Bonificación"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
