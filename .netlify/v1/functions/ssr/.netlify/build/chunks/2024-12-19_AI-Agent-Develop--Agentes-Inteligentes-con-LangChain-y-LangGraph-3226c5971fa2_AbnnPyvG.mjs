/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph\">AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph</h1>\n<p><a href=\"https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/\">https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/</a></p>\n<hr>\n<h3 id=\"ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph-1\">AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*iSr7FYvnOi72mt8BRf5Qww.png\" alt=\"\"></p>\n<p>Curso Udemy Pablo Dichone</p>\n<p><a href=\"https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/\">https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/</a></p>\n<p>En este blog, exploraremos los conocimientos que adquirí en el curso <strong>“Master AI Agent Development: Build Scalable Agents with LangChain &#x26; LangGraph”</strong>. Este curso me permitió desarrollar agentes escalables utilizando herramientas avanzadas como LangChain y LangGraph, desde conceptos básicos hasta aplicaciones sofisticadas en casos reales.</p>\n<hr>\n<h3 id=\"qué-son-los-agentes-inteligentes\">¿Qué son los agentes inteligentes?</h3>\n<p>Los agentes inteligentes son sistemas diseñados para interactuar de forma autónoma con el entorno, tomando decisiones basadas en datos y modelos de lenguaje. Su aplicación abarca sectores como la atención al cliente, investigación de mercados, educación y análisis financieros.</p>\n<p>En este curso, aprendí cómo implementar estos agentes desde cero utilizando modelos como GPT-4.0 y combinándolos con grafos de estado, almacenamiento de memoria y herramientas externas.</p>\n<hr>\n<h3 id=\"ejemplo-1-construyendo-un-agentebásico\">Ejemplo 1: Construyendo un agente básico</h3>\n<p>El primer paso fue crear un agente simple que utiliza un modelo de lenguaje grande (LLM) para responder preguntas del usuario. A continuación, un fragmento del código:</p>\n<p>import os<br>\nfrom dotenv import load_dotenv<br>\nfrom openai import OpenAI</p>\n<p># Cargar variables de entorno<br>\nload_dotenv()<br>\nopenai_key = os.getenv(“OPENAI_API_KEY”)</p>\n<p># Configurar el modelo<br>\nllm_name = “gpt-4.0”<br>\nclient = OpenAI(api_key=openai_key)</p>\n<p>class Agent:<br>\ndef __init__(self, system=\"\"):<br>\nself.system = system<br>\nself.messages = []<br>\nif system:<br>\nself.messages.append({“role”: “system”, “content”: system})</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>def \\_\\_call\\_\\_(self, message):  </span></span>\n<span class=\"line\"><span>    self.messages.append({\"role\": \"user\", \"content\": message})  </span></span>\n<span class=\"line\"><span>    result = self.execute()  </span></span>\n<span class=\"line\"><span>    self.messages.append({\"role\": \"assistant\", \"content\": result})  </span></span>\n<span class=\"line\"><span>    return result</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>def execute(self):  </span></span>\n<span class=\"line\"><span>    response = client.chat.completions.create(  </span></span>\n<span class=\"line\"><span>        model=llm\\_name,  </span></span>\n<span class=\"line\"><span>        messages=self.messages  </span></span>\n<span class=\"line\"><span>    )  </span></span>\n<span class=\"line\"><span>    return response.choices\\[0\\].message.content</span></span></code></pre>\n<p># Uso del agente<br>\nagent = Agent(system=“Eres un asistente que brinda respuestas claras y concisas.”)<br>\nrespuesta = agent(“¿Quién fue Nelson Mandela?“)<br>\nprint(respuesta)</p>\n<h3 id=\"explicación\">Explicación:</h3>\n<ul>\n<li><strong>Inicialización del modelo:</strong> El agente utiliza <code>gpt-4.0</code> para procesar mensajes.</li>\n<li><strong>Historial de mensajes:</strong> Almacena conversaciones previas para mantener contexto.</li>\n<li><strong>Ejemplo de uso:</strong> Responde a preguntas generales.</li>\n</ul>\n<hr>\n<h3 id=\"ejemplo-2-agente-financiero-avanzado-con-langgraph\">Ejemplo 2: Agente financiero avanzado con LangGraph</h3>\n<p>LangGraph es una herramienta poderosa que permite modelar flujos de trabajo complejos utilizando grafos de estados. En este ejemplo, implementamos un agente financiero que recopila y analiza datos financieros de manera estructurada.</p>\n<h3 id=\"construcción-del-grafo-deestados\">Construcción del grafo de estados</h3>\n<p>LangGraph permite representar la lógica del agente como un conjunto de nodos (estados) y transiciones entre ellos. Cada nodo define una tarea específica que el agente debe realizar.</p>\n<p>from langgraph.graph import StateGraph<br>\nfrom langchain_openai import ChatOpenAI<br>\nfrom dotenv import load_dotenv<br>\nimport os</p>\n<p># Cargar variables de entorno<br>\nload_dotenv()<br>\nopenai_key = os.getenv(“OPENAI_API_KEY”)</p>\n<p># Configurar el modelo<br>\nmodel = ChatOpenAI(api_key=openai_key, model=“gpt-4.0”)</p>\n<p>def financial_analysis(prompt):<br>\nreturn model.chat([{“role”: “user”, “content”: prompt}])</p>\n<p># Crear un grafo de estados<br>\ngraph = StateGraph()</p>\n<p># Definir los estados<br>\ndef gather_data(state, context):<br>\n# Simula la recopilación de datos financieros<br>\ncontext[‘data’] = “Datos financieros recopilados”<br>\nreturn “Datos recopilados”</p>\n<p>def analyze_data(state, context):<br>\n# Simula el análisis de los datos<br>\ndata = context.get(‘data’, “Sin datos”)<br>\ncontext[‘analysis’] = f”Análisis completado para: {data}“<br>\nreturn context[‘analysis’]</p>\n<p>def generate_report(state, context):<br>\n# Genera un informe basado en el análisis<br>\nanalysis = context.get(‘analysis’, “Sin análisis”)<br>\nreturn f”Informe generado: {analysis}”</p>\n<p># Agregar estados al grafo<br>\ngraph.add_state(“gather_data”, gather_data)<br>\ngraph.add_state(“analyze_data”, analyze_data)<br>\ngraph.add_state(“generate_report”, generate_report)</p>\n<p># Definir las transiciones<br>\ngraph.add_transition(“gather_data”, “analyze_data”)<br>\ngraph.add_transition(“analyze_data”, “generate_report”)</p>\n<p># Ejecutar el grafo<br>\ncontext = {}<br>\nresult = graph.run(initial_state=“gather_data”, context=context)<br>\nprint(result)</p>\n<h3 id=\"explicación-detallada\">Explicación detallada:</h3>\n<ul>\n<li><strong>Estado</strong> <code>**gather_data**</code><strong>:</strong> Recopila datos financieros simulados y los almacena en el contexto del grafo.</li>\n<li><strong>Estado</strong> <code>**analyze_data**</code><strong>:</strong> Realiza un análisis de los datos recopilados, también almacenado en el contexto.</li>\n<li><strong>Estado</strong> <code>**generate_report**</code><strong>:</strong> Genera un informe basado en el análisis realizado.</li>\n<li><strong>Transiciones:</strong> Controlan el flujo entre los estados de manera secuencial.</li>\n</ul>\n<h3 id=\"ventajas-de-langgraph\">Ventajas de LangGraph:</h3>\n<ol>\n<li><strong>Modularidad:</strong> Cada estado es una unidad independiente, lo que facilita el mantenimiento y la ampliación del agente.</li>\n<li><strong>Contexto compartido:</strong> El grafo permite almacenar y compartir datos entre estados, garantizando consistencia.</li>\n<li><strong>Escalabilidad:</strong> Ideal para modelar flujos de trabajo complejos con lógica ramificada.</li>\n<li><strong>Visualización:</strong> LangGraph permite generar visualizaciones del flujo, lo que mejora la comprensión del sistema.</li>\n</ol>\n<hr>\n<h3 id=\"casos-de-uso-prácticos\">Casos de uso prácticos</h3>\n<ol>\n<li><strong>Atención al cliente:</strong> Creación de asistentes virtuales personalizados.</li>\n<li><strong>Finanzas:</strong> Generación de informes y análisis de datos.</li>\n<li><strong>Educación:</strong> Agentes interactivos para tutorías automatizadas.</li>\n<li><strong>Investigación de mercados:</strong> Análisis competitivo en tiempo real.</li>\n<li><strong>Automatización de procesos:</strong> Flujos complejos en lógicas empresariales.</li>\n</ol>\n<hr>\n<h3 id=\"reflexión-final\">Reflexión final</h3>\n<p>LangGraph se destaca como una herramienta clave para estructurar agentes inteligentes de manera escalable y eficiente. Su integración con LLMs como GPT-4.0 ofrece una combinación poderosa para resolver problemas complejos en diversos dominios.</p>\n<p>Si deseas aprender más, te invito a explorar estos conceptos y llevarlos a tus proyectos. ¡La IA está transformando el futuro, y ahora es el momento de ser parte de este cambio!</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/3226c5971fa2\">December 19, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph-3226c5971fa2\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph","description":"","tags":["code","AI","Langchain","LangGraph"],"time":4,"featured":true,"timestamp":"2024-12-19T12:20:33-0300","filename":"2024-12-19_AI-Agent-Develop--Agentes-Inteligentes-con-LangChain-y-LangGraph-3226c5971fa2"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-12-19_AI-Agent-Develop--Agentes-Inteligentes-con-LangChain-y-LangGraph-3226c5971fa2.md";
				const url = "/blog/2024-12-19_AI-Agent-Develop--Agentes-Inteligentes-con-LangChain-y-LangGraph-3226c5971fa2";
				function rawContent() {
					return "   \n                                        \n                                                                         \n               \n                                              \n       \n              \n                                     \n                                                                                                    \n   \n\nAI Agent Develop: Agentes Inteligentes con LangChain y LangGraph\n================================================================\n\nhttps://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/\n\n* * *\n\n### AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph\n\n![](https://cdn-images-1.medium.com/max/800/1*iSr7FYvnOi72mt8BRf5Qww.png)\n\nCurso Udemy Pablo Dichone\n\n[https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/](https://www.udemy.com/certificate/UC-780d6420-e70c-468d-800b-1cbf971835d9/)\n\nEn este blog, exploraremos los conocimientos que adquirí en el curso **“Master AI Agent Development: Build Scalable Agents with LangChain & LangGraph”**. Este curso me permitió desarrollar agentes escalables utilizando herramientas avanzadas como LangChain y LangGraph, desde conceptos básicos hasta aplicaciones sofisticadas en casos reales.\n\n* * *\n\n### ¿Qué son los agentes inteligentes?\n\nLos agentes inteligentes son sistemas diseñados para interactuar de forma autónoma con el entorno, tomando decisiones basadas en datos y modelos de lenguaje. Su aplicación abarca sectores como la atención al cliente, investigación de mercados, educación y análisis financieros.\n\nEn este curso, aprendí cómo implementar estos agentes desde cero utilizando modelos como GPT-4.0 y combinándolos con grafos de estado, almacenamiento de memoria y herramientas externas.\n\n* * *\n\n### Ejemplo 1: Construyendo un agente básico\n\nEl primer paso fue crear un agente simple que utiliza un modelo de lenguaje grande (LLM) para responder preguntas del usuario. A continuación, un fragmento del código:\n\nimport os  \nfrom dotenv import load\\_dotenv  \nfrom openai import OpenAI\n\n\\# Cargar variables de entorno  \nload\\_dotenv()  \nopenai\\_key = os.getenv(\"OPENAI\\_API\\_KEY\")\n\n\\# Configurar el modelo  \nllm\\_name = \"gpt-4.0\"  \nclient = OpenAI(api\\_key=openai\\_key)\n\nclass Agent:  \n    def \\_\\_init\\_\\_(self, system=\"\"):  \n        self.system = system  \n        self.messages = \\[\\]  \n        if system:  \n            self.messages.append({\"role\": \"system\", \"content\": system})\n\n    def \\_\\_call\\_\\_(self, message):  \n        self.messages.append({\"role\": \"user\", \"content\": message})  \n        result = self.execute()  \n        self.messages.append({\"role\": \"assistant\", \"content\": result})  \n        return result\n\n    def execute(self):  \n        response = client.chat.completions.create(  \n            model=llm\\_name,  \n            messages=self.messages  \n        )  \n        return response.choices\\[0\\].message.content\n\n\\# Uso del agente  \nagent = Agent(system=\"Eres un asistente que brinda respuestas claras y concisas.\")  \nrespuesta = agent(\"¿Quién fue Nelson Mandela?\")  \nprint(respuesta)\n\n### Explicación:\n\n*   **Inicialización del modelo:** El agente utiliza `gpt-4.0` para procesar mensajes.\n*   **Historial de mensajes:** Almacena conversaciones previas para mantener contexto.\n*   **Ejemplo de uso:** Responde a preguntas generales.\n\n* * *\n\n### Ejemplo 2: Agente financiero avanzado con LangGraph\n\nLangGraph es una herramienta poderosa que permite modelar flujos de trabajo complejos utilizando grafos de estados. En este ejemplo, implementamos un agente financiero que recopila y analiza datos financieros de manera estructurada.\n\n### Construcción del grafo de estados\n\nLangGraph permite representar la lógica del agente como un conjunto de nodos (estados) y transiciones entre ellos. Cada nodo define una tarea específica que el agente debe realizar.\n\nfrom langgraph.graph import StateGraph  \nfrom langchain\\_openai import ChatOpenAI  \nfrom dotenv import load\\_dotenv  \nimport os\n\n\\# Cargar variables de entorno  \nload\\_dotenv()  \nopenai\\_key = os.getenv(\"OPENAI\\_API\\_KEY\")\n\n\\# Configurar el modelo  \nmodel = ChatOpenAI(api\\_key=openai\\_key, model=\"gpt-4.0\")\n\ndef financial\\_analysis(prompt):  \n    return model.chat(\\[{\"role\": \"user\", \"content\": prompt}\\])\n\n\\# Crear un grafo de estados  \ngraph = StateGraph()\n\n\\# Definir los estados  \ndef gather\\_data(state, context):  \n    # Simula la recopilación de datos financieros  \n    context\\['data'\\] = \"Datos financieros recopilados\"  \n    return \"Datos recopilados\"\n\ndef analyze\\_data(state, context):  \n    # Simula el análisis de los datos  \n    data = context.get('data', \"Sin datos\")  \n    context\\['analysis'\\] = f\"Análisis completado para: {data}\"  \n    return context\\['analysis'\\]\n\ndef generate\\_report(state, context):  \n    # Genera un informe basado en el análisis  \n    analysis = context.get('analysis', \"Sin análisis\")  \n    return f\"Informe generado: {analysis}\"\n\n\\# Agregar estados al grafo  \ngraph.add\\_state(\"gather\\_data\", gather\\_data)  \ngraph.add\\_state(\"analyze\\_data\", analyze\\_data)  \ngraph.add\\_state(\"generate\\_report\", generate\\_report)\n\n\\# Definir las transiciones  \ngraph.add\\_transition(\"gather\\_data\", \"analyze\\_data\")  \ngraph.add\\_transition(\"analyze\\_data\", \"generate\\_report\")\n\n\\# Ejecutar el grafo  \ncontext = {}  \nresult = graph.run(initial\\_state=\"gather\\_data\", context=context)  \nprint(result)\n\n### Explicación detallada:\n\n*   **Estado** `**gather_data**`**:** Recopila datos financieros simulados y los almacena en el contexto del grafo.\n*   **Estado** `**analyze_data**`**:** Realiza un análisis de los datos recopilados, también almacenado en el contexto.\n*   **Estado** `**generate_report**`**:** Genera un informe basado en el análisis realizado.\n*   **Transiciones:** Controlan el flujo entre los estados de manera secuencial.\n\n### Ventajas de LangGraph:\n\n1.  **Modularidad:** Cada estado es una unidad independiente, lo que facilita el mantenimiento y la ampliación del agente.\n2.  **Contexto compartido:** El grafo permite almacenar y compartir datos entre estados, garantizando consistencia.\n3.  **Escalabilidad:** Ideal para modelar flujos de trabajo complejos con lógica ramificada.\n4.  **Visualización:** LangGraph permite generar visualizaciones del flujo, lo que mejora la comprensión del sistema.\n\n* * *\n\n### Casos de uso prácticos\n\n1.  **Atención al cliente:** Creación de asistentes virtuales personalizados.\n2.  **Finanzas:** Generación de informes y análisis de datos.\n3.  **Educación:** Agentes interactivos para tutorías automatizadas.\n4.  **Investigación de mercados:** Análisis competitivo en tiempo real.\n5.  **Automatización de procesos:** Flujos complejos en lógicas empresariales.\n\n* * *\n\n### Reflexión final\n\nLangGraph se destaca como una herramienta clave para estructurar agentes inteligentes de manera escalable y eficiente. Su integración con LLMs como GPT-4.0 ofrece una combinación poderosa para resolver problemas complejos en diversos dominios.\n\nSi deseas aprender más, te invito a explorar estos conceptos y llevarlos a tus proyectos. ¡La IA está transformando el futuro, y ahora es el momento de ser parte de este cambio!\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [December 19, 2024](https://medium.com/p/3226c5971fa2).\n\n[Canonical link](https://medium.com/@devjaime/ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph-3226c5971fa2)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph","text":"AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph"},{"depth":3,"slug":"ai-agent-develop-agentes-inteligentes-con-langchain-y-langgraph-1","text":"AI Agent Develop: Agentes Inteligentes con LangChain y LangGraph"},{"depth":3,"slug":"qué-son-los-agentes-inteligentes","text":"¿Qué son los agentes inteligentes?"},{"depth":3,"slug":"ejemplo-1-construyendo-un-agentebásico","text":"Ejemplo 1: Construyendo un agente básico"},{"depth":3,"slug":"explicación","text":"Explicación:"},{"depth":3,"slug":"ejemplo-2-agente-financiero-avanzado-con-langgraph","text":"Ejemplo 2: Agente financiero avanzado con LangGraph"},{"depth":3,"slug":"construcción-del-grafo-deestados","text":"Construcción del grafo de estados"},{"depth":3,"slug":"explicación-detallada","text":"Explicación detallada:"},{"depth":3,"slug":"ventajas-de-langgraph","text":"Ventajas de LangGraph:"},{"depth":3,"slug":"casos-de-uso-prácticos","text":"Casos de uso prácticos"},{"depth":3,"slug":"reflexión-final","text":"Reflexión final"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
