/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"día-3-arquitectura-flutter-y-configuración-del-proyecto\">Día 3: Arquitectura Flutter y configuración del proyecto</h1>\n<p>Bienvenido al día 3, donde aprenderas sobre la arquitectura del marco Flutter y verá cómo configurar un proyecto Flutter con algunas…</p>\n<hr>\n<h3 id=\"día-3-arquitectura-flutter-y-configuración-delproyecto\">Día 3: Arquitectura Flutter y configuración del proyecto</h3>\n<p>Bienvenido al día 3, donde aprenderas sobre la arquitectura del marco Flutter y verá cómo configurar un proyecto Flutter con algunas buenas reglas de linter.</p>\n<h3 id=\"arquitectura-flutter\">Arquitectura Flutter</h3>\n<p>Ya sea que haya creado una aplicación Flutter antes o no, es útil obtener una descripción general de alto nivel de la arquitectura Flutter desde un punto de vista conceptual.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Zne8-v9BhEYBuQNy\" alt=\"\"></p>\n<p>Flutter usa su propio motor de renderizado llamado Skia. Está escrito en C/C ++ y proporciona API de bajo nivel para renderizado. Cuando escribes aplicaciones en Flutter, su código no llama directamente a las API del motor Flutter. Más bien, utiliza un conjunto de API de alto nivel proporcionadas por el <strong>marco</strong> Flutter .</p>\n<p>Por diseño, <strong>Flutter controla cada píxel que se dibuja en la pantalla</strong> . El framework de Flutter ofrece un amplio conjunto de componentes de IU (llamados widgets) que se asemejan mucho a los controles de IU nativos en iOS y Android.</p>\n<h3 id=\"modelo-de-programación-declarativa\">Modelo de programación declarativa</h3>\n<p>Flutter usa un modelo de programación declarativo.</p>\n<p>Los widgets de Flutter definen su IU anulando el método <strong>build()</strong> , que es una función que convierte el estado en IU:</p>\n<p><strong>UI = f(state)</strong></p>\n<p>Los widgets pequeños y de un solo propósito se <strong>componen</strong> juntos para crear otros más complejos y especializados que representan la interfaz de usuario de su aplicación. Por lo tanto, toda la aplicación está representada por un <strong>árbol de widgets</strong> .</p>\n<p>Por ejemplo, así es como se ve el árbol de widgets para la aplicación de contador Flutter predeterminada:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*iAmiW7_uEolAjGJm\" alt=\"\"></p>\n<p>​</p>\n<p>En la próxima lección sobre gestión de estados, hablaremos sobre cómo reconstruir la interfaz de usuario cuando algunos estados <strong>cambian</strong> y qué técnicas están disponibles para hacerlo.</p>\n<p>Pero por ahora esta es toda la teoría que necesita. Y si quieres una explicación más detallada de la arquitectura de Flutter, no hay mejor lugar que la documentación oficial:</p>\n<ul>\n<li><a href=\"https://flutter.dev/docs/resources/architectural-overview\">Descripción de la arquitectura flutter</a></li>\n</ul>\n<p>Esta es una lectura larga, pero vale la pena si quieres entender cómo funciona Flutter bajo el capó.</p>\n<p>Pasemos a algo más práctico.</p>\n<h3 id=\"configuración-delproyecto\">Configuración del proyecto</h3>\n<p>Cuando creas un nuevo proyecto de Flutter, se generarán algunos archivos y carpetas.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*ruKZk537QYa7g2F0\" alt=\"\"></p>\n<p>​</p>\n<p>El archivo más importante se llama <strong>pubspec.yaml</strong> . Este se usa para especificar las <strong>dependencias de</strong> su aplicación . Estos recursos explican cómo funciona este archivo y cómo usarlo para instalar paquetes:</p>\n<ul>\n<li><a href=\"https://dart.dev/tools/pub/pubspec\">El archivo pubspec</a></li>\n<li><a href=\"https://flutter.dev/docs/development/packages-and-plugins/using-packages\">El uso de paquetes</a></li>\n</ul>\n<p>Además de esto, recomiendo encarecidamente agregar un archivo <strong>analysis_options.yaml</strong> . Esto se puede usar para especificar <strong>reglas de linter</strong> y habilitar advertencias y errores adicionales para su proyecto. Aquí hay una guía detallada al respecto:</p>\n<ul>\n<li><a href=\"https://dash-overflow.net/articles/getting_started/\">Primeros pasos: Creación de su proyecto</a> implementando reglas de linter</li>\n</ul>\n<p>En particular, lea la sección “Cómo administrar sus reglas de linter fácilmente” al final. Esto explica cómo crear un conjunto de reglas limpias y fáciles de mantener que puede modificar en sus aplicaciones.</p>\n<p>Puede descargar un archivo <strong>analysis_options.yaml</strong> “oficial” <a href=\"https://dart-lang.github.io/linter/lints/options/options.html\">desde aquí</a> y también ver una <a href=\"https://dart-lang.github.io/linter/lints/index.html\">lista de todas las reglas admitidas con explicaciones</a>.</p>\n<h3 id=\"reto-diario\">Reto diario</h3>\n<p>Agregue un archivo <strong>analysis_options.yaml</strong> a su proyecto y escribe un tweet al respecto.</p>\n<p><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\" title=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"><strong>Donate to devjaime</strong><br>\n_Help support devjaime by donating or sharing with your friends._www.paypal.com</a><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"></a></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*AoPJYe3CEt6kH81S\" alt=\"\"></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/9307aa98b4fe\">March 23, 2021</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/d%C3%ADa-3-arquitectura-flutter-y-configuraci%C3%B3n-del-proyecto-9307aa98b4fe\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Día 3: Arquitectura Flutter y configuración del proyecto","description":"","tags":["code","Flutter"],"time":4,"featured":true,"timestamp":"2021-03-23T12:20:31-0300","filename":"2021-03-23_D-a-3--Arquitectura-Flutter-y-configuraci-n-del-proyecto-9307aa98b4fe"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2021-03-23_D-a-3--Arquitectura-Flutter-y-configuraci-n-del-proyecto-9307aa98b4fe.md";
				const url = "/blog/2021-03-23_D-a-3--Arquitectura-Flutter-y-configuraci-n-del-proyecto-9307aa98b4fe";
				function rawContent() {
					return "   \n                                        \n                                                                 \n               \n                         \n       \n              \n                                     \n                                                                                            \n   \n\nDía 3: Arquitectura Flutter y configuración del proyecto\n========================================================\n\nBienvenido al día 3, donde aprenderas sobre la arquitectura del marco Flutter y verá cómo configurar un proyecto Flutter con algunas…\n\n* * *\n\n### Día 3: Arquitectura Flutter y configuración del proyecto\n\nBienvenido al día 3, donde aprenderas sobre la arquitectura del marco Flutter y verá cómo configurar un proyecto Flutter con algunas buenas reglas de linter.\n\n### Arquitectura Flutter\n\nYa sea que haya creado una aplicación Flutter antes o no, es útil obtener una descripción general de alto nivel de la arquitectura Flutter desde un punto de vista conceptual.\n\n![](https://cdn-images-1.medium.com/max/800/0*Zne8-v9BhEYBuQNy)\n\nFlutter usa su propio motor de renderizado llamado Skia. Está escrito en C/C ++ y proporciona API de bajo nivel para renderizado. Cuando escribes aplicaciones en Flutter, su código no llama directamente a las API del motor Flutter. Más bien, utiliza un conjunto de API de alto nivel proporcionadas por el **marco** Flutter .\n\nPor diseño, **Flutter controla cada píxel que se dibuja en la pantalla** . El framework de Flutter ofrece un amplio conjunto de componentes de IU (llamados widgets) que se asemejan mucho a los controles de IU nativos en iOS y Android.\n\n### Modelo de programación declarativa\n\nFlutter usa un modelo de programación declarativo.\n\nLos widgets de Flutter definen su IU anulando el método **build()** , que es una función que convierte el estado en IU:\n\n**UI = f(state)**\n\nLos widgets pequeños y de un solo propósito se **componen** juntos para crear otros más complejos y especializados que representan la interfaz de usuario de su aplicación. Por lo tanto, toda la aplicación está representada por un **árbol de widgets** .\n\nPor ejemplo, así es como se ve el árbol de widgets para la aplicación de contador Flutter predeterminada:\n\n![](https://cdn-images-1.medium.com/max/800/0*iAmiW7_uEolAjGJm)\n\n​\n\nEn la próxima lección sobre gestión de estados, hablaremos sobre cómo reconstruir la interfaz de usuario cuando algunos estados **cambian** y qué técnicas están disponibles para hacerlo.\n\nPero por ahora esta es toda la teoría que necesita. Y si quieres una explicación más detallada de la arquitectura de Flutter, no hay mejor lugar que la documentación oficial:\n\n*   [Descripción de la arquitectura flutter](https://flutter.dev/docs/resources/architectural-overview)\n\nEsta es una lectura larga, pero vale la pena si quieres entender cómo funciona Flutter bajo el capó.\n\nPasemos a algo más práctico.\n\n### Configuración del proyecto\n\nCuando creas un nuevo proyecto de Flutter, se generarán algunos archivos y carpetas.\n\n![](https://cdn-images-1.medium.com/max/800/0*ruKZk537QYa7g2F0)\n\n​\n\nEl archivo más importante se llama **pubspec.yaml** . Este se usa para especificar las **dependencias de** su aplicación . Estos recursos explican cómo funciona este archivo y cómo usarlo para instalar paquetes:\n\n*   [El archivo pubspec](https://dart.dev/tools/pub/pubspec)\n*   [El uso de paquetes](https://flutter.dev/docs/development/packages-and-plugins/using-packages)\n\nAdemás de esto, recomiendo encarecidamente agregar un archivo **analysis\\_options.yaml** . Esto se puede usar para especificar **reglas de linter** y habilitar advertencias y errores adicionales para su proyecto. Aquí hay una guía detallada al respecto:\n\n*   [Primeros pasos: Creación de su proyecto](https://dash-overflow.net/articles/getting_started/) implementando reglas de linter\n\nEn particular, lea la sección “Cómo administrar sus reglas de linter fácilmente” al final. Esto explica cómo crear un conjunto de reglas limpias y fáciles de mantener que puede modificar en sus aplicaciones.\n\nPuede descargar un archivo **analysis\\_options.yaml** “oficial” [desde aquí](https://dart-lang.github.io/linter/lints/options/options.html) y también ver una [lista de todas las reglas admitidas con explicaciones](https://dart-lang.github.io/linter/lints/index.html).\n\n### Reto diario\n\nAgregue un archivo **analysis\\_options.yaml** a su proyecto y escribe un tweet al respecto.\n\n[**Donate to devjaime**  \n_Help support devjaime by donating or sharing with your friends._www.paypal.com](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S \"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\")[](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S)\n\n![](https://cdn-images-1.medium.com/max/800/0*AoPJYe3CEt6kH81S)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [March 23, 2021](https://medium.com/p/9307aa98b4fe).\n\n[Canonical link](https://medium.com/@devjaime/d%C3%ADa-3-arquitectura-flutter-y-configuraci%C3%B3n-del-proyecto-9307aa98b4fe)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"día-3-arquitectura-flutter-y-configuración-del-proyecto","text":"Día 3: Arquitectura Flutter y configuración del proyecto"},{"depth":3,"slug":"día-3-arquitectura-flutter-y-configuración-delproyecto","text":"Día 3: Arquitectura Flutter y configuración del proyecto"},{"depth":3,"slug":"arquitectura-flutter","text":"Arquitectura Flutter"},{"depth":3,"slug":"modelo-de-programación-declarativa","text":"Modelo de programación declarativa"},{"depth":3,"slug":"configuración-delproyecto","text":"Configuración del proyecto"},{"depth":3,"slug":"reto-diario","text":"Reto diario"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
