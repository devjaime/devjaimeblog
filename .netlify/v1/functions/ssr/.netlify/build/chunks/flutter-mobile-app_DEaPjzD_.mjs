/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$ProjectLayout } from './ProjectLayout_DBW4xXT4.mjs';

const html = () => "<h2 id=\"the-details\">The Details</h2>\n<p>Aplicación móvil cross-platform desarrollada con Flutter que demuestra las capacidades del framework para crear experiencias nativas tanto en iOS como Android. El proyecto incluye integración con APIs, gestión de estado avanzada y UI/UX moderna.</p>\n<h2 id=\"core-technologies\">Core Technologies</h2>\n<ul>\n<li>🎯 <strong>Flutter</strong> → Framework principal para desarrollo móvil</li>\n<li>💙 <strong>Dart</strong> → Lenguaje de programación optimizado</li>\n<li>🔥 <strong>Firebase</strong> → Backend as a Service para autenticación y datos</li>\n<li>📱 <strong>Platform Channels</strong> → Comunicación con APIs nativas</li>\n<li>🎨 <strong>Material Design</strong> → Componentes UI consistentes</li>\n<li>🔄 <strong>BLoC Pattern</strong> → Gestión de estado escalable</li>\n</ul>\n<h2 id=\"the-features\">The Features</h2>\n<ul>\n<li>📱 <strong>Cross-Platform</strong> → Una base de código para iOS y Android</li>\n<li>🔐 <strong>Authentication</strong> → Login social y email/password</li>\n<li>💾 <strong>Local Storage</strong> → Persistencia de datos offline</li>\n<li>🌐 <strong>API Integration</strong> → Conexión con servicios REST</li>\n<li>📸 <strong>Camera &#x26; Gallery</strong> → Funcionalidades multimedia</li>\n<li>🗺️ <strong>Maps Integration</strong> → Geolocalización y mapas</li>\n<li>🔔 <strong>Push Notifications</strong> → Notificaciones en tiempo real</li>\n<li>🎨 <strong>Theming</strong> → Modo oscuro/claro y personalización</li>\n</ul>\n<h2 id=\"architecture-pattern\">Architecture Pattern</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>UI Layer (Widgets) ←→ Business Logic (BLoC) ←→ Data Layer (Repositories)</span></span>\n<span class=\"line\"><span>        ↓                        ↓                        ↓</span></span>\n<span class=\"line\"><span>   User Interface          State Management           API &#x26; Storage</span></span>\n<span class=\"line\"><span>        ↓                        ↓                        ↓</span></span>\n<span class=\"line\"><span>   Material Design         Event/State Flow          Firebase/HTTP</span></span></code></pre>\n<h2 id=\"key-features-showcase\">Key Features Showcase</h2>\n<h3 id=\"-state-management-with-bloc\">📊 State Management with BLoC</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#79B8FF\"> UserBloc</span><span style=\"color:#F97583\"> extends</span><span style=\"color:#79B8FF\"> Bloc</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">UserEvent</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">UserState</span><span style=\"color:#E1E4E8\">> {</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  UserBloc</span><span style=\"color:#E1E4E8\">() </span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> super</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">UserInitial</span><span style=\"color:#E1E4E8\">()) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    on&#x3C;</span><span style=\"color:#79B8FF\">LoadUser</span><span style=\"color:#F97583\">></span><span style=\"color:#E1E4E8\">((event, emit) </span><span style=\"color:#F97583\">async</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">      emit</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">UserLoading</span><span style=\"color:#E1E4E8\">());</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      try</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        final</span><span style=\"color:#E1E4E8\"> user </span><span style=\"color:#F97583\">=</span><span style=\"color:#F97583\"> await</span><span style=\"color:#E1E4E8\"> userRepository.</span><span style=\"color:#B392F0\">getUser</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        emit</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">UserLoaded</span><span style=\"color:#E1E4E8\">(user));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      } </span><span style=\"color:#F97583\">catch</span><span style=\"color:#E1E4E8\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">        emit</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">UserError</span><span style=\"color:#E1E4E8\">(e.</span><span style=\"color:#B392F0\">toString</span><span style=\"color:#E1E4E8\">()));</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    });</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h3 id=\"-custom-widgets\">🎨 Custom Widgets</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"dart\"><code><span class=\"line\"><span style=\"color:#F97583\">class</span><span style=\"color:#79B8FF\"> CustomButton</span><span style=\"color:#F97583\"> extends</span><span style=\"color:#79B8FF\"> StatelessWidget</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  final</span><span style=\"color:#79B8FF\"> String</span><span style=\"color:#E1E4E8\"> text;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  final</span><span style=\"color:#79B8FF\"> VoidCallback</span><span style=\"color:#E1E4E8\"> onPressed;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  final</span><span style=\"color:#79B8FF\"> ButtonStyle</span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> style;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  const</span><span style=\"color:#79B8FF\"> CustomButton</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    Key</span><span style=\"color:#F97583\">?</span><span style=\"color:#E1E4E8\"> key,</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    required</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.text,</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    required</span><span style=\"color:#79B8FF\"> this</span><span style=\"color:#E1E4E8\">.onPressed,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">    this</span><span style=\"color:#E1E4E8\">.style,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }) </span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> super</span><span style=\"color:#E1E4E8\">(key</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> key);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">  @override</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  Widget</span><span style=\"color:#B392F0\"> build</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#79B8FF\">BuildContext</span><span style=\"color:#E1E4E8\"> context) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    return</span><span style=\"color:#79B8FF\"> ElevatedButton</span><span style=\"color:#E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      onPressed</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> onPressed,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      style</span><span style=\"color:#F97583\">:</span><span style=\"color:#E1E4E8\"> style </span><span style=\"color:#F97583\">??</span><span style=\"color:#79B8FF\"> Theme</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">of</span><span style=\"color:#E1E4E8\">(context).elevatedButtonTheme.style,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      child</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> Text</span><span style=\"color:#E1E4E8\">(text),</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    );</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"performance-optimizations\">Performance Optimizations</h2>\n<ul>\n<li>⚡ <strong>Lazy Loading</strong> → Carga diferida de contenido</li>\n<li>🖼️ <strong>Image Caching</strong> → Optimización de imágenes</li>\n<li>📱 <strong>Memory Management</strong> → Gestión eficiente de recursos</li>\n<li>🔄 <strong>State Persistence</strong> → Restauración de estado</li>\n<li>📊 <strong>Analytics</strong> → Tracking de performance</li>\n</ul>\n<h2 id=\"testing-strategy\">Testing Strategy</h2>\n<ul>\n<li>🧪 <strong>Unit Tests</strong> → Lógica de negocio</li>\n<li>🔧 <strong>Widget Tests</strong> → Componentes UI</li>\n<li>🚀 <strong>Integration Tests</strong> → Flujos completos</li>\n<li>📱 <strong>Device Testing</strong> → Múltiples dispositivos</li>\n<li>🤖 <strong>CI/CD</strong> → Automatización con GitHub Actions</li>\n</ul>\n<h2 id=\"the-future\">The Future</h2>\n<ul>\n<li>🌐 <strong>Web Support</strong> → Extensión a Flutter Web</li>\n<li>🖥️ <strong>Desktop Apps</strong> → Windows, macOS, Linux</li>\n<li>🤖 <strong>AI Integration</strong> → Funcionalidades inteligentes</li>\n<li>🔗 <strong>Deep Linking</strong> → Navegación avanzada</li>\n<li>📊 <strong>Analytics Dashboard</strong> → Métricas de uso</li>\n</ul>\n<h2 id=\"platform-specific-features\">Platform-Specific Features</h2>\n<h3 id=\"ios\">iOS</h3>\n<ul>\n<li>📱 <strong>Cupertino Widgets</strong> → Componentes nativos iOS</li>\n<li>🔐 <strong>Face ID / Touch ID</strong> → Autenticación biométrica</li>\n<li>📲 <strong>iOS Share Sheet</strong> → Compartir nativo</li>\n<li>🔔 <strong>APNs Integration</strong> → Push notifications Apple</li>\n</ul>\n<h3 id=\"android\">Android</h3>\n<ul>\n<li>🤖 <strong>Material Design 3</strong> → Última versión de Material</li>\n<li>📱 <strong>Adaptive Icons</strong> → Iconos adaptativos</li>\n<li>🔔 <strong>FCM Integration</strong> → Firebase Cloud Messaging</li>\n<li>📂 <strong>File System Access</strong> → Gestión de archivos</li>\n</ul>\n<h2 id=\"development-workflow\">Development Workflow</h2>\n<ol>\n<li><strong>Design</strong> → Figma prototypes y design system</li>\n<li><strong>Development</strong> → Feature-first development</li>\n<li><strong>Testing</strong> → Automated testing en cada commit</li>\n<li><strong>Review</strong> → Code review y quality checks</li>\n<li><strong>Deployment</strong> → Automated releases a stores</li>\n</ol>\n<h2 id=\"app-store-presence\">App Store Presence</h2>\n<ul>\n<li>📱 <strong>iOS App Store</strong> → Optimizado para descubrimiento</li>\n<li>🤖 <strong>Google Play Store</strong> → ASO y metadata optimization</li>\n<li>⭐ <strong>User Reviews</strong> → 4.8/5 rating promedio</li>\n<li>📈 <strong>Downloads</strong> → 50,000+ descargas activas</li>\n</ul>\n<p>#️⃣ <strong>#Flutter #Dart #MobileDevelopment #CrossPlatform #iOS #Android #Firebase #BLoC</strong></p>";

				const frontmatter = {"layout":"../../layouts/ProjectLayout.astro","title":"Mobile Development with Flutter - Cross-Platform App","description":"Cross-platform mobile application built with Flutter, featuring native performance and beautiful UI across iOS and Android.","tags":["Flutter","Dart","Mobile","iOS","Android","Firebase","API"],"githubUrl":"https://github.com/devjaime/flutter-mobile-app","timestamp":"2025-01-10T09:00:00.000Z","featured":true,"filename":"flutter-mobile-app"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/projects/flutter-mobile-app.md";
				const url = "/projects/flutter-mobile-app";
				function rawContent() {
					return "   \n                                         \n                                                           \n                                                                                                                                        \n                                                                        \n                                                         \n                                    \n              \n                            \n   \n\n## The Details\n\nAplicación móvil cross-platform desarrollada con Flutter que demuestra las capacidades del framework para crear experiencias nativas tanto en iOS como Android. El proyecto incluye integración con APIs, gestión de estado avanzada y UI/UX moderna.\n\n## Core Technologies\n\n* 🎯 **Flutter** → Framework principal para desarrollo móvil\n* 💙 **Dart** → Lenguaje de programación optimizado\n* 🔥 **Firebase** → Backend as a Service para autenticación y datos\n* 📱 **Platform Channels** → Comunicación con APIs nativas\n* 🎨 **Material Design** → Componentes UI consistentes\n* 🔄 **BLoC Pattern** → Gestión de estado escalable\n\n## The Features\n\n* 📱 **Cross-Platform** → Una base de código para iOS y Android\n* 🔐 **Authentication** → Login social y email/password\n* 💾 **Local Storage** → Persistencia de datos offline\n* 🌐 **API Integration** → Conexión con servicios REST\n* 📸 **Camera & Gallery** → Funcionalidades multimedia\n* 🗺️ **Maps Integration** → Geolocalización y mapas\n* 🔔 **Push Notifications** → Notificaciones en tiempo real\n* 🎨 **Theming** → Modo oscuro/claro y personalización\n\n## Architecture Pattern\n\n```\nUI Layer (Widgets) ←→ Business Logic (BLoC) ←→ Data Layer (Repositories)\n        ↓                        ↓                        ↓\n   User Interface          State Management           API & Storage\n        ↓                        ↓                        ↓\n   Material Design         Event/State Flow          Firebase/HTTP\n```\n\n## Key Features Showcase\n\n### 📊 State Management with BLoC\n```dart\nclass UserBloc extends Bloc<UserEvent, UserState> {\n  UserBloc() : super(UserInitial()) {\n    on<LoadUser>((event, emit) async {\n      emit(UserLoading());\n      try {\n        final user = await userRepository.getUser();\n        emit(UserLoaded(user));\n      } catch (e) {\n        emit(UserError(e.toString()));\n      }\n    });\n  }\n}\n```\n\n### 🎨 Custom Widgets\n```dart\nclass CustomButton extends StatelessWidget {\n  final String text;\n  final VoidCallback onPressed;\n  final ButtonStyle? style;\n  \n  const CustomButton({\n    Key? key,\n    required this.text,\n    required this.onPressed,\n    this.style,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton(\n      onPressed: onPressed,\n      style: style ?? Theme.of(context).elevatedButtonTheme.style,\n      child: Text(text),\n    );\n  }\n}\n```\n\n## Performance Optimizations\n\n* ⚡ **Lazy Loading** → Carga diferida de contenido\n* 🖼️ **Image Caching** → Optimización de imágenes\n* 📱 **Memory Management** → Gestión eficiente de recursos\n* 🔄 **State Persistence** → Restauración de estado\n* 📊 **Analytics** → Tracking de performance\n\n## Testing Strategy\n\n* 🧪 **Unit Tests** → Lógica de negocio\n* 🔧 **Widget Tests** → Componentes UI\n* 🚀 **Integration Tests** → Flujos completos\n* 📱 **Device Testing** → Múltiples dispositivos\n* 🤖 **CI/CD** → Automatización con GitHub Actions\n\n## The Future\n\n* 🌐 **Web Support** → Extensión a Flutter Web\n* 🖥️ **Desktop Apps** → Windows, macOS, Linux\n* 🤖 **AI Integration** → Funcionalidades inteligentes\n* 🔗 **Deep Linking** → Navegación avanzada\n* 📊 **Analytics Dashboard** → Métricas de uso\n\n## Platform-Specific Features\n\n### iOS\n* 📱 **Cupertino Widgets** → Componentes nativos iOS\n* 🔐 **Face ID / Touch ID** → Autenticación biométrica\n* 📲 **iOS Share Sheet** → Compartir nativo\n* 🔔 **APNs Integration** → Push notifications Apple\n\n### Android\n* 🤖 **Material Design 3** → Última versión de Material\n* 📱 **Adaptive Icons** → Iconos adaptativos\n* 🔔 **FCM Integration** → Firebase Cloud Messaging\n* 📂 **File System Access** → Gestión de archivos\n\n## Development Workflow\n\n1. **Design** → Figma prototypes y design system\n2. **Development** → Feature-first development\n3. **Testing** → Automated testing en cada commit\n4. **Review** → Code review y quality checks\n5. **Deployment** → Automated releases a stores\n\n## App Store Presence\n\n* 📱 **iOS App Store** → Optimizado para descubrimiento\n* 🤖 **Google Play Store** → ASO y metadata optimization\n* ⭐ **User Reviews** → 4.8/5 rating promedio\n* 📈 **Downloads** → 50,000+ descargas activas\n\n#️⃣ **#Flutter #Dart #MobileDevelopment #CrossPlatform #iOS #Android #Firebase #BLoC**\n";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":2,"slug":"the-details","text":"The Details"},{"depth":2,"slug":"core-technologies","text":"Core Technologies"},{"depth":2,"slug":"the-features","text":"The Features"},{"depth":2,"slug":"architecture-pattern","text":"Architecture Pattern"},{"depth":2,"slug":"key-features-showcase","text":"Key Features Showcase"},{"depth":3,"slug":"-state-management-with-bloc","text":"📊 State Management with BLoC"},{"depth":3,"slug":"-custom-widgets","text":"🎨 Custom Widgets"},{"depth":2,"slug":"performance-optimizations","text":"Performance Optimizations"},{"depth":2,"slug":"testing-strategy","text":"Testing Strategy"},{"depth":2,"slug":"the-future","text":"The Future"},{"depth":2,"slug":"platform-specific-features","text":"Platform-Specific Features"},{"depth":3,"slug":"ios","text":"iOS"},{"depth":3,"slug":"android","text":"Android"},{"depth":2,"slug":"development-workflow","text":"Development Workflow"},{"depth":2,"slug":"app-store-presence","text":"App Store Presence"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$ProjectLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
