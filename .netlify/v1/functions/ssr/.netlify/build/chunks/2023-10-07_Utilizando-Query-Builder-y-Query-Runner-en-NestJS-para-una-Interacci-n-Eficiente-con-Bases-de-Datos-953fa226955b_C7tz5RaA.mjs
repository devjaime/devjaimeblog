/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacción-eficiente-con-bases-de-datos\">Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos</h1>\n<p>NestJS es un marco de trabajo de Node.js que se ha convertido en una elección popular para la creación de aplicaciones web y API robustas…</p>\n<hr>\n<h3 id=\"utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacción-eficiente-con-bases-dedatos\">Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*_MINrEuWpn1yr0vC\" alt=\"\"></p>\n<p>NestJS es un marco de trabajo de Node.js que se ha convertido en una elección popular para la creación de aplicaciones web y API robustas. Uno de los aspectos cruciales al desarrollar aplicaciones es la interacción con bases de datos, y en este artículo, exploraremos dos conceptos clave en NestJS: Query Builder y Query Runner.</p>\n<h3 id=\"qué-son-query-builder-y-queryrunner\">¿Qué son Query Builder y Query Runner?</h3>\n<p>Query Builder es una herramienta que proporciona NestJS para construir consultas SQL de manera programática en lugar de escribirlas manualmente. Esto no solo hace que el código sea más legible, sino que también previene posibles vulnerabilidades de seguridad, como la inyección de SQL. Query Builder está diseñado para funcionar con una variedad de bases de datos, incluyendo PostgreSQL, MySQL, SQLite y otros.</p>\n<p>Query Runner, por otro lado, es una utilidad que permite ejecutar consultas de manera eficiente y controlada en la base de datos. Puedes utilizarlo para realizar migraciones de bases de datos, transacciones y ejecutar consultas personalizadas.</p>\n<h3 id=\"usando-querybuilder\">Usando Query Builder</h3>\n<p>Vamos a ver un ejemplo sencillo de cómo utilizar Query Builder en NestJS para construir una consulta SELECT:</p>\n<p>import { Injectable } from ‘@nestjs/common’;<br>\nimport { InjectRepository } from ‘@nestjs/typeorm’;<br>\nimport { Repository } from ‘typeorm’;<br>\nimport { User } from ’./user.entity’;<br>\n@Injectable()<br>\nexport class UserService {<br>\nconstructor(    @InjectRepository(User)<br>\nprivate readonly userRepository: Repository<user>,  ) {}<br>\nasync getUsersWithAgeGreaterThan(age: number): Promise&#x3C;User[]> {<br>\nreturn this.userRepository<br>\n.createQueryBuilder(‘user’)<br>\n.where(‘user.age > :age’, { age })<br>\n.getMany();<br>\n}<br>\n}</user></p>\n<p>En este ejemplo, estamos utilizando TypeORM como ORM (Object-Relational Mapping) y Query Builder para construir una consulta que selecciona usuarios cuya edad es mayor que un valor dado.</p>\n<h3 id=\"utilizando-queryrunner\">Utilizando Query Runner</h3>\n<p>Query Runner es útil cuando necesitas ejecutar consultas personalizadas o llevar a cabo tareas de administración de bases de datos, como migraciones. Aquí hay un ejemplo de cómo se puede usar Query Runner para ejecutar una consulta SQL simple:</p>\n<p>import { Injectable } from ‘@nestjs/common’;<br>\nimport { Connection } from ‘typeorm’;<br>\n@Injectable()<br>\nexport class DatabaseService {<br>\nconstructor(private readonly connection: Connection) {}<br>\nasync executeCustomQuery(query: string): Promise&#x3C;any> {<br>\nconst queryRunner = this.connection.createQueryRunner();<br>\nawait queryRunner.connect();<br>\nconst result = await queryRunner.query(query);<br>\nawait queryRunner.release();<br>\nreturn result;<br>\n}<br>\n}</p>\n<p>En este ejemplo, estamos utilizando Query Runner para ejecutar una consulta SQL personalizada proporcionada como una cadena.</p>\n<h3 id=\"conclusión\">Conclusión</h3>\n<p>Query Builder y Query Runner son dos herramientas poderosas que NestJS ofrece para facilitar la interacción con bases de datos en tus aplicaciones. Permiten construir consultas de manera programática y ejecutarlas de manera eficiente, lo que mejora la seguridad y la legibilidad del código. Estas herramientas son especialmente útiles cuando trabajas con bases de datos en NestJS y te permiten realizar tareas como consultas personalizadas y migraciones de bases de datos de manera más eficiente.</p>\n<p>Esperamos que este artículo te haya ayudado a comprender mejor cómo utilizar Query Builder y Query Runner en NestJS para interactuar con bases de datos de manera efectiva en tus proyectos. ¡Buena suerte en tu desarrollo con NestJS!</p>\n<p><a href=\"https://orkhan.gitbook.io/typeorm/docs/insert-query-builder\" title=\"https://orkhan.gitbook.io/typeorm/docs/insert-query-builder\"><strong>Insert using Query Builder</strong><br>\n_INSERT queries using QueryBuilder. Examples:_orkhan.gitbook.io</a><a href=\"https://orkhan.gitbook.io/typeorm/docs/insert-query-builder\"></a></p>\n<p><a href=\"https://orkhan.gitbook.io/typeorm/docs/query-runner\" title=\"https://orkhan.gitbook.io/typeorm/docs/query-runner\"><strong>Working with Query Runner</strong><br>\n_Edit description_orkhan.gitbook.io</a><a href=\"https://orkhan.gitbook.io/typeorm/docs/query-runner\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/953fa226955b\">October 7, 2023</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacci%C3%B3n-eficiente-con-bases-de-datos-953fa226955b\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos","description":"","tags":["code","QueryBuilder","Nestjs"],"time":4,"featured":true,"timestamp":"2023-10-07T12:20:32-0300","filename":"2023-10-07_Utilizando-Query-Builder-y-Query-Runner-en-NestJS-para-una-Interacci-n-Eficiente-con-Bases-de-Datos-953fa226955b"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2023-10-07_Utilizando-Query-Builder-y-Query-Runner-en-NestJS-para-una-Interacci-n-Eficiente-con-Bases-de-Datos-953fa226955b.md";
				const url = "/blog/2023-10-07_Utilizando-Query-Builder-y-Query-Runner-en-NestJS-para-una-Interacci-n-Eficiente-con-Bases-de-Datos-953fa226955b";
				function rawContent() {
					return "   \n                                        \n                                                                                                            \n               \n                                        \n       \n              \n                                     \n                                                                                                                                       \n   \n\n\nUtilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos\n===================================================================================================\n\nNestJS es un marco de trabajo de Node.js que se ha convertido en una elección popular para la creación de aplicaciones web y API robustas…\n\n* * *\n\n### Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos\n\n![](https://cdn-images-1.medium.com/max/800/0*_MINrEuWpn1yr0vC)\n\nNestJS es un marco de trabajo de Node.js que se ha convertido en una elección popular para la creación de aplicaciones web y API robustas. Uno de los aspectos cruciales al desarrollar aplicaciones es la interacción con bases de datos, y en este artículo, exploraremos dos conceptos clave en NestJS: Query Builder y Query Runner.\n\n### ¿Qué son Query Builder y Query Runner?\n\nQuery Builder es una herramienta que proporciona NestJS para construir consultas SQL de manera programática en lugar de escribirlas manualmente. Esto no solo hace que el código sea más legible, sino que también previene posibles vulnerabilidades de seguridad, como la inyección de SQL. Query Builder está diseñado para funcionar con una variedad de bases de datos, incluyendo PostgreSQL, MySQL, SQLite y otros.\n\nQuery Runner, por otro lado, es una utilidad que permite ejecutar consultas de manera eficiente y controlada en la base de datos. Puedes utilizarlo para realizar migraciones de bases de datos, transacciones y ejecutar consultas personalizadas.\n\n### Usando Query Builder\n\nVamos a ver un ejemplo sencillo de cómo utilizar Query Builder en NestJS para construir una consulta SELECT:\n\nimport { Injectable } from '@nestjs/common';  \nimport { InjectRepository } from '@nestjs/typeorm';  \nimport { Repository } from 'typeorm';  \nimport { User } from './user.entity';  \n@Injectable()  \nexport class UserService {  \n  constructor(    @InjectRepository(User)  \n    private readonly userRepository: Repository<User>,  ) {}  \n  async getUsersWithAgeGreaterThan(age: number): Promise<User\\[\\]> {  \n    return this.userRepository  \n      .createQueryBuilder('user')  \n      .where('user.age > :age', { age })  \n      .getMany();  \n  }  \n}\n\nEn este ejemplo, estamos utilizando TypeORM como ORM (Object-Relational Mapping) y Query Builder para construir una consulta que selecciona usuarios cuya edad es mayor que un valor dado.\n\n### Utilizando Query Runner\n\nQuery Runner es útil cuando necesitas ejecutar consultas personalizadas o llevar a cabo tareas de administración de bases de datos, como migraciones. Aquí hay un ejemplo de cómo se puede usar Query Runner para ejecutar una consulta SQL simple:\n\nimport { Injectable } from '@nestjs/common';  \nimport { Connection } from 'typeorm';  \n@Injectable()  \nexport class DatabaseService {  \n  constructor(private readonly connection: Connection) {}  \n  async executeCustomQuery(query: string): Promise<any\\> {  \n    const queryRunner = this.connection.createQueryRunner();  \n    await queryRunner.connect();  \n    const result = await queryRunner.query(query);  \n    await queryRunner.release();  \n    return result;  \n  }  \n}\n\nEn este ejemplo, estamos utilizando Query Runner para ejecutar una consulta SQL personalizada proporcionada como una cadena.\n\n### Conclusión\n\nQuery Builder y Query Runner son dos herramientas poderosas que NestJS ofrece para facilitar la interacción con bases de datos en tus aplicaciones. Permiten construir consultas de manera programática y ejecutarlas de manera eficiente, lo que mejora la seguridad y la legibilidad del código. Estas herramientas son especialmente útiles cuando trabajas con bases de datos en NestJS y te permiten realizar tareas como consultas personalizadas y migraciones de bases de datos de manera más eficiente.\n\nEsperamos que este artículo te haya ayudado a comprender mejor cómo utilizar Query Builder y Query Runner en NestJS para interactuar con bases de datos de manera efectiva en tus proyectos. ¡Buena suerte en tu desarrollo con NestJS!\n\n[**Insert using Query Builder**  \n_INSERT queries using QueryBuilder. Examples:_orkhan.gitbook.io](https://orkhan.gitbook.io/typeorm/docs/insert-query-builder \"https://orkhan.gitbook.io/typeorm/docs/insert-query-builder\")[](https://orkhan.gitbook.io/typeorm/docs/insert-query-builder)\n\n[**Working with Query Runner**  \n_Edit description_orkhan.gitbook.io](https://orkhan.gitbook.io/typeorm/docs/query-runner \"https://orkhan.gitbook.io/typeorm/docs/query-runner\")[](https://orkhan.gitbook.io/typeorm/docs/query-runner)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [October 7, 2023](https://medium.com/p/953fa226955b).\n\n[Canonical link](https://medium.com/@devjaime/utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacci%C3%B3n-eficiente-con-bases-de-datos-953fa226955b)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacción-eficiente-con-bases-de-datos","text":"Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos"},{"depth":3,"slug":"utilizando-query-builder-y-query-runner-en-nestjs-para-una-interacción-eficiente-con-bases-dedatos","text":"Utilizando Query Builder y Query Runner en NestJS para una Interacción Eficiente con Bases de Datos"},{"depth":3,"slug":"qué-son-query-builder-y-queryrunner","text":"¿Qué son Query Builder y Query Runner?"},{"depth":3,"slug":"usando-querybuilder","text":"Usando Query Builder"},{"depth":3,"slug":"utilizando-queryrunner","text":"Utilizando Query Runner"},{"depth":3,"slug":"conclusión","text":"Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
