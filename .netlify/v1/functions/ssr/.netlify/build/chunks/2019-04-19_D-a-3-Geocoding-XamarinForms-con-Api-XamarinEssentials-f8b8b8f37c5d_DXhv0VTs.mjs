/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"día-3-geocoding-xamarinforms-con-api-xamarinessentials\">Día 3 Geocoding XamarinForms con Api XamarinEssentials</h1>\n<p>En este tercer día y siguiendo los artículos anteriores, comentare mi experiencia con Geocoding de XamarinEssentials.</p>\n<hr>\n<h3 id=\"día-3-geocoding-xamarinforms-con-api-xamarinessentials-1\">Día 3 Geocoding XamarinForms con Api XamarinEssentials</h3>\n<p>En este tercer día y siguiendo los artículos anteriores, comentare mi experiencia con Geocoding de XamarinEssentials.</p>\n<p>La clase Geocoding proporciona una API para geocodificar una dirección de posición en coordenadas posicionales y revertir las coordenadas de geocodificación en una dirección de posición.</p>\n<p>Tal como en los 2 post anteriores abriremos nuestro Visual Studio y crearemos un nuevo proyecto de tipo XamarinForms llamado “Geocodificacion”</p>\n<p>Seleccionaremos una plantilla en blanco, seleccionaremos nuestras plataformas de destino y presionamos el botón crear.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*5FvGAXXBR5mxgTXXx6m7JA.png\" alt=\"\"></p>\n<p>Luego de lo anterior seleccionaremos Administración de paquetes Nuget y y presionamos en instalar Xamarin.Essentials.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*kMQm00o6XfpRDvdRZr_bng.png\" alt=\"\"></p>\n<p>Luego de lo anterior crearas las siguientes carpetas para conservar nuestro patrón de diseño MVVM, (Si has visto los post anteriores te darás cuenta que es exactamente la misma estructura) por lo cual te dejo un enlace con las carpetas para que puedas copiar este modelo y así no tengas que crear una por una.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7shj5AupIi7S2tAwtn90yw.png\" alt=\"\"></p>\n<p><a href=\"https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8\" title=\"https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8\"><strong>Geocodificacion.rar</strong><br>\n_EMMVM Geocodingn_drive.google.com</a><a href=\"https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8\"></a></p>\n<p>Luego en nuestra carpeta View creamos una nueva Page llamada “GeocodingPage.xaml”</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*7f0FJYnMO8MC53Vnk8k0zA.png\" alt=\"\"></p>\n<p>y en nuestra carpeta ViewModel creamos en el enlace llamado “GeocodingViewModel”</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*9-6FzQGoQqFU7SCXvRu6tA.png\" alt=\"\"></p>\n<p>El código de nuestra View “GeocodingPage.xaml” sera el siguiente.</p>\n<p>En la clase deberás copiar lo siguiente.</p>\n<p>En nuestro ViewModel deberes escribir el siguiente código.</p>\n<p>y por ultimo deberás fijarte que inicializas vista desde el app principal</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*VgZ2LBPRPbgLxavhQkfpWQ.png\" alt=\"\"></p>\n<p>Una cosa importante es siempre fijarte en los permisos dependiendo de nuestro dispositivo, en este caso como estoy probando con un dispositivo Android, deberás realizar lo siguiente.</p>\n<p>En el archivo AndroidManifiest de nuestro proyecto Android agrega lo siguiente</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*zvGiKzCEPPTjApwQ1twMsA.png\" alt=\"\"></p>\n<p>y en el assambly que esta en la misma parte agrega el siguiente código</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*1Y4ttFo4O9J_C7RjrwCs_Q.png\" alt=\"\"></p>\n<p>El diseño final de nuestra aplicación sera el siguiente, si vez coincidí perfectamente con la dirección buscada en google maps</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*J-gVSAEnrTHG6ETmKXchlw.png\" alt=\"\"></p>\n<p>El código de la app lo puedes descargar del siguiente repositorio.</p>\n<p><a href=\"https://github.com/devjaime/Geocodificacion\" title=\"https://github.com/devjaime/Geocodificacion\"><strong>devjaime/Geocodificacion</strong><br>\n_Repositorio XamarinForms donde se explica el sensor geocoding para obtener información de una ubicación en particular …_github.com</a><a href=\"https://github.com/devjaime/Geocodificacion\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/f8b8b8f37c5d\">April 19, 2019</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/d%C3%ADa-3-geocoding-xamarinforms-con-api-xamarinessentials-f8b8b8f37c5d\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Día 3 Geocoding XamarinForms con Api XamarinEssentials","description":"","tags":["code","Xamarin","XamarinForms"],"time":4,"featured":true,"timestamp":"2019-04-19T12:20:31-0300","filename":"2019-04-19_D-a-3-Geocoding-XamarinForms-con-Api-XamarinEssentials-f8b8b8f37c5d"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2019-04-19_D-a-3-Geocoding-XamarinForms-con-Api-XamarinEssentials-f8b8b8f37c5d.md";
				const url = "/blog/2019-04-19_D-a-3-Geocoding-XamarinForms-con-Api-XamarinEssentials-f8b8b8f37c5d";
				function rawContent() {
					return "   \n                                        \n                                                               \n               \n                                         \n       \n              \n                                     \n                                                                                          \n   \n\nDía 3 Geocoding XamarinForms con Api XamarinEssentials\n======================================================\n\nEn este tercer día y siguiendo los artículos anteriores, comentare mi experiencia con Geocoding de XamarinEssentials.\n\n* * *\n\n### Día 3 Geocoding XamarinForms con Api XamarinEssentials\n\nEn este tercer día y siguiendo los artículos anteriores, comentare mi experiencia con Geocoding de XamarinEssentials.\n\nLa clase Geocoding proporciona una API para geocodificar una dirección de posición en coordenadas posicionales y revertir las coordenadas de geocodificación en una dirección de posición.\n\nTal como en los 2 post anteriores abriremos nuestro Visual Studio y crearemos un nuevo proyecto de tipo XamarinForms llamado “Geocodificacion”\n\nSeleccionaremos una plantilla en blanco, seleccionaremos nuestras plataformas de destino y presionamos el botón crear.\n\n![](https://cdn-images-1.medium.com/max/800/1*5FvGAXXBR5mxgTXXx6m7JA.png)\n\nLuego de lo anterior seleccionaremos Administración de paquetes Nuget y y presionamos en instalar Xamarin.Essentials.\n\n![](https://cdn-images-1.medium.com/max/800/1*kMQm00o6XfpRDvdRZr_bng.png)\n\nLuego de lo anterior crearas las siguientes carpetas para conservar nuestro patrón de diseño MVVM, (Si has visto los post anteriores te darás cuenta que es exactamente la misma estructura) por lo cual te dejo un enlace con las carpetas para que puedas copiar este modelo y así no tengas que crear una por una.\n\n![](https://cdn-images-1.medium.com/max/800/1*7shj5AupIi7S2tAwtn90yw.png)\n\n[**Geocodificacion.rar**  \n_EMMVM Geocodingn_drive.google.com](https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8 \"https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8\")[](https://drive.google.com/open?id=1Y5J6wtQoc0PTgtXVMf3fU8ptkuAxXih8)\n\nLuego en nuestra carpeta View creamos una nueva Page llamada “GeocodingPage.xaml”\n\n![](https://cdn-images-1.medium.com/max/800/1*7f0FJYnMO8MC53Vnk8k0zA.png)\n\ny en nuestra carpeta ViewModel creamos en el enlace llamado “GeocodingViewModel”\n\n![](https://cdn-images-1.medium.com/max/800/1*9-6FzQGoQqFU7SCXvRu6tA.png)\n\nEl código de nuestra View “GeocodingPage.xaml” sera el siguiente.\n\nEn la clase deberás copiar lo siguiente.\n\nEn nuestro ViewModel deberes escribir el siguiente código.\n\ny por ultimo deberás fijarte que inicializas vista desde el app principal\n\n![](https://cdn-images-1.medium.com/max/800/1*VgZ2LBPRPbgLxavhQkfpWQ.png)\n\nUna cosa importante es siempre fijarte en los permisos dependiendo de nuestro dispositivo, en este caso como estoy probando con un dispositivo Android, deberás realizar lo siguiente.\n\nEn el archivo AndroidManifiest de nuestro proyecto Android agrega lo siguiente\n\n![](https://cdn-images-1.medium.com/max/800/1*zvGiKzCEPPTjApwQ1twMsA.png)\n\ny en el assambly que esta en la misma parte agrega el siguiente código\n\n![](https://cdn-images-1.medium.com/max/800/1*1Y4ttFo4O9J_C7RjrwCs_Q.png)\n\nEl diseño final de nuestra aplicación sera el siguiente, si vez coincidí perfectamente con la dirección buscada en google maps\n\n![](https://cdn-images-1.medium.com/max/800/1*J-gVSAEnrTHG6ETmKXchlw.png)\n\nEl código de la app lo puedes descargar del siguiente repositorio.\n\n[**devjaime/Geocodificacion**  \n_Repositorio XamarinForms donde se explica el sensor geocoding para obtener información de una ubicación en particular …_github.com](https://github.com/devjaime/Geocodificacion \"https://github.com/devjaime/Geocodificacion\")[](https://github.com/devjaime/Geocodificacion)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [April 19, 2019](https://medium.com/p/f8b8b8f37c5d).\n\n[Canonical link](https://medium.com/@devjaime/d%C3%ADa-3-geocoding-xamarinforms-con-api-xamarinessentials-f8b8b8f37c5d)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"día-3-geocoding-xamarinforms-con-api-xamarinessentials","text":"Día 3 Geocoding XamarinForms con Api XamarinEssentials"},{"depth":3,"slug":"día-3-geocoding-xamarinforms-con-api-xamarinessentials-1","text":"Día 3 Geocoding XamarinForms con Api XamarinEssentials"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
