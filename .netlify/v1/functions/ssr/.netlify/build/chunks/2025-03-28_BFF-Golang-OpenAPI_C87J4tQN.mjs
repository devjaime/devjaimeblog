/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"construyendo-un-bff-en-go-con-openapi-casos-de-uso-y-buenas-prácticas\">Construyendo un BFF en Go con OpenAPI: Casos de Uso y Buenas Prácticas 🚀</h1>\n<p>En sistemas distribuidos modernos, especialmente aquellos con múltiples interfaces frontend (web, mobile, IoT), es común enfrentarse a la necesidad de adaptar los datos y funcionalidades del backend para cada canal. Aquí es donde entra en juego el <strong>Backend For Frontend (BFF)</strong>, un patrón que separa la lógica de presentación y facilita la orquestación entre servicios y clientes.</p>\n<p>En este artículo, te mostraré cómo construir un BFF en <strong>Golang</strong> utilizando <strong>OpenAPI</strong>, compartiendo ejemplos bien estructurados, casos de uso y buenas prácticas para mantener tu proyecto limpio y escalable.</p>\n<hr>\n<h2 id=\"-qué-es-un-bff-y-cuándo-usarlo\">🧠 ¿Qué es un BFF y cuándo usarlo?</h2>\n<p>Un <strong>BFF</strong> actúa como intermediario entre el frontend y los microservicios del backend. Su objetivo es:</p>\n<ul>\n<li>Agregar, adaptar o transformar datos desde distintos servicios.</li>\n<li>Proveer seguridad (autenticación/autorización).</li>\n<li>Exponer una API optimizada para cada tipo de cliente.</li>\n</ul>\n<p><strong>📌 Casos de uso típicos:</strong></p>\n<ul>\n<li>Una app móvil que requiere datos más livianos o en otro formato.</li>\n<li>Evitar que el frontend conozca detalles de múltiples microservicios.</li>\n<li>Centralizar la autenticación o la gestión de sesiones.</li>\n<li>Minimizar llamadas de red agregando o preprocesando datos en el BFF.</li>\n</ul>\n<hr>\n<h2 id=\"-por-qué-usar-go-y-openapi-para-un-bff\">🧰 ¿Por qué usar Go y OpenAPI para un BFF?</h2>\n<p><strong>Go</strong> es eficiente, rápido, con tipado estático y perfecto para construir APIs. Su ecosistema incluye herramientas robustas para definir contratos con OpenAPI, como:</p>\n<ul>\n<li><a href=\"https://github.com/go-swagger/go-swagger\"><code>go-swagger</code></a></li>\n<li><a href=\"https://github.com/deepmap/oapi-codegen\"><code>oapi-codegen</code></a></li>\n<li><a href=\"https://github.com/getkin/kin-openapi\"><code>kin-openapi</code></a></li>\n</ul>\n<p>OpenAPI permite definir tu contrato de API primero (spec-first), o bien generarlo desde tu código (code-first), asegurando documentación clara, validación automática y generación de clientes.</p>\n<hr>\n<h2 id=\"-estructura-del-proyecto\">✨ Estructura del Proyecto</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">bff-service/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> api/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">   ├──</span><span style=\"color:#9ECBFF\"> openapi.yaml</span><span style=\"color:#6A737D\">          # Definición de la API</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">   └──</span><span style=\"color:#9ECBFF\"> api.gen.go</span><span style=\"color:#6A737D\">            # Código generado con oapi-codegen</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> cmd/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">   └──</span><span style=\"color:#9ECBFF\"> main.go</span><span style=\"color:#6A737D\">               # Entrada principal del BFF</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> handlers/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">   └──</span><span style=\"color:#9ECBFF\"> user_handler.go</span><span style=\"color:#6A737D\">       # Handlers HTTP</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">├──</span><span style=\"color:#9ECBFF\"> internal/</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">│</span><span style=\"color:#9ECBFF\">   └──</span><span style=\"color:#9ECBFF\"> services/</span><span style=\"color:#6A737D\">             # Lógica de negocio y conexiones externas</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">└──</span><span style=\"color:#9ECBFF\"> go.mod</span><span style=\"color:#9ECBFF\"> /</span><span style=\"color:#9ECBFF\"> go.sum</span></span></code></pre>\n<h2 id=\"ejemplo-de-openapi-openapiyaml\">Ejemplo de OpenAPI (openapi.yaml)</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\"><code><span class=\"line\"><span style=\"color:#85E89D\">openapi</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">3.0.0</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">info</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  title</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">User BFF API</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  version</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"1.0\"</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">paths</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  /users/{id}</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    get</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      summary</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Obtener usuario por ID</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      parameters</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        - </span><span style=\"color:#85E89D\">name</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">id</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          in</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">path</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          required</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          schema</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">            type</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">string</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      responses</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">        '200'</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          description</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">Usuario encontrado</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          content</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">            application/json</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">              schema</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">                $ref</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">'#/components/schemas/User'</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">components</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">  schemas</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">    User</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      type</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">object</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">      properties</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        id</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          type</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">string</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        name</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          type</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">string</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">        email</span><span style=\"color:#E1E4E8\">:</span></span>\n<span class=\"line\"><span style=\"color:#85E89D\">          type</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">string</span></span></code></pre>\n<h2 id=\"️-generar-código-con-oapi-codegen\">⚙️ Generar Código con oapi-codegen</h2>\n<p>Instalamos la herramienta:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> install</span><span style=\"color:#9ECBFF\"> github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest</span></span></code></pre>\n<p>Creamos el archivo api/api.gen.go:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">oapi-codegen</span><span style=\"color:#79B8FF\"> -generate</span><span style=\"color:#9ECBFF\"> types,chi-server</span><span style=\"color:#79B8FF\"> -package</span><span style=\"color:#9ECBFF\"> api</span><span style=\"color:#9ECBFF\"> api/openapi.yaml</span><span style=\"color:#F97583\"> ></span><span style=\"color:#9ECBFF\"> api/api.gen.go</span></span></code></pre>\n<h2 id=\"-handler-de-ejemplo-handlersuser_handlergo\">🧩 Handler de ejemplo (handlers/user_handler.go)</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">package</span><span style=\"color:#B392F0\"> handlers</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">context</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">net/http</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">github.com/yourname/bff-service/api</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> UserHandler</span><span style=\"color:#F97583\"> struct</span><span style=\"color:#E1E4E8\">{}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#E1E4E8\"> (</span><span style=\"color:#FFAB70\">h </span><span style=\"color:#F97583\">*</span><span style=\"color:#B392F0\">UserHandler</span><span style=\"color:#E1E4E8\">) </span><span style=\"color:#B392F0\">GetUserById</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">ctx</span><span style=\"color:#B392F0\"> context</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Context</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">w</span><span style=\"color:#B392F0\"> http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">ResponseWriter</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">r</span><span style=\"color:#F97583\"> *</span><span style=\"color:#B392F0\">http</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">Request</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#FFAB70\">id</span><span style=\"color:#F97583\"> string</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  user </span><span style=\"color:#F97583\">:=</span><span style=\"color:#B392F0\"> api</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">User</span><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    Id:    id,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    Name:  </span><span style=\"color:#9ECBFF\">\"Jane Doe\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    Email: </span><span style=\"color:#9ECBFF\">\"jane@example.com\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  api.</span><span style=\"color:#B392F0\">JSONResponse</span><span style=\"color:#E1E4E8\">(w, http.StatusOK, user)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"-maingo-registro-del-router\">🚀 main.go (Registro del router)</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"go\"><code><span class=\"line\"><span style=\"color:#F97583\">package</span><span style=\"color:#B392F0\"> main</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">import</span><span style=\"color:#E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">log</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">net/http</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">github.com/go-chi/chi/v5</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">github.com/yourname/bff-service/api</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#9ECBFF\">  \"</span><span style=\"color:#B392F0\">github.com/yourname/bff-service/handlers</span><span style=\"color:#9ECBFF\">\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">func</span><span style=\"color:#B392F0\"> main</span><span style=\"color:#E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  r </span><span style=\"color:#F97583\">:=</span><span style=\"color:#E1E4E8\"> chi.</span><span style=\"color:#B392F0\">NewRouter</span><span style=\"color:#E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  handler </span><span style=\"color:#F97583\">:=</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#B392F0\">handlers</span><span style=\"color:#E1E4E8\">.</span><span style=\"color:#B392F0\">UserHandler</span><span style=\"color:#E1E4E8\">{}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  api.</span><span style=\"color:#B392F0\">RegisterHandlers</span><span style=\"color:#E1E4E8\">(r, handler)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  log.</span><span style=\"color:#B392F0\">Println</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\"🚀 BFF corriendo en http://localhost:8080\"</span><span style=\"color:#E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  log.</span><span style=\"color:#B392F0\">Fatal</span><span style=\"color:#E1E4E8\">(http.</span><span style=\"color:#B392F0\">ListenAndServe</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">\":8080\"</span><span style=\"color:#E1E4E8\">, r))</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"-buenas-prácticas\">✅ Buenas prácticas</h2>\n<p>Valida contratos OpenAPI al inicio del servidor.</p>\n<p>Versiona tu API: usa rutas como /v1/users.</p>\n<p>Testea con mocks generados desde OpenAPI.</p>\n<p>Documenta tus endpoints y errores esperados.</p>\n<p>No mezcles lógica de negocio con handlers.</p>\n<h2 id=\"-prueba-con-swagger-ui\">🧪 Prueba con Swagger UI</h2>\n<p>Puedes usar herramientas como Swagger UI o integrarlo en tu servidor para testear los endpoints directamente desde la documentación.</p>\n<h2 id=\"-conclusión\">💬 Conclusión</h2>\n<p>Construir un BFF en Go con OpenAPI es una excelente manera de garantizar escalabilidad, claridad en los contratos de servicio y eficiencia para los equipos frontend. Este enfoque mejora la mantenibilidad, facilita la colaboración entre equipos y reduce la complejidad del cliente.</p>\n<p>Si te interesa llevar esta implementación a producción o automatizar su despliegue en la nube con CI/CD, ¡déjamelo saber! 👨‍💻</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Construyendo un BFF en Go con OpenAPI: Casos de Uso y Buenas Prácticas","description":"Aprende a crear un Backend For Frontend (BFF) con Go y OpenAPI, abordando su arquitectura, ventajas, y ejemplos prácticos de implementación.","tags":["golang","openapi","BFF","microservicios","arquitectura"],"time":8,"featured":true,"timestamp":"2025-03-28T09:00:00-0300","filename":"2025-03-28_BFF-Golang-OpenAPI"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2025-03-28_BFF-Golang-OpenAPI.md";
				const url = "/blog/2025-03-28_BFF-Golang-OpenAPI";
				function rawContent() {
					return "   \n                                        \n                                                                               \n                                                                                                                                                           \n                                                                    \n       \n              \n                                     \n                                         \n   \n\n# Construyendo un BFF en Go con OpenAPI: Casos de Uso y Buenas Prácticas 🚀\n\nEn sistemas distribuidos modernos, especialmente aquellos con múltiples interfaces frontend (web, mobile, IoT), es común enfrentarse a la necesidad de adaptar los datos y funcionalidades del backend para cada canal. Aquí es donde entra en juego el **Backend For Frontend (BFF)**, un patrón que separa la lógica de presentación y facilita la orquestación entre servicios y clientes.\n\nEn este artículo, te mostraré cómo construir un BFF en **Golang** utilizando **OpenAPI**, compartiendo ejemplos bien estructurados, casos de uso y buenas prácticas para mantener tu proyecto limpio y escalable.\n\n---\n\n## 🧠 ¿Qué es un BFF y cuándo usarlo?\n\nUn **BFF** actúa como intermediario entre el frontend y los microservicios del backend. Su objetivo es:\n\n- Agregar, adaptar o transformar datos desde distintos servicios.\n- Proveer seguridad (autenticación/autorización).\n- Exponer una API optimizada para cada tipo de cliente.\n\n**📌 Casos de uso típicos:**\n\n- Una app móvil que requiere datos más livianos o en otro formato.\n- Evitar que el frontend conozca detalles de múltiples microservicios.\n- Centralizar la autenticación o la gestión de sesiones.\n- Minimizar llamadas de red agregando o preprocesando datos en el BFF.\n\n---\n\n## 🧰 ¿Por qué usar Go y OpenAPI para un BFF?\n\n**Go** es eficiente, rápido, con tipado estático y perfecto para construir APIs. Su ecosistema incluye herramientas robustas para definir contratos con OpenAPI, como:\n\n- [`go-swagger`](https://github.com/go-swagger/go-swagger)\n- [`oapi-codegen`](https://github.com/deepmap/oapi-codegen)\n- [`kin-openapi`](https://github.com/getkin/kin-openapi)\n\nOpenAPI permite definir tu contrato de API primero (spec-first), o bien generarlo desde tu código (code-first), asegurando documentación clara, validación automática y generación de clientes.\n\n---\n\n## ✨ Estructura del Proyecto\n\n```bash\nbff-service/\n├── api/\n│   ├── openapi.yaml          # Definición de la API\n│   └── api.gen.go            # Código generado con oapi-codegen\n├── cmd/\n│   └── main.go               # Entrada principal del BFF\n├── handlers/\n│   └── user_handler.go       # Handlers HTTP\n├── internal/\n│   └── services/             # Lógica de negocio y conexiones externas\n└── go.mod / go.sum\n```\n\n## Ejemplo de OpenAPI (openapi.yaml)\n```yaml\nopenapi: 3.0.0\ninfo:\n  title: User BFF API\n  version: \"1.0\"\npaths:\n  /users/{id}:\n    get:\n      summary: Obtener usuario por ID\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Usuario encontrado\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n```\n\n## ⚙️ Generar Código con oapi-codegen\n\nInstalamos la herramienta:\n\n```bash\ngo install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest\n```\n\nCreamos el archivo api/api.gen.go:\n\n```bash\noapi-codegen -generate types,chi-server -package api api/openapi.yaml > api/api.gen.go\n```\n\n## 🧩 Handler de ejemplo (handlers/user_handler.go)\n\n```go\npackage handlers\n\nimport (\n  \"context\"\n  \"net/http\"\n  \"github.com/yourname/bff-service/api\"\n)\n\ntype UserHandler struct{}\n\nfunc (h *UserHandler) GetUserById(ctx context.Context, w http.ResponseWriter, r *http.Request, id string) {\n  user := api.User{\n    Id:    id,\n    Name:  \"Jane Doe\",\n    Email: \"jane@example.com\",\n  }\n  api.JSONResponse(w, http.StatusOK, user)\n}\n```\n\n## 🚀 main.go (Registro del router)\n```go\npackage main\n\nimport (\n  \"log\"\n  \"net/http\"\n\n  \"github.com/go-chi/chi/v5\"\n  \"github.com/yourname/bff-service/api\"\n  \"github.com/yourname/bff-service/handlers\"\n)\n\nfunc main() {\n  r := chi.NewRouter()\n  handler := &handlers.UserHandler{}\n\n  api.RegisterHandlers(r, handler)\n\n  log.Println(\"🚀 BFF corriendo en http://localhost:8080\")\n  log.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```\n\n\n## ✅ Buenas prácticas\nValida contratos OpenAPI al inicio del servidor.\n\nVersiona tu API: usa rutas como /v1/users.\n\nTestea con mocks generados desde OpenAPI.\n\nDocumenta tus endpoints y errores esperados.\n\nNo mezcles lógica de negocio con handlers.\n\n\n## 🧪 Prueba con Swagger UI\nPuedes usar herramientas como Swagger UI o integrarlo en tu servidor para testear los endpoints directamente desde la documentación.\n\n\n## 💬 Conclusión\nConstruir un BFF en Go con OpenAPI es una excelente manera de garantizar escalabilidad, claridad en los contratos de servicio y eficiencia para los equipos frontend. Este enfoque mejora la mantenibilidad, facilita la colaboración entre equipos y reduce la complejidad del cliente.\n\nSi te interesa llevar esta implementación a producción o automatizar su despliegue en la nube con CI/CD, ¡déjamelo saber! 👨‍💻";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"construyendo-un-bff-en-go-con-openapi-casos-de-uso-y-buenas-prácticas","text":"Construyendo un BFF en Go con OpenAPI: Casos de Uso y Buenas Prácticas 🚀"},{"depth":2,"slug":"-qué-es-un-bff-y-cuándo-usarlo","text":"🧠 ¿Qué es un BFF y cuándo usarlo?"},{"depth":2,"slug":"-por-qué-usar-go-y-openapi-para-un-bff","text":"🧰 ¿Por qué usar Go y OpenAPI para un BFF?"},{"depth":2,"slug":"-estructura-del-proyecto","text":"✨ Estructura del Proyecto"},{"depth":2,"slug":"ejemplo-de-openapi-openapiyaml","text":"Ejemplo de OpenAPI (openapi.yaml)"},{"depth":2,"slug":"️-generar-código-con-oapi-codegen","text":"⚙️ Generar Código con oapi-codegen"},{"depth":2,"slug":"-handler-de-ejemplo-handlersuser_handlergo","text":"🧩 Handler de ejemplo (handlers/user_handler.go)"},{"depth":2,"slug":"-maingo-registro-del-router","text":"🚀 main.go (Registro del router)"},{"depth":2,"slug":"-buenas-prácticas","text":"✅ Buenas prácticas"},{"depth":2,"slug":"-prueba-con-swagger-ui","text":"🧪 Prueba con Swagger UI"},{"depth":2,"slug":"-conclusión","text":"💬 Conclusión"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
