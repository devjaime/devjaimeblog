/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"my-first-api-in-golang\">My first API in Golang</h1>\n<p>I made a very simple first “API” in golang which I would like to share (most likely it does not have the best practices but at least it…</p>\n<hr>\n<h3 id=\"my-first-api-ingolang\">My first API in Golang</h3>\n<p>I made a very simple first “API” in golang which I would like to share (most likely it does not have the best practices but at least it has the minimum requirements to scale into something more evolved).</p>\n<p>Source Code</p>\n<p><a href=\"https://github.com/devjaime/golangrest\" title=\"https://github.com/devjaime/golangrest\"><strong>devjaime/golangrest</strong><br>\n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com</a><a href=\"https://github.com/devjaime/golangrest\"></a></p>\n<p>The first thing I wanted was to list the requirements of my API so that it is fully functional for what I needed.<br>\n- It should be able to connect through an ORM to the database since it will most likely change in the future (reference is azure sql at this time).<br>\n- Must be able to lift into a container and go through a continuous integration process to be like a public api<br>\n.- It must be scalable in time in terms of number of users and concurrent requests.<br>\nAPI design diagram</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*Zs_G00mmVB59U2JCzV7p-w.png\" alt=\"\"></p>\n<p>Diagram</p>\n<p>The first thing I investigated was the Golang documentation <a href=\"https://golang.org/\">https://golang.org/</a> where the first thing is to follow the golang installation instructions very well on your machine either windows or mac <a href=\"https://golang.org/dl/\">https://golang.org/dl/</a></p>\n<p>In my case I have a mac and what I did was to see if there was an installation through homebrew and I did it by following some very simple steps, taken from the following tutorial.</p>\n<p><a href=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\" title=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\"><strong>Install Go on Mac (with homebrew)</strong><br>\n_Install Brew (skip if you already did)_medium.com</a><a href=\"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\"></a></p>\n<p>With “go version” you can see if the installation really works and what version of go you have</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*h84GdWMh0SUjwzV9.png\" alt=\"\"></p>\n<p>Another practical resource that helped me to build my first API was this:</p>\n<p>However, concepts such as occupying an ORM and what ORM handles Golang are missing. From these “googling” I got to <a href=\"https://gorm.io/index.html\">https://gorm.io/index.html</a> which seemed like a very good option. Installation in your project</p>\n<p>go get -u gorm.io/gorm</p>\n<p>Now depending on the database to occupy, you should look for a dialect</p>\n<p>You can see the different connections in</p>\n<p><a href=\"https://gorm.io/docs/connecting_to_the_database.html\" title=\"https://gorm.io/docs/connecting_to_the_database.html\"><strong>Connecting to a Database</strong><br>\n_GORM officially supports databases MySQL, PostgreSQL, SQLite, SQL Server NOTE: To handle time.Time correctly, you need…_gorm.io</a><a href=\"https://gorm.io/docs/connecting_to_the_database.html\"></a></p>\n<p>Another important dependency to install is Fiber<br>\nFiber is an Express-inspired web framework built on top of Fasthttp, the fastest HTTP engine for Go. Designed to make things easy for rapid development with zero memory allocation and performance in mind.</p>\n<p>installation</p>\n<p>go get github.com/gofiber/fiber/v2</p>\n<p>After that I will explain my simple API structure</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*MF5-21RMvEFqRRr4.png\" alt=\"\"></p>\n<p>Where the folder circleci, is the continuous integration and the steps to upload my api to a server.<br>\nYou can watch this video to get an idea of what I do in that file</p>\n<p>The result is something like this:</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*L1_Tlc-6ybdgnMWv.png\" alt=\"\"></p>\n<p>In .ssh are the private and public keys to upload the project, which is something like this.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Dg74ucmro77pgk-p.png\" alt=\"\"></p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*9FzSlr91-l4dkBBH.png\" alt=\"\"></p>\n<p>Of course you must create your own<br>\nTerminal (also in the reference video it appears very well explained)<br>\nssh-keygen -t rsa<br>\nIn database the file database.go contains the connection package</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*QkFcmZT70ELrEk1T.png\" alt=\"\"></p>\n<p>and product is the model that will query the database with its respective verbs.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*RLHca-V__KMa8ahl.png\" alt=\"\"></p>\n<p>dependencies</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*CTscLEU-osCaStMS.png\" alt=\"\"></p>\n<p>Models</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*J8Tk1UrTxkDN5LhL.png\" alt=\"\"></p>\n<p>Verbs</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*szWyQmccUrvL2v6J.png\" alt=\"\"></p>\n<p>the file .env example you must replace it with .env where the environment variables are with yours.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*pSx0mQ7FGW8j3RjM.png\" alt=\"\"></p>\n<p>The docker-compose.yml file can be replaced so that the orchestrator is kubernetes (locally it is more practical to orchestrate the API this way)</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*zTqX6A_AoEspRzxp.png\" alt=\"\"></p>\n<p>The dockerfile file is the minimum that the api requires to work and as you can see, they are very simple steps easy to replicate.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*_YbrjslYvct8HrfA.png\" alt=\"\"></p>\n<p>The main.go file contains the largest amount of application logic<br>\nDependencies</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*nJ7iVZhWY4JXjdp_.png\" alt=\"\"></p>\n<p>Check for an .env file for environment variables.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*AjpRGd71TeMeox6c.png\" alt=\"\"></p>\n<p>Setting the environment variables</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*HESc-DVtTGtA4FoH.png\" alt=\"\"></p>\n<p>api routes</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*tDjSbEcgxcV4uuPy.png\" alt=\"\"></p>\n<p>database initialization</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*IqmAHZJreiAeIOn2.png\" alt=\"\"></p>\n<p>principal function</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*zgz8Uvjgp7s-pEiz.png\" alt=\"\"></p>\n<p>Source Code</p>\n<p><a href=\"https://github.com/devjaime/golangrest\" title=\"https://github.com/devjaime/golangrest\"><strong>devjaime/golangrest</strong><br>\n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com</a><a href=\"https://github.com/devjaime/golangrest\"></a></p>\n<p>I hope this first approach helps you in your projects. (and in the future I will try to make a more detailed video). Any questions I will try to answer more often I even know that in old posts there are questions that I have not answered so I will try to update myself.</p>\n<p><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\" title=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"><strong>Donate to devjaime</strong><br>\n_Help support devjaime by donating or sharing with your friends._www.paypal.com</a><a href=\"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\"></a></p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime Hernández</a> on <a href=\"https://medium.com/p/ea9c3e707e13\">December 6, 2020</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/my-first-api-in-golang-ea9c3e707e13\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"My first API in Golang","description":"","tags":["code","API","Golang"],"time":4,"featured":true,"timestamp":"2020-12-06T12:20:31-0300","filename":"2020-12-06_My-first-API-in-Golang-ea9c3e707e13"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2020-12-06_My-first-API-in-Golang-ea9c3e707e13.md";
				const url = "/blog/2020-12-06_My-first-API-in-Golang-ea9c3e707e13";
				function rawContent() {
					return "   \n                                        \n                               \n               \n                               \n       \n              \n                                     \n                                                          \n   \n\nMy first API in Golang\n======================\n\nI made a very simple first “API” in golang which I would like to share (most likely it does not have the best practices but at least it…\n\n* * *\n\n### My first API in Golang\n\nI made a very simple first “API” in golang which I would like to share (most likely it does not have the best practices but at least it has the minimum requirements to scale into something more evolved).\n\nSource Code\n\n[**devjaime/golangrest**  \n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com](https://github.com/devjaime/golangrest \"https://github.com/devjaime/golangrest\")[](https://github.com/devjaime/golangrest)\n\nThe first thing I wanted was to list the requirements of my API so that it is fully functional for what I needed.  \n\\- It should be able to connect through an ORM to the database since it will most likely change in the future (reference is azure sql at this time).  \n\\- Must be able to lift into a container and go through a continuous integration process to be like a public api  \n.- It must be scalable in time in terms of number of users and concurrent requests.  \nAPI design diagram\n\n![](https://cdn-images-1.medium.com/max/800/1*Zs_G00mmVB59U2JCzV7p-w.png)\n\nDiagram\n\nThe first thing I investigated was the Golang documentation [https://golang.org/](https://golang.org/) where the first thing is to follow the golang installation instructions very well on your machine either windows or mac [https://golang.org/dl/](https://golang.org/dl/)\n\nIn my case I have a mac and what I did was to see if there was an installation through homebrew and I did it by following some very simple steps, taken from the following tutorial.\n\n[**Install Go on Mac (with homebrew)**  \n_Install Brew (skip if you already did)_medium.com](https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5 \"https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5\")[](https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5)\n\nWith “go version” you can see if the installation really works and what version of go you have\n\n![](https://cdn-images-1.medium.com/max/800/0*h84GdWMh0SUjwzV9.png)\n\nAnother practical resource that helped me to build my first API was this:\n\nHowever, concepts such as occupying an ORM and what ORM handles Golang are missing. From these “googling” I got to [https://gorm.io/index.html](https://gorm.io/index.html) which seemed like a very good option. Installation in your project\n\ngo get -u gorm.io/gorm\n\nNow depending on the database to occupy, you should look for a dialect\n\nYou can see the different connections in\n\n[**Connecting to a Database**  \n_GORM officially supports databases MySQL, PostgreSQL, SQLite, SQL Server NOTE: To handle time.Time correctly, you need…_gorm.io](https://gorm.io/docs/connecting_to_the_database.html \"https://gorm.io/docs/connecting_to_the_database.html\")[](https://gorm.io/docs/connecting_to_the_database.html)\n\nAnother important dependency to install is Fiber  \nFiber is an Express-inspired web framework built on top of Fasthttp, the fastest HTTP engine for Go. Designed to make things easy for rapid development with zero memory allocation and performance in mind.\n\ninstallation\n\ngo get github.com/gofiber/fiber/v2\n\nAfter that I will explain my simple API structure\n\n![](https://cdn-images-1.medium.com/max/800/0*MF5-21RMvEFqRRr4.png)\n\nWhere the folder circleci, is the continuous integration and the steps to upload my api to a server.  \nYou can watch this video to get an idea of what I do in that file\n\nThe result is something like this:\n\n![](https://cdn-images-1.medium.com/max/800/0*L1_Tlc-6ybdgnMWv.png)\n\nIn .ssh are the private and public keys to upload the project, which is something like this.\n\n![](https://cdn-images-1.medium.com/max/800/0*Dg74ucmro77pgk-p.png)\n\n![](https://cdn-images-1.medium.com/max/800/0*9FzSlr91-l4dkBBH.png)\n\nOf course you must create your own  \nTerminal (also in the reference video it appears very well explained)  \nssh-keygen -t rsa  \nIn database the file database.go contains the connection package\n\n![](https://cdn-images-1.medium.com/max/800/0*QkFcmZT70ELrEk1T.png)\n\nand product is the model that will query the database with its respective verbs.\n\n![](https://cdn-images-1.medium.com/max/800/0*RLHca-V__KMa8ahl.png)\n\ndependencies\n\n![](https://cdn-images-1.medium.com/max/800/0*CTscLEU-osCaStMS.png)\n\nModels\n\n![](https://cdn-images-1.medium.com/max/800/0*J8Tk1UrTxkDN5LhL.png)\n\nVerbs\n\n![](https://cdn-images-1.medium.com/max/800/0*szWyQmccUrvL2v6J.png)\n\nthe file .env example you must replace it with .env where the environment variables are with yours.\n\n![](https://cdn-images-1.medium.com/max/800/0*pSx0mQ7FGW8j3RjM.png)\n\nThe docker-compose.yml file can be replaced so that the orchestrator is kubernetes (locally it is more practical to orchestrate the API this way)\n\n![](https://cdn-images-1.medium.com/max/800/0*zTqX6A_AoEspRzxp.png)\n\nThe dockerfile file is the minimum that the api requires to work and as you can see, they are very simple steps easy to replicate.\n\n![](https://cdn-images-1.medium.com/max/800/0*_YbrjslYvct8HrfA.png)\n\nThe main.go file contains the largest amount of application logic  \nDependencies\n\n![](https://cdn-images-1.medium.com/max/800/0*nJ7iVZhWY4JXjdp_.png)\n\nCheck for an .env file for environment variables.\n\n![](https://cdn-images-1.medium.com/max/800/0*AjpRGd71TeMeox6c.png)\n\nSetting the environment variables\n\n![](https://cdn-images-1.medium.com/max/800/0*HESc-DVtTGtA4FoH.png)\n\napi routes\n\n![](https://cdn-images-1.medium.com/max/800/0*tDjSbEcgxcV4uuPy.png)\n\ndatabase initialization\n\n![](https://cdn-images-1.medium.com/max/800/0*IqmAHZJreiAeIOn2.png)\n\nprincipal function\n\n![](https://cdn-images-1.medium.com/max/800/0*zgz8Uvjgp7s-pEiz.png)\n\nSource Code\n\n[**devjaime/golangrest**  \n_GitHub is home to over 50 million developers working together to host and review code, manage projects, and build…_github.com](https://github.com/devjaime/golangrest \"https://github.com/devjaime/golangrest\")[](https://github.com/devjaime/golangrest)\n\nI hope this first approach helps you in your projects. (and in the future I will try to make a more detailed video). Any questions I will try to answer more often I even know that in old posts there are questions that I have not answered so I will try to update myself.\n\n[**Donate to devjaime**  \n_Help support devjaime by donating or sharing with your friends._www.paypal.com](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S \"https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S\")[](https://www.paypal.com/donate/?hosted_button_id=AHPZLS6ZR2A7S)\n\nBy [Jaime Hernández](https://medium.com/@devjaime) on [December 6, 2020](https://medium.com/p/ea9c3e707e13).\n\n[Canonical link](https://medium.com/@devjaime/my-first-api-in-golang-ea9c3e707e13)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"my-first-api-in-golang","text":"My first API in Golang"},{"depth":3,"slug":"my-first-api-ingolang","text":"My first API in Golang"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
