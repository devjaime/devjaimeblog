/* empty css                                                                    */
import { d as createComponent, i as renderComponent, r as renderTemplate, u as unescapeHTML } from './astro/server_C7nAViGe.mjs';
import 'kleur/colors';
import { $ as $$BlogLayout } from './BlogLayout_COI89YL8.mjs';

const html = () => "<h1 id=\"continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuciÃ³n-planificada\">Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada</h1>\n<p>En el blog anterior exploramos los fundamentos y principios del modelo O1. Ahora profundizaremos en sus capacidades para planificar tareasâ€¦</p>\n<hr>\n<h3 id=\"continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuciÃ³n-planificada-1\">Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada</h3>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*xzLfdFiGy4qxuZKN6G7IWQ.png\" alt=\"\"></p>\n<p><a href=\"https://planetachatbot.com/marco-o1-un-nuevo-gran-modelo-de-razonamiento-lrm/\">https://planetachatbot.com/marco-o1-un-nuevo-gran-modelo-de-razonamiento-lrm/</a></p>\n<p>En el blog anterior exploramos los fundamentos y principios del modelo <strong>O1</strong>. Ahora profundizaremos en sus capacidades para <strong>planificar tareas complejas</strong> y ejecutar cada paso con herramientas adicionales como <strong>GPT-4o-mini</strong>. Este enfoque se aplica a escenarios como la gestiÃ³n de cadenas de suministro, donde se requiere tomar decisiones escalonadas con datos dinÃ¡micos.</p>\n<hr>\n<h3 id=\"planificaciÃ³n-y-ejecuciÃ³n-con-o1-y-gpt-4o-mini\">PlanificaciÃ³n y EjecuciÃ³n con O1 y GPT-4o-mini</h3>\n<p>El modelo O1 puede generar planes detallados para resolver tareas utilizando herramientas predefinidas. Una vez generado el plan, cada paso se ejecuta mediante GPT-4o-mini, que llama a funciones especÃ­ficas para cumplir las instrucciones.</p>\n<h3 id=\"ejemplo-real-gestiÃ³n-de-un-pedido-en-la-cadena-de-suministro\">Ejemplo Real: GestiÃ³n de un Pedido en la Cadena de Suministro</h3>\n<h4 id=\"escenario\">Escenario</h4>\n<p>Un pedido requiere 200 unidades del producto <strong>Smart Home Hub X200</strong>, pero solo hay 50 unidades disponibles en el inventario actual. El plan debe considerar:</p>\n<ol>\n<li>Revisar el inventario disponible.</li>\n<li>Identificar proveedores para obtener componentes adicionales.</li>\n<li>Programar producciÃ³n para satisfacer la demanda.</li>\n<li>Organizar el envÃ­o al cliente.</li>\n<li>Notificar al cliente sobre el progreso.</li>\n</ol>\n<h4 id=\"contexto-inicial-enpython\">Contexto Inicial (EnÂ Python)</h4>\n<p>context = {<br>\nâ€˜inventoryâ€™: {<br>\nâ€˜X200â€™: 50  # Cantidad disponible en inventario<br>\n},<br>\nâ€˜ordersâ€™: [<br>\n{<br>\nâ€˜order_idâ€™: â€˜ORD3001â€™,<br>\nâ€˜product_idâ€™: â€˜X200â€™,<br>\nâ€˜quantityâ€™: 200,<br>\nâ€˜customer_idâ€™: â€˜CUST9001â€™,<br>\nâ€˜destinationâ€™: â€˜Los Angelesâ€™,<br>\n}<br>\n],<br>\nâ€˜available_suppliersâ€™: [â€˜SUPP1001â€™, â€˜SUPP1002â€™],<br>\nâ€˜production_capacityâ€™: {<br>\nâ€˜immediateâ€™: 100,<br>\nâ€˜next_weekâ€™: 150<br>\n},<br>\nâ€˜shipping_optionsâ€™: {<br>\nâ€˜Los Angelesâ€™: [<br>\n{â€˜carrier_idâ€™: â€˜CARRIER1â€™, â€˜service_levelâ€™: â€˜Standardâ€™, â€˜costâ€™: 1000},<br>\n{â€˜carrier_idâ€™: â€˜CARRIER2â€™, â€˜service_levelâ€™: â€˜Expressâ€™, â€˜costâ€™: 1500}<br>\n]<br>\n},<br>\nâ€˜customersâ€™: {<br>\nâ€˜CUST9001â€™: {<br>\nâ€˜nameâ€™: â€˜ElectroWorldâ€™,<br>\nâ€˜addressâ€™: â€˜123 Market Street, Los Angeles, CAâ€™<br>\n}<br>\n},<br>\nâ€˜productsâ€™: {<br>\nâ€˜X200â€™: {<br>\nâ€˜nameâ€™: â€˜Smart Home Hub X200â€™,<br>\nâ€˜components_neededâ€™: {<br>\nâ€˜COMP_X200â€™: 1  # Cada unidad requiere 1 componente COMP_X200<br>\n}<br>\n}<br>\n}<br>\n}</p>\n<hr>\n<h3 id=\"generaciÃ³n-del-plan-cono1\">GeneraciÃ³n del Plan conÂ O1</h3>\n<h4 id=\"prompt\">Prompt</h4>\n<p>Eres un asistente de gestiÃ³n de cadenas de suministro. Revisa el siguiente escenario y genera un plan detallado para procesar el pedido.</p>\n<p>Funciones disponibles:<br>\n- get_inventory_status(product_id)<br>\n- get_product_details(product_id)<br>\n- update_inventory(product_id, quantity_change)<br>\n- fetch_new_orders()<br>\n- allocate_stock(order_id, product_id, quantity)<br>\n- check_available_suppliers()<br>\n- get_supplier_info(supplier_id)<br>\n- place_purchase_order(supplier_id, component_id, quantity)<br>\n- check_production_capacity(time_frame)<br>\n- schedule_production_run(product_id, quantity, time_frame)<br>\n- calculate_shipping_options(destination, weight, dimensions)<br>\n- book_shipment(order_id, carrier_id, service_level)<br>\n- send_order_update(customer_id, order_id, message)</p>\n<p>Genera un plan estructurado paso a paso.</p>\n<h4 id=\"plan-generado\">Plan Generado</h4>\n<ol>\n<li>**Revisar el inventario:**\n<ul>\n<li>Llamar a `get_inventory_status` para verificar la disponibilidad del producto X200.</li>\n</ul>\n</li>\n</ol>\n<p>2. **Evaluar producciÃ³n:**</p>\n<ul>\n<li>Si el inventario es insuficiente, llamar a `check_production_capacity` para programar la producciÃ³n de las unidades faltantes.</li>\n</ul>\n<p>3. **Ordenar componentes adicionales:**</p>\n<ul>\n<li>Identificar proveedores disponibles con `check_available_suppliers`.</li>\n<li>Obtener detalles del proveedor con `get_supplier_info`.</li>\n<li>Colocar Ã³rdenes de compra con `place_purchase_order`.</li>\n</ul>\n<p>4. **Organizar envÃ­o:**</p>\n<ul>\n<li>Calcular opciones de envÃ­o con `calculate_shipping_options`.</li>\n<li>Reservar envÃ­o con `book_shipment`.</li>\n</ul>\n<p>5. **Notificar al cliente:**</p>\n<ul>\n<li>Actualizar al cliente con `send_order_update`.</li>\n</ul>\n<hr>\n<h3 id=\"ejecuciÃ³n-del-plan-con-gpt-4o-mini\">EjecuciÃ³n del Plan con GPT-4o-mini</h3>\n<p>Cada paso del plan se ejecuta llamando funciones especÃ­ficas. Por ejemplo:</p>\n<h4 id=\"verificar-inventario\">Verificar Inventario</h4>\n<p>def get_inventory_status(product_id):<br>\nquantity = context[â€˜inventoryâ€™].get(product_id, 0)<br>\nreturn {â€˜product_idâ€™: product_id, â€˜quantityâ€™: quantity}<br>\n# EjecuciÃ³n<br>\ninventory_status = get_inventory_status(â€˜X200â€™)<br>\nprint(inventory_status)  # {â€˜product_idâ€™: â€˜X200â€™, â€˜quantityâ€™: 50}</p>\n<h4 id=\"programar-producciÃ³n\">Programar ProducciÃ³n</h4>\n<p>def schedule_production_run(product_id, quantity, time_frame):<br>\ncapacity = context[â€˜production_capacityâ€™].get(time_frame, 0)<br>\nif capacity >= quantity:<br>\ncontext[â€˜production_capacityâ€™][time_frame] -= quantity<br>\ncontext[â€˜inventoryâ€™][product_id] += quantity<br>\nreturn {â€˜statusâ€™: â€˜Scheduledâ€™, â€˜quantityâ€™: quantity, â€˜time_frameâ€™: time_frame}<br>\nreturn {â€˜errorâ€™: â€˜Capacidad insuficienteâ€™}<br>\n# EjecuciÃ³n<br>\nproduction_result = schedule_production_run(â€˜X200â€™, 100, â€˜immediateâ€™)<br>\nprint(production_result)  # {â€˜statusâ€™: â€˜Scheduledâ€™, â€˜quantityâ€™: 100, â€˜time_frameâ€™: â€˜immediateâ€™}</p>\n<hr>\n<h3 id=\"aplicaciones-reales\">Aplicaciones Reales</h3>\n<ol>\n<li><strong>E-commerce:</strong> Gestionar pedidos complejos con inventarios limitados y proveedores dispersos.</li>\n<li><strong>Manufactura:</strong> Optimizar la producciÃ³n basada en la demanda y capacidad.</li>\n<li><strong>LogÃ­stica:</strong> Coordinar opciones de envÃ­o para cumplir plazos ajustados.</li>\n</ol>\n<hr>\n<h3 id=\"enlaces-Ãºtiles\">Enlaces Ãºtiles</h3>\n<ul>\n<li><strong>DocumentaciÃ³n de OpenAI Python SDK:</strong> <a href=\"https://platform.openai.com/docs/\">Enlace oficial</a></li>\n<li><strong>GuÃ­a de Prompting:</strong> <a href=\"https://platform.openai.com/docs/guides/chat\">Mejores prÃ¡cticas</a></li>\n</ul>\n<hr>\n<p>Este enfoque combinado de O1 y GPT-4o-mini permite resolver tareas complejas de forma eficiente y detallada. Â¡Experimenta con estos ejemplos y lleva tus proyectos al siguiente nivel! ðŸŒŸ</p>\n<p>By <a href=\"https://medium.com/@devjaime\">Jaime HernÃ¡ndez</a> on <a href=\"https://medium.com/p/1930ca9b641e\">December 21, 2024</a>.</p>\n<p><a href=\"https://medium.com/@devjaime/continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuci%C3%B3n-planificada-1930ca9b641e\">Canonical link</a></p>\n<p>Exported from <a href=\"https://medium.com\">Medium</a> on March 15, 2025.</p>";

				const frontmatter = {"layout":"../../layouts/BlogLayout.astro","title":"Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada","description":"","tags":["code","OpenAI","01"],"time":4,"featured":true,"timestamp":"2024-12-21T12:20:33-0300","filename":"2024-12-21_Continuando-con-el-Modelo-O1--Casos-de-Uso-Avanzados-y-Ejecuci-n-Planificada-1930ca9b641e"};
				const file = "/Users/devjaime/Documents/devjaimeblog/src/pages/blog/2024-12-21_Continuando-con-el-Modelo-O1--Casos-de-Uso-Avanzados-y-Ejecuci-n-Planificada-1930ca9b641e.md";
				const url = "/blog/2024-12-21_Continuando-con-el-Modelo-O1--Casos-de-Uso-Avanzados-y-Ejecuci-n-Planificada-1930ca9b641e";
				function rawContent() {
					return "   \n                                        \n                                                                                     \n               \n                              \n       \n              \n                                     \n                                                                                                                \n   \n\nContinuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada\n============================================================================\n\nEn el blog anterior exploramos los fundamentos y principios del modelo O1. Ahora profundizaremos en sus capacidades para planificar tareasâ€¦\n\n* * *\n\n### Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada\n\n![](https://cdn-images-1.medium.com/max/800/1*xzLfdFiGy4qxuZKN6G7IWQ.png)\n\n[https://planetachatbot.com/marco-o1-un-nuevo-gran-modelo-de-razonamiento-lrm/](https://planetachatbot.com/marco-o1-un-nuevo-gran-modelo-de-razonamiento-lrm/)\n\nEn el blog anterior exploramos los fundamentos y principios del modelo **O1**. Ahora profundizaremos en sus capacidades para **planificar tareas complejas** y ejecutar cada paso con herramientas adicionales como **GPT-4o-mini**. Este enfoque se aplica a escenarios como la gestiÃ³n de cadenas de suministro, donde se requiere tomar decisiones escalonadas con datos dinÃ¡micos.\n\n* * *\n\n### PlanificaciÃ³n y EjecuciÃ³n con O1 y GPT-4o-mini\n\nEl modelo O1 puede generar planes detallados para resolver tareas utilizando herramientas predefinidas. Una vez generado el plan, cada paso se ejecuta mediante GPT-4o-mini, que llama a funciones especÃ­ficas para cumplir las instrucciones.\n\n### Ejemplo Real: GestiÃ³n de un Pedido en la Cadena de Suministro\n\n#### Escenario\n\nUn pedido requiere 200 unidades del producto **Smart Home Hub X200**, pero solo hay 50 unidades disponibles en el inventario actual. El plan debe considerar:\n\n1.  Revisar el inventario disponible.\n2.  Identificar proveedores para obtener componentes adicionales.\n3.  Programar producciÃ³n para satisfacer la demanda.\n4.  Organizar el envÃ­o al cliente.\n5.  Notificar al cliente sobre el progreso.\n\n#### Contexto Inicial (EnÂ Python)\n\ncontext = {  \n    'inventory': {  \n        'X200': 50  \\# Cantidad disponible en inventario  \n    },  \n    'orders': \\[  \n        {  \n            'order\\_id': 'ORD3001',  \n            'product\\_id': 'X200',  \n            'quantity': 200,  \n            'customer\\_id': 'CUST9001',  \n            'destination': 'Los Angeles',  \n        }  \n    \\],  \n    'available\\_suppliers': \\['SUPP1001', 'SUPP1002'\\],  \n    'production\\_capacity': {  \n        'immediate': 100,  \n        'next\\_week': 150  \n    },  \n    'shipping\\_options': {  \n        'Los Angeles': \\[  \n            {'carrier\\_id': 'CARRIER1', 'service\\_level': 'Standard', 'cost': 1000},  \n            {'carrier\\_id': 'CARRIER2', 'service\\_level': 'Express', 'cost': 1500}  \n        \\]  \n    },  \n    'customers': {  \n        'CUST9001': {  \n            'name': 'ElectroWorld',  \n            'address': '123 Market Street, Los Angeles, CA'  \n        }  \n    },  \n    'products': {  \n        'X200': {  \n            'name': 'Smart Home Hub X200',  \n            'components\\_needed': {  \n                'COMP\\_X200': 1  \\# Cada unidad requiere 1 componente COMP\\_X200  \n            }  \n        }  \n    }  \n}\n\n* * *\n\n### GeneraciÃ³n del Plan conÂ O1\n\n#### Prompt\n\nEres un asistente de gestiÃ³n de cadenas de suministro. Revisa el siguiente escenario y genera un plan detallado para procesar el pedido.\n\nFunciones disponibles:  \n\\- get\\_inventory\\_status(product\\_id)  \n\\- get\\_product\\_details(product\\_id)  \n\\- update\\_inventory(product\\_id, quantity\\_change)  \n\\- fetch\\_new\\_orders()  \n\\- allocate\\_stock(order\\_id, product\\_id, quantity)  \n\\- check\\_available\\_suppliers()  \n\\- get\\_supplier\\_info(supplier\\_id)  \n\\- place\\_purchase\\_order(supplier\\_id, component\\_id, quantity)  \n\\- check\\_production\\_capacity(time\\_frame)  \n\\- schedule\\_production\\_run(product\\_id, quantity, time\\_frame)  \n\\- calculate\\_shipping\\_options(destination, weight, dimensions)  \n\\- book\\_shipment(order\\_id, carrier\\_id, service\\_level)  \n\\- send\\_order\\_update(customer\\_id, order\\_id, message)\n\nGenera un plan estructurado paso a paso.\n\n#### Plan Generado\n\n1. \\*\\*Revisar el inventario:\\*\\*  \n   - Llamar a \\`get\\_inventory\\_status\\` para verificar la disponibilidad del producto X200.\n\n2\\. \\*\\*Evaluar producciÃ³n:\\*\\*  \n   - Si el inventario es insuficiente, llamar a \\`check\\_production\\_capacity\\` para programar la producciÃ³n de las unidades faltantes.\n\n3\\. \\*\\*Ordenar componentes adicionales:\\*\\*  \n   - Identificar proveedores disponibles con \\`check\\_available\\_suppliers\\`.  \n   - Obtener detalles del proveedor con \\`get\\_supplier\\_info\\`.  \n   - Colocar Ã³rdenes de compra con \\`place\\_purchase\\_order\\`.\n\n4\\. \\*\\*Organizar envÃ­o:\\*\\*  \n   - Calcular opciones de envÃ­o con \\`calculate\\_shipping\\_options\\`.  \n   - Reservar envÃ­o con \\`book\\_shipment\\`.\n\n5\\. \\*\\*Notificar al cliente:\\*\\*  \n   - Actualizar al cliente con \\`send\\_order\\_update\\`.\n\n* * *\n\n### EjecuciÃ³n del Plan con GPT-4o-mini\n\nCada paso del plan se ejecuta llamando funciones especÃ­ficas. Por ejemplo:\n\n#### Verificar Inventario\n\ndef get\\_inventory\\_status(product\\_id):  \n    quantity = context\\['inventory'\\].get(product\\_id, 0)  \n    return {'product\\_id': product\\_id, 'quantity': quantity}  \n\\# EjecuciÃ³n  \ninventory\\_status = get\\_inventory\\_status('X200')  \nprint(inventory\\_status)  \\# {'product\\_id': 'X200', 'quantity': 50}\n\n#### Programar ProducciÃ³n\n\ndef schedule\\_production\\_run(product\\_id, quantity, time\\_frame):  \n    capacity = context\\['production\\_capacity'\\].get(time\\_frame, 0)  \n    if capacity >= quantity:  \n        context\\['production\\_capacity'\\]\\[time\\_frame\\] -= quantity  \n        context\\['inventory'\\]\\[product\\_id\\] += quantity  \n        return {'status': 'Scheduled', 'quantity': quantity, 'time\\_frame': time\\_frame}  \n    return {'error': 'Capacidad insuficiente'}  \n\\# EjecuciÃ³n  \nproduction\\_result = schedule\\_production\\_run('X200', 100, 'immediate')  \nprint(production\\_result)  \\# {'status': 'Scheduled', 'quantity': 100, 'time\\_frame': 'immediate'}\n\n* * *\n\n### Aplicaciones Reales\n\n1.  **E-commerce:** Gestionar pedidos complejos con inventarios limitados y proveedores dispersos.\n2.  **Manufactura:** Optimizar la producciÃ³n basada en la demanda y capacidad.\n3.  **LogÃ­stica:** Coordinar opciones de envÃ­o para cumplir plazos ajustados.\n\n* * *\n\n### Enlaces Ãºtiles\n\n*   **DocumentaciÃ³n de OpenAI Python SDK:** [Enlace oficial](https://platform.openai.com/docs/)\n*   **GuÃ­a de Prompting:** [Mejores prÃ¡cticas](https://platform.openai.com/docs/guides/chat)\n\n* * *\n\nEste enfoque combinado de O1 y GPT-4o-mini permite resolver tareas complejas de forma eficiente y detallada. Â¡Experimenta con estos ejemplos y lleva tus proyectos al siguiente nivel! ðŸŒŸ\n\nBy [Jaime HernÃ¡ndez](https://medium.com/@devjaime) on [December 21, 2024](https://medium.com/p/1930ca9b641e).\n\n[Canonical link](https://medium.com/@devjaime/continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuci%C3%B3n-planificada-1930ca9b641e)\n\nExported from [Medium](https://medium.com) on March 15, 2025.";
				}
				async function compiledContent() {
					return await html();
				}
				function getHeadings() {
					return [{"depth":1,"slug":"continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuciÃ³n-planificada","text":"Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada"},{"depth":3,"slug":"continuando-con-el-modelo-o1-casos-de-uso-avanzados-y-ejecuciÃ³n-planificada-1","text":"Continuando con el Modelo O1: Casos de Uso Avanzados y EjecuciÃ³n Planificada"},{"depth":3,"slug":"planificaciÃ³n-y-ejecuciÃ³n-con-o1-y-gpt-4o-mini","text":"PlanificaciÃ³n y EjecuciÃ³n con O1 y GPT-4o-mini"},{"depth":3,"slug":"ejemplo-real-gestiÃ³n-de-un-pedido-en-la-cadena-de-suministro","text":"Ejemplo Real: GestiÃ³n de un Pedido en la Cadena de Suministro"},{"depth":4,"slug":"escenario","text":"Escenario"},{"depth":4,"slug":"contexto-inicial-enpython","text":"Contexto Inicial (EnÂ Python)"},{"depth":3,"slug":"generaciÃ³n-del-plan-cono1","text":"GeneraciÃ³n del Plan conÂ O1"},{"depth":4,"slug":"prompt","text":"Prompt"},{"depth":4,"slug":"plan-generado","text":"Plan Generado"},{"depth":3,"slug":"ejecuciÃ³n-del-plan-con-gpt-4o-mini","text":"EjecuciÃ³n del Plan con GPT-4o-mini"},{"depth":4,"slug":"verificar-inventario","text":"Verificar Inventario"},{"depth":4,"slug":"programar-producciÃ³n","text":"Programar ProducciÃ³n"},{"depth":3,"slug":"aplicaciones-reales","text":"Aplicaciones Reales"},{"depth":3,"slug":"enlaces-Ãºtiles","text":"Enlaces Ãºtiles"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${renderComponent(result, 'Layout', $$BlogLayout, {
								file,
								url,
								content,
								frontmatter: content,
								headings: getHeadings(),
								rawContent,
								compiledContent,
								'server:root': true,
							}, {
								'default': () => renderTemplate`${unescapeHTML(html())}`
							})}`;
				});

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	Content,
	compiledContent,
	default: Content,
	file,
	frontmatter,
	getHeadings,
	rawContent,
	url
}, Symbol.toStringTag, { value: 'Module' }));

export { _page as _ };
